OpenShadingLanguage 1.00
# Compiled by oslc 1.3.0
shader node_fresnel
param	float	IOR	1.45 		 %read{2,2} %write{2147483647,-1}
param	normal	Normal	0 0 0 		 %read{8,8} %write{0,0}
oparam	float	Fac	0 		 %read{2147483647,-1} %write{33,33}
global	vector	I	 %read{8,8} %write{2147483647,-1}
global	normal	N	 %read{0,0} %write{2147483647,-1}
local	float	___592_c	 %read{12,24} %write{9,9}
local	float	___592_g	 %read{14,23} %write{13,16}
local	float	___592_result	 %read{33,33} %write{31,32}
local	float	___593_A	 %read{27,28} %write{19,19}
local	float	___593_B	 %read{29,29} %write{26,26}
local	float	f	 %read{5,6} %write{2,2}
local	float	eta	 %read{10,10} %write{5,6}
const	float	$const1	1		 %read{1,32} %write{2147483647,-1}
const	float	$const2	9.9999997e-06		 %read{1,1} %write{2147483647,-1}
temp	float	$tmp1	 %read{2,2} %write{1,1}
temp	int	$tmp2	 %read{4,4} %write{3,3}
const	string	$const3	"fresnel_dielectric"		 %read{7,7} %write{2147483647,-1}
temp	float	$tmp3	 %read{9,9} %write{8,8}
temp	float	$tmp4	 %read{11,11} %write{10,10}
temp	float	$tmp5	 %read{13,13} %write{11,11}
temp	float	$tmp6	 %read{13,13} %write{12,12}
const	int	$const5	0		 %read{14,14} %write{2147483647,-1}
temp	int	$tmp7	 %read{15,15} %write{14,14}
temp	float	$tmp8	 %read{19,19} %write{17,17}
temp	float	$tmp9	 %read{19,19} %write{18,18}
temp	float	$tmp10	 %read{21,21} %write{20,20}
temp	float	$tmp11	 %read{22,22} %write{21,21}
temp	float	$tmp12	 %read{26,26} %write{22,22}
temp	float	$tmp13	 %read{24,24} %write{23,23}
temp	float	$tmp14	 %read{25,25} %write{24,24}
temp	float	$tmp15	 %read{26,26} %write{25,25}
const	float	$const6	0.5		 %read{27,27} %write{2147483647,-1}
temp	float	$tmp16	 %read{28,28} %write{27,27}
temp	float	$tmp17	 %read{31,31} %write{28,28}
temp	float	$tmp18	 %read{30,30} %write{29,29}
temp	float	$tmp19	 %read{31,31} %write{30,30}
code Normal
# intern/cycles/kernel/shaders/node_fresnel.osl:24
# 	normal Normal = N,
	assign		Normal N 	%filename{"intern/cycles/kernel/shaders/node_fresnel.osl"} %line{24} %argrw{"wr"}
code ___main___
# intern/cycles/kernel/shaders/node_fresnel.osl:27
# 	float f = max(IOR, 1.0 + 1e-5);
	add		$tmp1 $const1 $const2 	%filename{"intern/cycles/kernel/shaders/node_fresnel.osl"} %line{27} %argrw{"wrr"}
	max		f IOR $tmp1 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.osl:28
# 	float eta = backfacing() ? 1.0 / f: f;
	backfacing	$tmp2 	%line{28} %argrw{"w"}
	if		$tmp2 6 7 	%argrw{"r"}
	div		eta $const1 f 	%argrw{"wrr"}
	assign		eta f 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_fresnel.osl:29
# 	Fac = fresnel_dielectric(I, Normal, eta);
	functioncall	$const3 34 	%line{29} %argrw{"r"}
# intern/cycles/kernel/shaders/node_fresnel.h:21
# 	float c = fabs(dot(Incoming, Normal));
	dot		$tmp3 I Normal 	%filename{"intern/cycles/kernel/shaders/node_fresnel.h"} %line{21} %argrw{"wrr"}
	fabs		___592_c $tmp3 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_fresnel.h:22
# 	float g = eta * eta - 1 + c * c;
	mul		$tmp4 eta eta 	%line{22} %argrw{"wrr"}
	sub		$tmp5 $tmp4 $const1 	%argrw{"wrr"}
	mul		$tmp6 ___592_c ___592_c 	%argrw{"wrr"}
	add		___592_g $tmp5 $tmp6 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:25
# 	if (g > 0) {
	gt		$tmp7 ___592_g $const5 	%line{25} %argrw{"wrr"}
	if		$tmp7 32 33 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_fresnel.h:26
# 		g = sqrt(g);
	sqrt		___592_g ___592_g 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_fresnel.h:27
# 		float A = (g - c) / (g + c);
	sub		$tmp8 ___592_g ___592_c 	%line{27} %argrw{"wrr"}
	add		$tmp9 ___592_g ___592_c 	%argrw{"wrr"}
	div		___593_A $tmp8 $tmp9 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:28
# 		float B = (c * (g + c) - 1) / (c * (g - c) + 1);
	add		$tmp10 ___592_g ___592_c 	%line{28} %argrw{"wrr"}
	mul		$tmp11 ___592_c $tmp10 	%argrw{"wrr"}
	sub		$tmp12 $tmp11 $const1 	%argrw{"wrr"}
	sub		$tmp13 ___592_g ___592_c 	%argrw{"wrr"}
	mul		$tmp14 ___592_c $tmp13 	%argrw{"wrr"}
	add		$tmp15 $tmp14 $const1 	%argrw{"wrr"}
	div		___593_B $tmp12 $tmp15 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:29
# 		result = 0.5 * A * A * (1 + B * B);
	mul		$tmp16 $const6 ___593_A 	%line{29} %argrw{"wrr"}
	mul		$tmp17 $tmp16 ___593_A 	%argrw{"wrr"}
	mul		$tmp18 ___593_B ___593_B 	%argrw{"wrr"}
	add		$tmp19 $const1 $tmp18 	%argrw{"wrr"}
	mul		___592_result $tmp17 $tmp19 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:32
# 		result = 1.0;  /* TIR (no refracted component) */
	assign		___592_result $const1 	%line{32} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_fresnel.h:34
# 	return result;
	assign		Fac ___592_result 	%line{34} %argrw{"wr"}
	end
