OpenShadingLanguage 1.00
# Compiled by oslc 1.3.0
shader node_image_texture
param	int	use_mapping	0 		 %read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		 %read{3,3} %write{2147483647,-1} %derivs
param	point	Vector	0 0 0 		 %read{1,1} %write{0,0} %derivs
param	string	filename	"" 		 %read{10,380} %write{2147483647,-1}
param	string	color_space	"sRGB" 		 %read{11,381} %write{2147483647,-1}
param	string	projection	"Flat" 		 %read{4,61} %write{2147483647,-1}
param	float	projection_blend	0 		 %read{78,78} %write{2147483647,-1}
oparam	color	Color	0 0 0 		 %read{304,432} %write{60,432}
oparam	float	Alpha	1 		 %read{307,435} %write{10,435}
global	point	P	 %read{0,0} %write{2147483647,-1} %derivs
global	normal	N	 %read{63,63} %write{2147483647,-1}
local	color	___604_rgb	 %read{14,430} %write{10,429}
local	point	p	 %read{3,377} %write{1,3} %derivs
local	vector	___606_Nob	 %read{64,234} %write{63,76}
local	vector	___606_weight	 %read{151,433} %write{77,241}
local	float	___606_blend	 %read{79,207} %write{78,78}
local	float	___606_limit	 %read{85,238} %write{80,80}
local	float	___606_tmp_alpha	 %read{306,434} %write{252,380}
const	string	$const1	"Flat"		 %read{4,4} %write{2147483647,-1}
temp	int	$tmp1	 %read{5,5} %write{4,4}
const	int	$const2	0		 %read{6,384} %write{2147483647,-1}
temp	float	$tmp2	 %read{10,10} %write{6,6} %derivs
const	int	$const3	1		 %read{7,399} %write{2147483647,-1}
temp	float	$tmp3	 %read{9,9} %write{7,7} %derivs
const	string	$const4	"image_texture_lookup"		 %read{8,378} %write{2147483647,-1}
const	float	$const5	1		 %read{9,425} %write{2147483647,-1}
temp	float	$tmp4	 %read{10,10} %write{9,9} %derivs
const	string	$const6	"wrap"		 %read{10,380} %write{2147483647,-1}
const	string	$const7	"periodic"		 %read{10,380} %write{2147483647,-1}
const	string	$const8	"alpha"		 %read{10,380} %write{2147483647,-1}
const	string	$const9	"sRGB"		 %read{11,381} %write{2147483647,-1}
temp	int	$tmp5	 %read{12,12} %write{11,11}
const	string	$const10	"color_srgb_to_scene_linear"		 %read{13,415} %write{2147483647,-1}
temp	float	$tmp6	 %read{59,59} %write{20,27}
temp	float	$tmp7	 %read{16,24} %write{14,14}
const	float	$const11	0.040449999		 %read{16,416} %write{2147483647,-1}
temp	int	$tmp8	 %read{17,17} %write{16,16}
const	float	$const12	0		 %read{18,420} %write{2147483647,-1}
temp	int	$tmp9	 %read{19,19} %write{18,18}
const	float	$const13	12.92		 %read{21,421} %write{2147483647,-1}
temp	float	$tmp10	 %read{22,22} %write{21,21}
const	float	$const14	0.055		 %read{24,424} %write{2147483647,-1}
temp	float	$tmp11	 %read{26,26} %write{24,24}
const	float	$const15	1.0549999		 %read{25,425} %write{2147483647,-1}
temp	float	$tmp12	 %read{26,26} %write{25,25}
temp	float	$tmp13	 %read{27,27} %write{26,26}
const	float	$const16	2.4000001		 %read{27,427} %write{2147483647,-1}
temp	float	$tmp14	 %read{59,59} %write{35,42}
temp	float	$tmp15	 %read{31,39} %write{29,29}
temp	int	$tmp16	 %read{32,32} %write{31,31}
temp	int	$tmp17	 %read{34,34} %write{33,33}
temp	float	$tmp18	 %read{37,37} %write{36,36}
temp	float	$tmp19	 %read{41,41} %write{39,39}
temp	float	$tmp20	 %read{41,41} %write{40,40}
temp	float	$tmp21	 %read{42,42} %write{41,41}
temp	float	$tmp22	 %read{59,59} %write{50,57}
const	int	$const17	2		 %read{44,433} %write{2147483647,-1}
temp	float	$tmp23	 %read{46,54} %write{44,44}
temp	int	$tmp24	 %read{47,47} %write{46,46}
temp	int	$tmp25	 %read{49,49} %write{48,48}
temp	float	$tmp26	 %read{52,52} %write{51,51}
temp	float	$tmp27	 %read{56,56} %write{54,54}
temp	float	$tmp28	 %read{56,56} %write{55,55}
temp	float	$tmp29	 %read{57,57} %write{56,56}
const	string	$const18	"Box"		 %read{61,61} %write{2147483647,-1}
temp	int	$tmp30	 %read{62,62} %write{61,61}
const	string	$const19	"world"		 %read{63,63} %write{2147483647,-1}
const	string	$const20	"object"		 %read{63,63} %write{2147483647,-1}
temp	float	$tmp31	 %read{70,70} %write{65,65}
temp	float	$tmp32	 %read{65,65} %write{64,64}
temp	float	$tmp33	 %read{70,70} %write{67,67}
temp	float	$tmp34	 %read{67,67} %write{66,66}
temp	float	$tmp35	 %read{70,70} %write{69,69}
temp	float	$tmp36	 %read{69,69} %write{68,68}
temp	float	$tmp37	 %read{73,73} %write{71,71}
temp	float	$tmp38	 %read{73,73} %write{72,72}
temp	float	$tmp39	 %read{75,75} %write{73,73}
temp	float	$tmp40	 %read{75,75} %write{74,74}
temp	float	$tmp41	 %read{76,76} %write{75,75}
const	vector	$const21	0 0 0		 %read{77,77} %write{2147483647,-1}
const	float	$const22	0.5		 %read{80,205} %write{2147483647,-1}
temp	float	$tmp42	 %read{80,80} %write{79,79}
temp	float	$tmp43	 %read{86,86} %write{81,81}
temp	float	$tmp44	 %read{84,84} %write{82,82}
temp	float	$tmp45	 %read{84,84} %write{83,83}
temp	float	$tmp46	 %read{85,85} %write{84,84}
temp	float	$tmp47	 %read{86,86} %write{85,85}
temp	int	$tmp48	 %read{87,87} %write{86,86}
temp	int	$tmp49	 %read{88,97} %write{87,96}
temp	float	$tmp50	 %read{94,94} %write{89,89}
temp	float	$tmp51	 %read{92,92} %write{90,90}
temp	float	$tmp52	 %read{92,92} %write{91,91}
temp	float	$tmp53	 %read{93,93} %write{92,92}
temp	float	$tmp54	 %read{94,94} %write{93,93}
temp	int	$tmp55	 %read{95,95} %write{94,94}
temp	int	$tmp56	 %read{96,96} %write{95,95}
temp	float	$tmp57	 %read{104,104} %write{99,99}
temp	float	$tmp58	 %read{102,102} %write{100,100}
temp	float	$tmp59	 %read{102,102} %write{101,101}
temp	float	$tmp60	 %read{103,103} %write{102,102}
temp	float	$tmp61	 %read{104,104} %write{103,103}
temp	int	$tmp62	 %read{105,105} %write{104,104}
temp	int	$tmp63	 %read{106,115} %write{105,114}
temp	float	$tmp64	 %read{112,112} %write{107,107}
temp	float	$tmp65	 %read{110,110} %write{108,108}
temp	float	$tmp66	 %read{110,110} %write{109,109}
temp	float	$tmp67	 %read{111,111} %write{110,110}
temp	float	$tmp68	 %read{112,112} %write{111,111}
temp	int	$tmp69	 %read{113,113} %write{112,112}
temp	int	$tmp70	 %read{114,114} %write{113,113}
temp	float	$tmp71	 %read{122,122} %write{117,117}
temp	float	$tmp72	 %read{120,120} %write{118,118}
temp	float	$tmp73	 %read{120,120} %write{119,119}
temp	float	$tmp74	 %read{121,121} %write{120,120}
temp	float	$tmp75	 %read{122,122} %write{121,121}
temp	int	$tmp76	 %read{123,123} %write{122,122}
temp	int	$tmp77	 %read{124,133} %write{123,132}
temp	float	$tmp78	 %read{130,130} %write{125,125}
temp	float	$tmp79	 %read{128,128} %write{126,126}
temp	float	$tmp80	 %read{128,128} %write{127,127}
temp	float	$tmp81	 %read{129,129} %write{128,128}
temp	float	$tmp82	 %read{130,130} %write{129,129}
temp	int	$tmp83	 %read{131,131} %write{130,130}
temp	int	$tmp84	 %read{132,132} %write{131,131}
temp	int	$tmp85	 %read{136,136} %write{135,135}
temp	float	$tmp86	 %read{143,143} %write{137,137}
temp	float	$tmp87	 %read{142,142} %write{138,138}
temp	float	$tmp88	 %read{141,141} %write{139,139}
temp	float	$tmp89	 %read{141,141} %write{140,140}
temp	float	$tmp90	 %read{142,142} %write{141,141}
temp	float	$tmp91	 %read{143,143} %write{142,142}
temp	int	$tmp92	 %read{144,144} %write{143,143}
temp	float	$tmp93	 %read{149,149} %write{145,145}
temp	float	$tmp94	 %read{148,148} %write{146,146}
temp	float	$tmp95	 %read{148,148} %write{147,147}
temp	float	$tmp96	 %read{149,149} %write{148,148}
temp	float	$tmp97	 %read{150,150} %write{149,149}
temp	float	$tmp98	 %read{159,159} %write{158,158}
temp	float	$tmp99	 %read{154,154} %write{151,151}
temp	float	$tmp100	 %read{153,153} %write{152,152}
temp	float	$tmp101	 %read{154,154} %write{153,153}
temp	float	$tmp102	 %read{155,155} %write{154,154}
temp	float	$tmp103	 %read{157,157} %write{155,155}
const	string	$const23	"clamp"		 %read{156,208} %write{2147483647,-1}
temp	float	$tmp104	 %read{158,158} %write{157,157}
temp	float	$tmp105	 %read{161,161} %write{160,160}
temp	float	$tmp106	 %read{162,162} %write{161,161}
temp	float	$tmp107	 %read{169,169} %write{163,163}
temp	float	$tmp108	 %read{168,168} %write{164,164}
temp	float	$tmp109	 %read{167,167} %write{165,165}
temp	float	$tmp110	 %read{167,167} %write{166,166}
temp	float	$tmp111	 %read{168,168} %write{167,167}
temp	float	$tmp112	 %read{169,169} %write{168,168}
temp	int	$tmp113	 %read{170,170} %write{169,169}
temp	float	$tmp114	 %read{175,175} %write{171,171}
temp	float	$tmp115	 %read{174,174} %write{172,172}
temp	float	$tmp116	 %read{174,174} %write{173,173}
temp	float	$tmp117	 %read{175,175} %write{174,174}
temp	float	$tmp118	 %read{176,176} %write{175,175}
temp	float	$tmp119	 %read{185,185} %write{184,184}
temp	float	$tmp120	 %read{180,180} %write{177,177}
temp	float	$tmp121	 %read{179,179} %write{178,178}
temp	float	$tmp122	 %read{180,180} %write{179,179}
temp	float	$tmp123	 %read{181,181} %write{180,180}
temp	float	$tmp124	 %read{183,183} %write{181,181}
temp	float	$tmp125	 %read{184,184} %write{183,183}
temp	float	$tmp126	 %read{187,187} %write{186,186}
temp	float	$tmp127	 %read{188,188} %write{187,187}
temp	float	$tmp128	 %read{195,195} %write{189,189}
temp	float	$tmp129	 %read{194,194} %write{190,190}
temp	float	$tmp130	 %read{193,193} %write{191,191}
temp	float	$tmp131	 %read{193,193} %write{192,192}
temp	float	$tmp132	 %read{194,194} %write{193,193}
temp	float	$tmp133	 %read{195,195} %write{194,194}
temp	int	$tmp134	 %read{196,196} %write{195,195}
temp	float	$tmp135	 %read{201,201} %write{197,197}
temp	float	$tmp136	 %read{200,200} %write{198,198}
temp	float	$tmp137	 %read{200,200} %write{199,199}
temp	float	$tmp138	 %read{201,201} %write{200,200}
temp	float	$tmp139	 %read{202,202} %write{201,201}
temp	float	$tmp140	 %read{211,211} %write{210,210}
temp	float	$tmp141	 %read{206,206} %write{203,203}
temp	float	$tmp142	 %read{205,205} %write{204,204}
temp	float	$tmp143	 %read{206,206} %write{205,205}
temp	float	$tmp144	 %read{207,207} %write{206,206}
temp	float	$tmp145	 %read{209,209} %write{207,207}
temp	float	$tmp146	 %read{210,210} %write{209,209}
temp	float	$tmp147	 %read{213,213} %write{212,212}
temp	float	$tmp148	 %read{214,214} %write{213,213}
const	float	$const24	2		 %read{215,238} %write{2147483647,-1}
temp	float	$tmp149	 %read{217,217} %write{215,215}
temp	float	$tmp150	 %read{217,217} %write{216,216}
temp	float	$tmp151	 %read{219,219} %write{217,217}
temp	float	$tmp152	 %read{219,219} %write{218,218}
temp	float	$tmp153	 %read{222,222} %write{219,219}
temp	float	$tmp154	 %read{221,221} %write{220,220}
temp	float	$tmp155	 %read{222,222} %write{221,221}
temp	float	$tmp156	 %read{223,223} %write{222,222}
temp	float	$tmp157	 %read{226,226} %write{224,224}
temp	float	$tmp158	 %read{226,226} %write{225,225}
temp	float	$tmp159	 %read{228,228} %write{226,226}
temp	float	$tmp160	 %read{228,228} %write{227,227}
temp	float	$tmp161	 %read{231,231} %write{228,228}
temp	float	$tmp162	 %read{230,230} %write{229,229}
temp	float	$tmp163	 %read{231,231} %write{230,230}
temp	float	$tmp164	 %read{232,232} %write{231,231}
temp	float	$tmp165	 %read{235,235} %write{233,233}
temp	float	$tmp166	 %read{235,235} %write{234,234}
temp	float	$tmp167	 %read{237,237} %write{235,235}
temp	float	$tmp168	 %read{237,237} %write{236,236}
temp	float	$tmp169	 %read{240,240} %write{237,237}
temp	float	$tmp170	 %read{239,239} %write{238,238}
temp	float	$tmp171	 %read{240,240} %write{239,239}
temp	float	$tmp172	 %read{241,241} %write{240,240}
const	color	$const25	0 0 0		 %read{242,242} %write{2147483647,-1}
temp	float	$tmp173	 %read{245,245} %write{244,244}
temp	int	$tmp174	 %read{246,246} %write{245,245}
temp	float	$tmp175	 %read{303,303} %write{247,247}
temp	color	$tmp176	 %read{303,303} %write{302,302}
temp	float	$tmp177	 %read{252,252} %write{248,248} %derivs
temp	float	$tmp178	 %read{251,251} %write{249,249} %derivs
temp	float	$tmp179	 %read{252,252} %write{251,251} %derivs
temp	int	$tmp180	 %read{254,254} %write{253,253}
temp	float	$tmp181	 %read{301,301} %write{262,269}
temp	float	$tmp182	 %read{258,266} %write{256,256}
temp	int	$tmp183	 %read{259,259} %write{258,258}
temp	int	$tmp184	 %read{261,261} %write{260,260}
temp	float	$tmp185	 %read{264,264} %write{263,263}
temp	float	$tmp186	 %read{268,268} %write{266,266}
temp	float	$tmp187	 %read{268,268} %write{267,267}
temp	float	$tmp188	 %read{269,269} %write{268,268}
temp	float	$tmp189	 %read{301,301} %write{277,284}
temp	float	$tmp190	 %read{273,281} %write{271,271}
temp	int	$tmp191	 %read{274,274} %write{273,273}
temp	int	$tmp192	 %read{276,276} %write{275,275}
temp	float	$tmp193	 %read{279,279} %write{278,278}
temp	float	$tmp194	 %read{283,283} %write{281,281}
temp	float	$tmp195	 %read{283,283} %write{282,282}
temp	float	$tmp196	 %read{284,284} %write{283,283}
temp	float	$tmp197	 %read{301,301} %write{292,299}
temp	float	$tmp198	 %read{288,296} %write{286,286}
temp	int	$tmp199	 %read{289,289} %write{288,288}
temp	int	$tmp200	 %read{291,291} %write{290,290}
temp	float	$tmp201	 %read{294,294} %write{293,293}
temp	float	$tmp202	 %read{298,298} %write{296,296}
temp	float	$tmp203	 %read{298,298} %write{297,297}
temp	float	$tmp204	 %read{299,299} %write{298,298}
temp	color	$tmp205	 %read{304,304} %write{303,303}
temp	float	$tmp206	 %read{306,306} %write{305,305}
temp	float	$tmp207	 %read{307,307} %write{306,306}
temp	float	$tmp208	 %read{309,309} %write{308,308}
temp	int	$tmp209	 %read{310,310} %write{309,309}
temp	float	$tmp210	 %read{367,367} %write{311,311}
temp	color	$tmp211	 %read{367,367} %write{366,366}
temp	float	$tmp212	 %read{316,316} %write{312,312} %derivs
temp	float	$tmp213	 %read{315,315} %write{313,313} %derivs
temp	float	$tmp214	 %read{316,316} %write{315,315} %derivs
temp	int	$tmp215	 %read{318,318} %write{317,317}
temp	float	$tmp216	 %read{365,365} %write{326,333}
temp	float	$tmp217	 %read{322,330} %write{320,320}
temp	int	$tmp218	 %read{323,323} %write{322,322}
temp	int	$tmp219	 %read{325,325} %write{324,324}
temp	float	$tmp220	 %read{328,328} %write{327,327}
temp	float	$tmp221	 %read{332,332} %write{330,330}
temp	float	$tmp222	 %read{332,332} %write{331,331}
temp	float	$tmp223	 %read{333,333} %write{332,332}
temp	float	$tmp224	 %read{365,365} %write{341,348}
temp	float	$tmp225	 %read{337,345} %write{335,335}
temp	int	$tmp226	 %read{338,338} %write{337,337}
temp	int	$tmp227	 %read{340,340} %write{339,339}
temp	float	$tmp228	 %read{343,343} %write{342,342}
temp	float	$tmp229	 %read{347,347} %write{345,345}
temp	float	$tmp230	 %read{347,347} %write{346,346}
temp	float	$tmp231	 %read{348,348} %write{347,347}
temp	float	$tmp232	 %read{365,365} %write{356,363}
temp	float	$tmp233	 %read{352,360} %write{350,350}
temp	int	$tmp234	 %read{353,353} %write{352,352}
temp	int	$tmp235	 %read{355,355} %write{354,354}
temp	float	$tmp236	 %read{358,358} %write{357,357}
temp	float	$tmp237	 %read{362,362} %write{360,360}
temp	float	$tmp238	 %read{362,362} %write{361,361}
temp	float	$tmp239	 %read{363,363} %write{362,362}
temp	color	$tmp240	 %read{368,368} %write{367,367}
temp	float	$tmp241	 %read{370,370} %write{369,369}
temp	float	$tmp242	 %read{371,371} %write{370,370}
temp	float	$tmp243	 %read{373,373} %write{372,372}
temp	int	$tmp244	 %read{374,374} %write{373,373}
temp	float	$tmp245	 %read{431,431} %write{375,375}
temp	color	$tmp246	 %read{431,431} %write{430,430}
temp	float	$tmp247	 %read{380,380} %write{376,376} %derivs
temp	float	$tmp248	 %read{379,379} %write{377,377} %derivs
temp	float	$tmp249	 %read{380,380} %write{379,379} %derivs
temp	int	$tmp250	 %read{382,382} %write{381,381}
temp	float	$tmp251	 %read{429,429} %write{390,397}
temp	float	$tmp252	 %read{386,394} %write{384,384}
temp	int	$tmp253	 %read{387,387} %write{386,386}
temp	int	$tmp254	 %read{389,389} %write{388,388}
temp	float	$tmp255	 %read{392,392} %write{391,391}
temp	float	$tmp256	 %read{396,396} %write{394,394}
temp	float	$tmp257	 %read{396,396} %write{395,395}
temp	float	$tmp258	 %read{397,397} %write{396,396}
temp	float	$tmp259	 %read{429,429} %write{405,412}
temp	float	$tmp260	 %read{401,409} %write{399,399}
temp	int	$tmp261	 %read{402,402} %write{401,401}
temp	int	$tmp262	 %read{404,404} %write{403,403}
temp	float	$tmp263	 %read{407,407} %write{406,406}
temp	float	$tmp264	 %read{411,411} %write{409,409}
temp	float	$tmp265	 %read{411,411} %write{410,410}
temp	float	$tmp266	 %read{412,412} %write{411,411}
temp	float	$tmp267	 %read{429,429} %write{420,427}
temp	float	$tmp268	 %read{416,424} %write{414,414}
temp	int	$tmp269	 %read{417,417} %write{416,416}
temp	int	$tmp270	 %read{419,419} %write{418,418}
temp	float	$tmp271	 %read{422,422} %write{421,421}
temp	float	$tmp272	 %read{426,426} %write{424,424}
temp	float	$tmp273	 %read{426,426} %write{425,425}
temp	float	$tmp274	 %read{427,427} %write{426,426}
temp	color	$tmp275	 %read{432,432} %write{431,431}
temp	float	$tmp276	 %read{434,434} %write{433,433}
temp	float	$tmp277	 %read{435,435} %write{434,434}
code Vector
# intern/cycles/kernel/shaders/node_image_texture.osl:35
# 	point Vector = P,
	assign		Vector P 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{35} %argrw{"wr"}
code ___main___
# intern/cycles/kernel/shaders/node_image_texture.osl:43
# 	point p = Vector;
	assign		p Vector 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:45
# 	if (use_mapping)
	if		use_mapping 4 4 	%line{45} %argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:46
# 		p = transform(mapping, p);
	transform	p mapping p 	%line{46} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:48
# 	if (projection == "Flat") {
	eq		$tmp1 projection $const1 	%line{48} %argrw{"wrr"}
	if		$tmp1 61 436 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:49
# 		Color = image_texture_lookup(filename, color_space, p[0], p[1], Alpha);
	compref		$tmp2 p $const2 	%line{49} %argrw{"wrr"}
	compref		$tmp3 p $const3 	%argrw{"wrr"}
	functioncall	$const4 61 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:24
# 	color rgb = (color)texture(filename, u, 1.0 - v, "wrap", "periodic", "alpha", Alpha);
	sub		$tmp4 $const5 $tmp3 	%line{24} %argrw{"wrr"}
	texture		___604_rgb filename $tmp2 $tmp4 $const6 $const7 $const8 Alpha 	%argrw{"wrrrrrrw"} %argderivs{2,3}
# intern/cycles/kernel/shaders/node_image_texture.osl:26
# 	if (color_space == "sRGB")
	eq		$tmp5 color_space $const9 	%line{26} %argrw{"wrr"}
	if		$tmp5 60 60 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:27
# 		rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const10 60 	%line{27} %argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:38
#  *
	compref		$tmp7 ___604_rgb $const2 	%filename{"intern/cycles/kernel/shaders/node_color.h"} %line{38} %argrw{"wrr"}
	functioncall	$const10 29 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp8 $tmp7 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp8 24 29 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp9 $tmp7 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp9 21 23 	%argrw{"r"}
	assign		$tmp6 $const12 	%argrw{"wr"}
	div		$tmp10 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp6 $tmp7 $tmp10 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp11 $tmp7 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp12 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
	pow		$tmp6 $tmp13 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:39
# 		color_srgb_to_scene_linear(c[1]),
	compref		$tmp15 ___604_rgb $const3 	%line{39} %argrw{"wrr"}
	functioncall	$const10 44 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp16 $tmp15 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp16 39 44 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp17 $tmp15 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp17 36 38 	%argrw{"r"}
	assign		$tmp14 $const12 	%argrw{"wr"}
	div		$tmp18 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp14 $tmp15 $tmp18 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp19 $tmp15 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp20 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp21 $tmp19 $tmp20 	%argrw{"wrr"}
	pow		$tmp14 $tmp21 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	compref		$tmp23 ___604_rgb $const17 	%line{40} %argrw{"wrr"}
	functioncall	$const10 59 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp24 $tmp23 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp24 54 59 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp25 $tmp23 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp25 51 53 	%argrw{"r"}
	assign		$tmp22 $const12 	%argrw{"wr"}
	div		$tmp26 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp22 $tmp23 $tmp26 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp27 $tmp23 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp28 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp29 $tmp27 $tmp28 	%argrw{"wrr"}
	pow		$tmp22 $tmp29 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	color		___604_rgb $tmp6 $tmp14 $tmp22 	%line{40} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:29
# 	return rgb;
	assign		Color ___604_rgb 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{29} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:51
# 	else if (projection == "Box") {
	eq		$tmp30 projection $const18 	%line{51} %argrw{"wrr"}
	if		$tmp30 436 436 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:53
# 		vector Nob = transform("world", "object", N);
	transformn	___606_Nob $const19 $const20 N 	%line{53} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:56
# 		Nob = vector(fabs(Nob[0]), fabs(Nob[1]), fabs(Nob[2]));
	compref		$tmp32 ___606_Nob $const2 	%line{56} %argrw{"wrr"}
	fabs		$tmp31 $tmp32 	%argrw{"wr"}
	compref		$tmp34 ___606_Nob $const3 	%argrw{"wrr"}
	fabs		$tmp33 $tmp34 	%argrw{"wr"}
	compref		$tmp36 ___606_Nob $const17 	%argrw{"wrr"}
	fabs		$tmp35 $tmp36 	%argrw{"wr"}
	vector		___606_Nob $tmp31 $tmp33 $tmp35 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:57
# 		Nob /= (Nob[0] + Nob[1] + Nob[2]);
	compref		$tmp37 ___606_Nob $const2 	%line{57} %argrw{"wrr"}
	compref		$tmp38 ___606_Nob $const3 	%argrw{"wrr"}
	add		$tmp39 $tmp37 $tmp38 	%argrw{"wrr"}
	compref		$tmp40 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp41 $tmp39 $tmp40 	%argrw{"wrr"}
	div		___606_Nob ___606_Nob $tmp41 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:69
# 		vector weight = vector(0.0, 0.0, 0.0);
	assign		___606_weight $const21 	%line{69} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:70
# 		float blend = projection_blend;
	assign		___606_blend projection_blend 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:71
# 		float limit = 0.5 * (1.0 + blend);
	add		$tmp42 $const5 ___606_blend 	%line{71} %argrw{"wrr"}
	mul		___606_limit $const22 $tmp42 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:74
# 		if (Nob[0] > limit * (Nob[0] + Nob[1]) && Nob[0] > limit * (Nob[0] + Nob[2])) {
	compref		$tmp43 ___606_Nob $const2 	%line{74} %argrw{"wrr"}
	compref		$tmp44 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp45 ___606_Nob $const3 	%argrw{"wrr"}
	add		$tmp46 $tmp44 $tmp45 	%argrw{"wrr"}
	mul		$tmp47 ___606_limit $tmp46 	%argrw{"wrr"}
	gt		$tmp48 $tmp43 $tmp47 	%argrw{"wrr"}
	neq		$tmp49 $tmp48 $const2 	%argrw{"wrr"}
	if		$tmp49 97 97 	%argrw{"r"}
	compref		$tmp50 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp51 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp52 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp53 $tmp51 $tmp52 	%argrw{"wrr"}
	mul		$tmp54 ___606_limit $tmp53 	%argrw{"wrr"}
	gt		$tmp55 $tmp50 $tmp54 	%argrw{"wrr"}
	neq		$tmp56 $tmp55 $const2 	%argrw{"wrr"}
	assign		$tmp49 $tmp56 	%argrw{"wr"}
	if		$tmp49 99 242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:75
# 			weight[0] = 1.0;
	compassign	___606_weight $const2 $const5 	%line{75} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:77
# 		else if (Nob[1] > limit * (Nob[0] + Nob[1]) && Nob[1] > limit * (Nob[1] + Nob[2])) {
	compref		$tmp57 ___606_Nob $const3 	%line{77} %argrw{"wrr"}
	compref		$tmp58 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp59 ___606_Nob $const3 	%argrw{"wrr"}
	add		$tmp60 $tmp58 $tmp59 	%argrw{"wrr"}
	mul		$tmp61 ___606_limit $tmp60 	%argrw{"wrr"}
	gt		$tmp62 $tmp57 $tmp61 	%argrw{"wrr"}
	neq		$tmp63 $tmp62 $const2 	%argrw{"wrr"}
	if		$tmp63 115 115 	%argrw{"r"}
	compref		$tmp64 ___606_Nob $const3 	%argrw{"wrr"}
	compref		$tmp65 ___606_Nob $const3 	%argrw{"wrr"}
	compref		$tmp66 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp67 $tmp65 $tmp66 	%argrw{"wrr"}
	mul		$tmp68 ___606_limit $tmp67 	%argrw{"wrr"}
	gt		$tmp69 $tmp64 $tmp68 	%argrw{"wrr"}
	neq		$tmp70 $tmp69 $const2 	%argrw{"wrr"}
	assign		$tmp63 $tmp70 	%argrw{"wr"}
	if		$tmp63 117 242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:78
# 			weight[1] = 1.0;
	compassign	___606_weight $const3 $const5 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:80
# 		else if (Nob[2] > limit * (Nob[0] + Nob[2]) && Nob[2] > limit * (Nob[1] + Nob[2])) {
	compref		$tmp71 ___606_Nob $const17 	%line{80} %argrw{"wrr"}
	compref		$tmp72 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp73 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp74 $tmp72 $tmp73 	%argrw{"wrr"}
	mul		$tmp75 ___606_limit $tmp74 	%argrw{"wrr"}
	gt		$tmp76 $tmp71 $tmp75 	%argrw{"wrr"}
	neq		$tmp77 $tmp76 $const2 	%argrw{"wrr"}
	if		$tmp77 133 133 	%argrw{"r"}
	compref		$tmp78 ___606_Nob $const17 	%argrw{"wrr"}
	compref		$tmp79 ___606_Nob $const3 	%argrw{"wrr"}
	compref		$tmp80 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp81 $tmp79 $tmp80 	%argrw{"wrr"}
	mul		$tmp82 ___606_limit $tmp81 	%argrw{"wrr"}
	gt		$tmp83 $tmp78 $tmp82 	%argrw{"wrr"}
	neq		$tmp84 $tmp83 $const2 	%argrw{"wrr"}
	assign		$tmp77 $tmp84 	%argrw{"wr"}
	if		$tmp77 135 242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:81
# 			weight[2] = 1.0;
	compassign	___606_weight $const17 $const5 	%line{81} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:83
# 		else if (blend > 0.0) {
	gt		$tmp85 ___606_blend $const12 	%line{83} %argrw{"wrr"}
	if		$tmp85 242 242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:85
# 			if (Nob[2] < (1.0 - limit) * (Nob[1] + Nob[0])) {
	compref		$tmp86 ___606_Nob $const17 	%line{85} %argrw{"wrr"}
	sub		$tmp87 $const5 ___606_limit 	%argrw{"wrr"}
	compref		$tmp88 ___606_Nob $const3 	%argrw{"wrr"}
	compref		$tmp89 ___606_Nob $const2 	%argrw{"wrr"}
	add		$tmp90 $tmp88 $tmp89 	%argrw{"wrr"}
	mul		$tmp91 $tmp87 $tmp90 	%argrw{"wrr"}
	lt		$tmp92 $tmp86 $tmp91 	%argrw{"wrr"}
	if		$tmp92 163 242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:86
# 				weight[0] = Nob[0] / (Nob[0] + Nob[1]);
	compref		$tmp93 ___606_Nob $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp94 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp95 ___606_Nob $const3 	%argrw{"wrr"}
	add		$tmp96 $tmp94 $tmp95 	%argrw{"wrr"}
	div		$tmp97 $tmp93 $tmp96 	%argrw{"wrr"}
	compassign	___606_weight $const2 $tmp97 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:87
# 				weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compref		$tmp99 ___606_weight $const2 	%line{87} %argrw{"wrr"}
	sub		$tmp100 $const5 ___606_blend 	%argrw{"wrr"}
	mul		$tmp101 $const22 $tmp100 	%argrw{"wrr"}
	sub		$tmp102 $tmp99 $tmp101 	%argrw{"wrr"}
	div		$tmp103 $tmp102 ___606_blend 	%argrw{"wrr"}
	functioncall	$const23 159 	%argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# 
	min		$tmp104 $tmp103 $const5 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		$tmp98 $tmp104 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:87
# 				weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compassign	___606_weight $const2 $tmp98 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{87} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:88
# 				weight[1] = 1.0 - weight[0];
	compref		$tmp105 ___606_weight $const2 	%line{88} %argrw{"wrr"}
	sub		$tmp106 $const5 $tmp105 	%argrw{"wrr"}
	compassign	___606_weight $const3 $tmp106 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:90
# 			else if (Nob[0] < (1.0 - limit) * (Nob[1] + Nob[2])) {
	compref		$tmp107 ___606_Nob $const2 	%line{90} %argrw{"wrr"}
	sub		$tmp108 $const5 ___606_limit 	%argrw{"wrr"}
	compref		$tmp109 ___606_Nob $const3 	%argrw{"wrr"}
	compref		$tmp110 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp111 $tmp109 $tmp110 	%argrw{"wrr"}
	mul		$tmp112 $tmp108 $tmp111 	%argrw{"wrr"}
	lt		$tmp113 $tmp107 $tmp112 	%argrw{"wrr"}
	if		$tmp113 189 242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:91
# 				weight[1] = Nob[1] / (Nob[1] + Nob[2]);
	compref		$tmp114 ___606_Nob $const3 	%line{91} %argrw{"wrr"}
	compref		$tmp115 ___606_Nob $const3 	%argrw{"wrr"}
	compref		$tmp116 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp117 $tmp115 $tmp116 	%argrw{"wrr"}
	div		$tmp118 $tmp114 $tmp117 	%argrw{"wrr"}
	compassign	___606_weight $const3 $tmp118 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:92
# 				weight[1] = clamp((weight[1] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compref		$tmp120 ___606_weight $const3 	%line{92} %argrw{"wrr"}
	sub		$tmp121 $const5 ___606_blend 	%argrw{"wrr"}
	mul		$tmp122 $const22 $tmp121 	%argrw{"wrr"}
	sub		$tmp123 $tmp120 $tmp122 	%argrw{"wrr"}
	div		$tmp124 $tmp123 ___606_blend 	%argrw{"wrr"}
	functioncall	$const23 185 	%argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# 
	min		$tmp125 $tmp124 $const5 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		$tmp119 $tmp125 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:92
# 				weight[1] = clamp((weight[1] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compassign	___606_weight $const3 $tmp119 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:93
# 				weight[2] = 1.0 - weight[1];
	compref		$tmp126 ___606_weight $const3 	%line{93} %argrw{"wrr"}
	sub		$tmp127 $const5 $tmp126 	%argrw{"wrr"}
	compassign	___606_weight $const17 $tmp127 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:95
# 			else if (Nob[1] < (1.0 - limit) * (Nob[0] + Nob[2])) {
	compref		$tmp128 ___606_Nob $const3 	%line{95} %argrw{"wrr"}
	sub		$tmp129 $const5 ___606_limit 	%argrw{"wrr"}
	compref		$tmp130 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp131 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp132 $tmp130 $tmp131 	%argrw{"wrr"}
	mul		$tmp133 $tmp129 $tmp132 	%argrw{"wrr"}
	lt		$tmp134 $tmp128 $tmp133 	%argrw{"wrr"}
	if		$tmp134 215 242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:96
# 				weight[0] = Nob[0] / (Nob[0] + Nob[2]);
	compref		$tmp135 ___606_Nob $const2 	%line{96} %argrw{"wrr"}
	compref		$tmp136 ___606_Nob $const2 	%argrw{"wrr"}
	compref		$tmp137 ___606_Nob $const17 	%argrw{"wrr"}
	add		$tmp138 $tmp136 $tmp137 	%argrw{"wrr"}
	div		$tmp139 $tmp135 $tmp138 	%argrw{"wrr"}
	compassign	___606_weight $const2 $tmp139 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:97
# 				weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compref		$tmp141 ___606_weight $const2 	%line{97} %argrw{"wrr"}
	sub		$tmp142 $const5 ___606_blend 	%argrw{"wrr"}
	mul		$tmp143 $const22 $tmp142 	%argrw{"wrr"}
	sub		$tmp144 $tmp141 $tmp143 	%argrw{"wrr"}
	div		$tmp145 $tmp144 ___606_blend 	%argrw{"wrr"}
	functioncall	$const23 211 	%argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# #define M_LOG10E   0.4342944819032518        /* log_10(e) */
	min		$tmp146 $tmp145 $const5 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		$tmp140 $tmp146 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:97
# 				weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compassign	___606_weight $const2 $tmp140 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{97} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:98
# 				weight[2] = 1.0 - weight[0];
	compref		$tmp147 ___606_weight $const2 	%line{98} %argrw{"wrr"}
	sub		$tmp148 $const5 $tmp147 	%argrw{"wrr"}
	compassign	___606_weight $const17 $tmp148 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:102
# 				weight[0] = ((2.0 - limit) * Nob[0] + (limit - 1.0)) / (2.0 * limit - 1.0);
	sub		$tmp149 $const24 ___606_limit 	%line{102} %argrw{"wrr"}
	compref		$tmp150 ___606_Nob $const2 	%argrw{"wrr"}
	mul		$tmp151 $tmp149 $tmp150 	%argrw{"wrr"}
	sub		$tmp152 ___606_limit $const5 	%argrw{"wrr"}
	add		$tmp153 $tmp151 $tmp152 	%argrw{"wrr"}
	mul		$tmp154 $const24 ___606_limit 	%argrw{"wrr"}
	sub		$tmp155 $tmp154 $const5 	%argrw{"wrr"}
	div		$tmp156 $tmp153 $tmp155 	%argrw{"wrr"}
	compassign	___606_weight $const2 $tmp156 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:103
# 				weight[1] = ((2.0 - limit) * Nob[1] + (limit - 1.0)) / (2.0 * limit - 1.0);
	sub		$tmp157 $const24 ___606_limit 	%line{103} %argrw{"wrr"}
	compref		$tmp158 ___606_Nob $const3 	%argrw{"wrr"}
	mul		$tmp159 $tmp157 $tmp158 	%argrw{"wrr"}
	sub		$tmp160 ___606_limit $const5 	%argrw{"wrr"}
	add		$tmp161 $tmp159 $tmp160 	%argrw{"wrr"}
	mul		$tmp162 $const24 ___606_limit 	%argrw{"wrr"}
	sub		$tmp163 $tmp162 $const5 	%argrw{"wrr"}
	div		$tmp164 $tmp161 $tmp163 	%argrw{"wrr"}
	compassign	___606_weight $const3 $tmp164 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:104
# 				weight[2] = ((2.0 - limit) * Nob[2] + (limit - 1.0)) / (2.0 * limit - 1.0);
	sub		$tmp165 $const24 ___606_limit 	%line{104} %argrw{"wrr"}
	compref		$tmp166 ___606_Nob $const17 	%argrw{"wrr"}
	mul		$tmp167 $tmp165 $tmp166 	%argrw{"wrr"}
	sub		$tmp168 ___606_limit $const5 	%argrw{"wrr"}
	add		$tmp169 $tmp167 $tmp168 	%argrw{"wrr"}
	mul		$tmp170 $const24 ___606_limit 	%argrw{"wrr"}
	sub		$tmp171 $tmp170 $const5 	%argrw{"wrr"}
	div		$tmp172 $tmp169 $tmp171 	%argrw{"wrr"}
	compassign	___606_weight $const17 $tmp172 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:108
# 		Color = color(0.0, 0.0, 0.0);
	assign		Color $const25 	%line{108} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:109
# 		Alpha = 0.0;
	assign		Alpha $const12 	%line{109} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:113
# 		if (weight[0] > 0.0) {
	compref		$tmp173 ___606_weight $const2 	%line{113} %argrw{"wrr"}
	gt		$tmp174 $tmp173 $const12 	%argrw{"wrr"}
	if		$tmp174 308 308 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:114
# 			Color += weight[0] * image_texture_lookup(filename, color_space, p[1], p[2], tmp_alpha);
	compref		$tmp175 ___606_weight $const2 	%line{114} %argrw{"wrr"}
	compref		$tmp177 p $const3 	%argrw{"wrr"}
	compref		$tmp178 p $const17 	%argrw{"wrr"}
	functioncall	$const4 303 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:24
# 	color rgb = (color)texture(filename, u, 1.0 - v, "wrap", "periodic", "alpha", Alpha);
	sub		$tmp179 $const5 $tmp178 	%line{24} %argrw{"wrr"}
	texture		___604_rgb filename $tmp177 $tmp179 $const6 $const7 $const8 ___606_tmp_alpha 	%argrw{"wrrrrrrw"} %argderivs{2,3}
# intern/cycles/kernel/shaders/node_image_texture.osl:26
# 	if (color_space == "sRGB")
	eq		$tmp180 color_space $const9 	%line{26} %argrw{"wrr"}
	if		$tmp180 302 302 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:27
# 		rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const10 302 	%line{27} %argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:38
#  *
	compref		$tmp182 ___604_rgb $const2 	%filename{"intern/cycles/kernel/shaders/node_color.h"} %line{38} %argrw{"wrr"}
	functioncall	$const10 271 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp183 $tmp182 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp183 266 271 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp184 $tmp182 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp184 263 265 	%argrw{"r"}
	assign		$tmp181 $const12 	%argrw{"wr"}
	div		$tmp185 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp181 $tmp182 $tmp185 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp186 $tmp182 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp187 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp188 $tmp186 $tmp187 	%argrw{"wrr"}
	pow		$tmp181 $tmp188 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:39
# 		color_srgb_to_scene_linear(c[1]),
	compref		$tmp190 ___604_rgb $const3 	%line{39} %argrw{"wrr"}
	functioncall	$const10 286 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp191 $tmp190 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp191 281 286 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp192 $tmp190 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp192 278 280 	%argrw{"r"}
	assign		$tmp189 $const12 	%argrw{"wr"}
	div		$tmp193 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp189 $tmp190 $tmp193 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp194 $tmp190 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp195 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp196 $tmp194 $tmp195 	%argrw{"wrr"}
	pow		$tmp189 $tmp196 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	compref		$tmp198 ___604_rgb $const17 	%line{40} %argrw{"wrr"}
	functioncall	$const10 301 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp199 $tmp198 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp199 296 301 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp200 $tmp198 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp200 293 295 	%argrw{"r"}
	assign		$tmp197 $const12 	%argrw{"wr"}
	div		$tmp201 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp197 $tmp198 $tmp201 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp202 $tmp198 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp203 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp204 $tmp202 $tmp203 	%argrw{"wrr"}
	pow		$tmp197 $tmp204 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	color		___604_rgb $tmp181 $tmp189 $tmp197 	%line{40} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:29
# 	return rgb;
	assign		$tmp176 ___604_rgb 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{29} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:114
# 			Color += weight[0] * image_texture_lookup(filename, color_space, p[1], p[2], tmp_alpha);
	mul		$tmp205 $tmp175 $tmp176 	%line{114} %argrw{"wrr"}
	add		Color Color $tmp205 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:115
# 			Alpha += weight[0] * tmp_alpha;
	compref		$tmp206 ___606_weight $const2 	%line{115} %argrw{"wrr"}
	mul		$tmp207 $tmp206 ___606_tmp_alpha 	%argrw{"wrr"}
	add		Alpha Alpha $tmp207 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:117
# 		if (weight[1] > 0.0) {
	compref		$tmp208 ___606_weight $const3 	%line{117} %argrw{"wrr"}
	gt		$tmp209 $tmp208 $const12 	%argrw{"wrr"}
	if		$tmp209 372 372 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:118
# 			Color += weight[1] * image_texture_lookup(filename, color_space, p[0], p[2], tmp_alpha);
	compref		$tmp210 ___606_weight $const3 	%line{118} %argrw{"wrr"}
	compref		$tmp212 p $const2 	%argrw{"wrr"}
	compref		$tmp213 p $const17 	%argrw{"wrr"}
	functioncall	$const4 367 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:24
# 	color rgb = (color)texture(filename, u, 1.0 - v, "wrap", "periodic", "alpha", Alpha);
	sub		$tmp214 $const5 $tmp213 	%line{24} %argrw{"wrr"}
	texture		___604_rgb filename $tmp212 $tmp214 $const6 $const7 $const8 ___606_tmp_alpha 	%argrw{"wrrrrrrw"} %argderivs{2,3}
# intern/cycles/kernel/shaders/node_image_texture.osl:26
# 	if (color_space == "sRGB")
	eq		$tmp215 color_space $const9 	%line{26} %argrw{"wrr"}
	if		$tmp215 366 366 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:27
# 		rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const10 366 	%line{27} %argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:38
#  *
	compref		$tmp217 ___604_rgb $const2 	%filename{"intern/cycles/kernel/shaders/node_color.h"} %line{38} %argrw{"wrr"}
	functioncall	$const10 335 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp218 $tmp217 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp218 330 335 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp219 $tmp217 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp219 327 329 	%argrw{"r"}
	assign		$tmp216 $const12 	%argrw{"wr"}
	div		$tmp220 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp216 $tmp217 $tmp220 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp221 $tmp217 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp222 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp223 $tmp221 $tmp222 	%argrw{"wrr"}
	pow		$tmp216 $tmp223 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:39
# 		color_srgb_to_scene_linear(c[1]),
	compref		$tmp225 ___604_rgb $const3 	%line{39} %argrw{"wrr"}
	functioncall	$const10 350 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp226 $tmp225 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp226 345 350 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp227 $tmp225 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp227 342 344 	%argrw{"r"}
	assign		$tmp224 $const12 	%argrw{"wr"}
	div		$tmp228 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp224 $tmp225 $tmp228 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp229 $tmp225 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp230 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp231 $tmp229 $tmp230 	%argrw{"wrr"}
	pow		$tmp224 $tmp231 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	compref		$tmp233 ___604_rgb $const17 	%line{40} %argrw{"wrr"}
	functioncall	$const10 365 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp234 $tmp233 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp234 360 365 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp235 $tmp233 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp235 357 359 	%argrw{"r"}
	assign		$tmp232 $const12 	%argrw{"wr"}
	div		$tmp236 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp232 $tmp233 $tmp236 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp237 $tmp233 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp238 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp239 $tmp237 $tmp238 	%argrw{"wrr"}
	pow		$tmp232 $tmp239 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	color		___604_rgb $tmp216 $tmp224 $tmp232 	%line{40} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:29
# 	return rgb;
	assign		$tmp211 ___604_rgb 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{29} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:118
# 			Color += weight[1] * image_texture_lookup(filename, color_space, p[0], p[2], tmp_alpha);
	mul		$tmp240 $tmp210 $tmp211 	%line{118} %argrw{"wrr"}
	add		Color Color $tmp240 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:119
# 			Alpha += weight[1] * tmp_alpha;
	compref		$tmp241 ___606_weight $const3 	%line{119} %argrw{"wrr"}
	mul		$tmp242 $tmp241 ___606_tmp_alpha 	%argrw{"wrr"}
	add		Alpha Alpha $tmp242 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:121
# 		if (weight[2] > 0.0) {
	compref		$tmp243 ___606_weight $const17 	%line{121} %argrw{"wrr"}
	gt		$tmp244 $tmp243 $const12 	%argrw{"wrr"}
	if		$tmp244 436 436 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:122
# 			Color += weight[2] * image_texture_lookup(filename, color_space, p[1], p[0], tmp_alpha);
	compref		$tmp245 ___606_weight $const17 	%line{122} %argrw{"wrr"}
	compref		$tmp247 p $const3 	%argrw{"wrr"}
	compref		$tmp248 p $const2 	%argrw{"wrr"}
	functioncall	$const4 431 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:24
# 	color rgb = (color)texture(filename, u, 1.0 - v, "wrap", "periodic", "alpha", Alpha);
	sub		$tmp249 $const5 $tmp248 	%line{24} %argrw{"wrr"}
	texture		___604_rgb filename $tmp247 $tmp249 $const6 $const7 $const8 ___606_tmp_alpha 	%argrw{"wrrrrrrw"} %argderivs{2,3}
# intern/cycles/kernel/shaders/node_image_texture.osl:26
# 	if (color_space == "sRGB")
	eq		$tmp250 color_space $const9 	%line{26} %argrw{"wrr"}
	if		$tmp250 430 430 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_image_texture.osl:27
# 		rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const10 430 	%line{27} %argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:38
#  *
	compref		$tmp252 ___604_rgb $const2 	%filename{"intern/cycles/kernel/shaders/node_color.h"} %line{38} %argrw{"wrr"}
	functioncall	$const10 399 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp253 $tmp252 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp253 394 399 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp254 $tmp252 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp254 391 393 	%argrw{"r"}
	assign		$tmp251 $const12 	%argrw{"wr"}
	div		$tmp255 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp251 $tmp252 $tmp255 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp256 $tmp252 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp257 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp258 $tmp256 $tmp257 	%argrw{"wrr"}
	pow		$tmp251 $tmp258 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:39
# 		color_srgb_to_scene_linear(c[1]),
	compref		$tmp260 ___604_rgb $const3 	%line{39} %argrw{"wrr"}
	functioncall	$const10 414 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp261 $tmp260 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp261 409 414 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp262 $tmp260 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp262 406 408 	%argrw{"r"}
	assign		$tmp259 $const12 	%argrw{"wr"}
	div		$tmp263 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp259 $tmp260 $tmp263 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp264 $tmp260 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp265 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp266 $tmp264 $tmp265 	%argrw{"wrr"}
	pow		$tmp259 $tmp266 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	compref		$tmp268 ___604_rgb $const17 	%line{40} %argrw{"wrr"}
	functioncall	$const10 429 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp269 $tmp268 $const11 	%line{21} %argrw{"wrr"}
	if		$tmp269 424 429 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp270 $tmp268 $const12 	%line{22} %argrw{"wrr"}
	if		$tmp270 421 423 	%argrw{"r"}
	assign		$tmp267 $const12 	%argrw{"wr"}
	div		$tmp271 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp267 $tmp268 $tmp271 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp272 $tmp268 $const14 	%line{24} %argrw{"wrr"}
	div		$tmp273 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp274 $tmp272 $tmp273 	%argrw{"wrr"}
	pow		$tmp267 $tmp274 $const16 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	color		___604_rgb $tmp251 $tmp259 $tmp267 	%line{40} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:29
# 	return rgb;
	assign		$tmp246 ___604_rgb 	%filename{"intern/cycles/kernel/shaders/node_image_texture.osl"} %line{29} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:122
# 			Color += weight[2] * image_texture_lookup(filename, color_space, p[1], p[0], tmp_alpha);
	mul		$tmp275 $tmp245 $tmp246 	%line{122} %argrw{"wrr"}
	add		Color Color $tmp275 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_image_texture.osl:123
# 			Alpha += weight[2] * tmp_alpha;
	compref		$tmp276 ___606_weight $const17 	%line{123} %argrw{"wrr"}
	mul		$tmp277 $tmp276 ___606_tmp_alpha 	%argrw{"wrr"}
	add		Alpha Alpha $tmp277 	%argrw{"wrr"}
	end
