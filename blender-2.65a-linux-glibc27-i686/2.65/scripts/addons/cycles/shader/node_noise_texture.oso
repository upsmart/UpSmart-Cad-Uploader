OpenShadingLanguage 1.00
# Compiled by oslc 1.3.0
shader node_noise_texture
param	int	use_mapping	0 		 %read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		 %read{3,3} %write{2147483647,-1}
param	float	Distortion	0 		 %read{8,3190} %write{2147483647,-1}
param	float	Scale	5 		 %read{5,5} %write{2147483647,-1}
param	float	Detail	2 		 %read{3198,7568} %write{2147483647,-1}
param	point	Vector	0 0 0 		 %read{1,1} %write{0,0}
oparam	float	Fac	0 		 %read{9744,9745} %write{5362,9745}
oparam	color	Color	0.2 0.2 0.2 		 %read{2147483647,-1} %write{9744,9744}
global	point	P	 %read{0,0} %write{2147483647,-1}
local	float	___592_result	 %read{35,9690} %write{35,9690}
local	float	___593_r	 %read{35,9690} %write{35,9690}
local	float	___593_g	 %read{35,9690} %write{35,9690}
local	float	___593_b	 %read{35,9690} %write{35,9690}
local	int	___594_xx	 %read{35,9690} %write{35,9690}
local	int	___594_yy	 %read{35,9690} %write{35,9690}
local	int	___594_zz	 %read{35,9690} %write{35,9690}
local	int	___594_xi	 %read{35,9542} %write{24,9529}
local	int	___594_yi	 %read{35,9546} %write{27,9532}
local	int	___594_zi	 %read{35,9550} %write{30,9535}
local	point	___600_ip	 %read{35,9690} %write{35,9690}
local	point	___600_vp	 %read{35,9690} %write{35,9690}
local	point	___600_pd	 %read{35,9690} %write{35,9690}
local	float	___600_d	 %read{35,9690} %write{35,9690}
local	float[4]	___605_da	 %read{35,9342} %write{31,9341}
local	point[4]	___605_pa	 %read{35,9341} %write{35,9341}
local	float[4]	___606_da	 %read{727,9692} %write{723,9690}
local	point[4]	___606_pa	 %read{727,9690} %write{727,9690}
local	float	___612_t	 %read{1058,9698} %write{1057,9694}
local	float	___619_result	 %read{35,9705} %write{12,9704}
local	float	___625_fscale	 %read{3201,8647} %write{3194,8642}
local	float	___625_amp	 %read{3201,9710} %write{3195,8642}
local	float	___625_sum	 %read{3201,9742} %write{3196,9741}
local	int	___625_i	 %read{3201,8642} %write{3201,8642}
local	int	___625_n	 %read{3201,9736} %write{3200,7570}
local	float	___625_octaves	 %read{3200,8644} %write{3199,7569}
local	float	___627_t	 %read{3201,8642} %write{3201,8642}
local	float	___625_rmd	 %read{4275,9731} %write{4274,8644}
local	float	___628_t	 %read{5337,9710} %write{5335,9709}
local	float	___628_sum2	 %read{5358,9731} %write{5341,9728}
local	point	___631_r	 %read{1095,3192} %write{1070,3191}
local	int	___631_hard	 %read{4263,9706} %write{7,7}
local	point	p	 %read{3,5} %write{1,3}
local	string	Basis	 %read{13,9702} %write{4,4}
const	string	$const1	"Perlin"		 %read{4,8650} %write{2147483647,-1}
temp	point	$tmp1	 %read{10,7561} %write{5,7505}
const	string	$const2	"noise"		 %read{6,6} %write{2147483647,-1}
const	int	$const3	0		 %read{7,9692} %write{2147483647,-1}
const	float	$const4	0		 %read{8,9633} %write{2147483647,-1}
temp	int	$tmp2	 %read{9,9} %write{8,8}
temp	float	$tmp3	 %read{1069,1069} %write{1068,1068}
const	point	$const5	13.5 13.5 13.5		 %read{10,2131} %write{2147483647,-1}
temp	point	$tmp5	 %read{15,1067} %write{10,1053}
const	string	$const6	"noise_basis"		 %read{11,8648} %write{2147483647,-1}
temp	int	$tmp6	 %read{14,14} %write{13,13}
const	string	$const7	"Voronoi F1"		 %read{16,8653} %write{2147483647,-1}
temp	int	$tmp7	 %read{17,17} %write{16,16}
const	string	$const8	"voronoi_F1S"		 %read{18,8655} %write{2147483647,-1}
const	float	$const9	2		 %read{187,9707} %write{2147483647,-1}
temp	float	$tmp8	 %read{187,187} %write{186,186}
const	string	$const10	"voronoi_F1"		 %read{19,8656} %write{2147483647,-1}
const	string	$const11	"voronoi_Fn"		 %read{20,9176} %write{2147483647,-1}
const	string	$const12	"Distance Squared"		 %read{69,9620} %write{2147483647,-1}
const	string	$const13	"voronoi"		 %read{21,9526} %write{2147483647,-1}
temp	float	$tmp9	 %read{24,24} %write{23,23}
temp	float	$tmp10	 %read{23,23} %write{22,22}
temp	float	$tmp11	 %read{27,27} %write{26,26}
const	int	$const14	1		 %read{25,9738} %write{2147483647,-1}
temp	float	$tmp12	 %read{26,26} %write{25,25}
temp	float	$tmp13	 %read{30,30} %write{29,29}
const	int	$const15	2		 %read{28,9723} %write{2147483647,-1}
temp	float	$tmp14	 %read{29,29} %write{28,28}
const	float	$const16	1e+10		 %read{31,9539} %write{2147483647,-1}
const	int	$const17	3		 %read{34,9684} %write{2147483647,-1}
temp	int	$tmp15	 %read{38,38} %write{37,37}
temp	int	$tmp16	 %read{35,185} %write{35,185}
temp	int	$tmp17	 %read{42,42} %write{41,41}
temp	int	$tmp18	 %read{39,183} %write{39,183}
temp	int	$tmp19	 %read{46,46} %write{45,45}
temp	int	$tmp20	 %read{43,181} %write{43,181}
temp	float	$tmp21	 %read{50,50} %write{47,47}
temp	float	$tmp22	 %read{50,50} %write{48,48}
temp	float	$tmp23	 %read{50,50} %write{49,49}
temp	color	$tmp24	 %read{64,64} %write{63,63}
const	string	$const18	"cellnoise_color"		 %read{51,9556} %write{2147483647,-1}
temp	point	$tmp25	 %read{57,57} %write{56,56}
temp	float	$tmp26	 %read{56,56} %write{53,53}
temp	float	$tmp27	 %read{56,56} %write{54,54}
temp	float	$tmp28	 %read{56,56} %write{55,55}
temp	point	$tmp29	 %read{62,62} %write{61,61}
temp	float	$tmp30	 %read{61,61} %write{58,58}
temp	float	$tmp31	 %read{61,61} %write{59,59}
temp	float	$tmp32	 %read{61,61} %write{60,60}
temp	point	$tmp33	 %read{66,66} %write{65,65}
const	string	$const19	"voronoi_distance"		 %read{67,9572} %write{2147483647,-1}
temp	int	$tmp34	 %read{70,70} %write{69,69}
const	string	$const20	"Actual Distance"		 %read{72,9577} %write{2147483647,-1}
temp	int	$tmp35	 %read{73,73} %write{72,72}
const	string	$const21	"Manhattan"		 %read{75,9580} %write{2147483647,-1}
temp	int	$tmp36	 %read{76,76} %write{75,75}
temp	float	$tmp37	 %read{81,81} %write{78,78}
temp	float	$tmp38	 %read{78,78} %write{77,77}
temp	float	$tmp39	 %read{81,81} %write{80,80}
temp	float	$tmp40	 %read{80,80} %write{79,79}
temp	float	$tmp41	 %read{84,84} %write{81,81}
temp	float	$tmp42	 %read{84,84} %write{83,83}
temp	float	$tmp43	 %read{83,83} %write{82,82}
const	string	$const22	"Chebychev"		 %read{85,9590} %write{2147483647,-1}
temp	int	$tmp44	 %read{86,86} %write{85,85}
temp	float	$tmp45	 %read{94,94} %write{88,88}
temp	float	$tmp46	 %read{88,88} %write{87,87}
temp	float	$tmp47	 %read{94,94} %write{93,93}
temp	float	$tmp48	 %read{93,93} %write{90,90}
temp	float	$tmp49	 %read{90,90} %write{89,89}
temp	float	$tmp50	 %read{93,93} %write{92,92}
temp	float	$tmp51	 %read{92,92} %write{91,91}
const	string	$const23	"Minkovsky 1/2"		 %read{95,9600} %write{2147483647,-1}
temp	int	$tmp52	 %read{96,96} %write{95,95}
temp	float	$tmp53	 %read{103,103} %write{99,99}
temp	float	$tmp54	 %read{99,99} %write{98,98}
temp	float	$tmp55	 %read{98,98} %write{97,97}
temp	float	$tmp56	 %read{103,103} %write{102,102}
temp	float	$tmp57	 %read{102,102} %write{101,101}
temp	float	$tmp58	 %read{101,101} %write{100,100}
temp	float	$tmp59	 %read{107,107} %write{103,103}
temp	float	$tmp60	 %read{107,107} %write{106,106}
temp	float	$tmp61	 %read{106,106} %write{105,105}
temp	float	$tmp62	 %read{105,105} %write{104,104}
const	string	$const24	"Minkovsky 4"		 %read{108,9613} %write{2147483647,-1}
temp	int	$tmp63	 %read{109,109} %write{108,108}
temp	float	$tmp64	 %read{114,114} %write{113,113}
temp	float	$tmp65	 %read{113,113} %write{112,112}
temp	vector	$tmp66	 %read{112,112} %write{110,110}
temp	vector	$tmp67	 %read{112,112} %write{111,111}
const	string	$const25	"Minkovsky"		 %read{115,9620} %write{2147483647,-1}
temp	int	$tmp68	 %read{116,116} %write{115,115}
temp	float	$tmp69	 %read{123,123} %write{119,119}
temp	float	$tmp70	 %read{119,119} %write{118,118}
temp	float	$tmp71	 %read{118,118} %write{117,117}
temp	float	$tmp72	 %read{123,123} %write{122,122}
temp	float	$tmp73	 %read{122,122} %write{121,121}
temp	float	$tmp74	 %read{121,121} %write{120,120}
temp	float	$tmp75	 %read{127,127} %write{123,123}
temp	float	$tmp76	 %read{127,127} %write{126,126}
temp	float	$tmp77	 %read{126,126} %write{125,125}
temp	float	$tmp78	 %read{125,125} %write{124,124}
temp	float	$tmp79	 %read{129,129} %write{127,127}
const	float	$const26	1		 %read{128,9729} %write{2147483647,-1}
temp	float	$tmp80	 %read{129,129} %write{128,128}
temp	point	$tmp81	 %read{135,135} %write{134,134}
temp	float	$tmp82	 %read{134,134} %write{131,131}
temp	float	$tmp83	 %read{134,134} %write{132,132}
temp	float	$tmp84	 %read{134,134} %write{133,133}
temp	float	$tmp85	 %read{137,137} %write{136,136}
temp	int	$tmp86	 %read{138,138} %write{137,137}
temp	float	$tmp87	 %read{140,140} %write{139,139}
temp	float	$tmp88	 %read{142,142} %write{141,141}
temp	float	$tmp89	 %read{144,144} %write{143,143}
temp	point	$tmp90	 %read{147,147} %write{146,146}
temp	point	$tmp91	 %read{149,149} %write{148,148}
temp	point	$tmp92	 %read{151,151} %write{150,150}
temp	float	$tmp93	 %read{154,154} %write{153,153}
temp	int	$tmp94	 %read{155,155} %write{154,154}
temp	float	$tmp95	 %read{157,157} %write{156,156}
temp	float	$tmp96	 %read{159,159} %write{158,158}
temp	point	$tmp97	 %read{162,162} %write{161,161}
temp	point	$tmp98	 %read{164,164} %write{163,163}
temp	float	$tmp99	 %read{167,167} %write{166,166}
temp	int	$tmp100	 %read{168,168} %write{167,167}
temp	float	$tmp101	 %read{170,170} %write{169,169}
temp	point	$tmp102	 %read{173,173} %write{172,172}
temp	float	$tmp103	 %read{176,176} %write{175,175}
temp	int	$tmp104	 %read{177,177} %write{176,176}
temp	int	$tmp105	 %read{2147483647,-1} %write{180,180}
temp	int	$tmp106	 %read{2147483647,-1} %write{182,182}
temp	int	$tmp107	 %read{2147483647,-1} %write{184,184}
temp	float	$tmp108	 %read{188,188} %write{187,187}
const	string	$const27	"Voronoi F2"		 %read{189,8826} %write{2147483647,-1}
temp	int	$tmp109	 %read{190,190} %write{189,189}
const	string	$const28	"voronoi_F2S"		 %read{191,8828} %write{2147483647,-1}
temp	float	$tmp110	 %read{360,360} %write{359,359}
const	string	$const29	"voronoi_F2"		 %read{192,8829} %write{2147483647,-1}
temp	float	$tmp111	 %read{197,197} %write{196,196}
temp	float	$tmp112	 %read{196,196} %write{195,195}
temp	float	$tmp113	 %read{200,200} %write{199,199}
temp	float	$tmp114	 %read{199,199} %write{198,198}
temp	float	$tmp115	 %read{203,203} %write{202,202}
temp	float	$tmp116	 %read{202,202} %write{201,201}
temp	int	$tmp117	 %read{211,211} %write{210,210}
temp	int	$tmp118	 %read{208,358} %write{208,358}
temp	int	$tmp119	 %read{215,215} %write{214,214}
temp	int	$tmp120	 %read{212,356} %write{212,356}
temp	int	$tmp121	 %read{219,219} %write{218,218}
temp	int	$tmp122	 %read{216,354} %write{216,354}
temp	float	$tmp123	 %read{223,223} %write{220,220}
temp	float	$tmp124	 %read{223,223} %write{221,221}
temp	float	$tmp125	 %read{223,223} %write{222,222}
temp	color	$tmp126	 %read{237,237} %write{236,236}
temp	point	$tmp127	 %read{230,230} %write{229,229}
temp	float	$tmp128	 %read{229,229} %write{226,226}
temp	float	$tmp129	 %read{229,229} %write{227,227}
temp	float	$tmp130	 %read{229,229} %write{228,228}
temp	point	$tmp131	 %read{235,235} %write{234,234}
temp	float	$tmp132	 %read{234,234} %write{231,231}
temp	float	$tmp133	 %read{234,234} %write{232,232}
temp	float	$tmp134	 %read{234,234} %write{233,233}
temp	point	$tmp135	 %read{239,239} %write{238,238}
temp	int	$tmp136	 %read{243,243} %write{242,242}
temp	int	$tmp137	 %read{246,246} %write{245,245}
temp	int	$tmp138	 %read{249,249} %write{248,248}
temp	float	$tmp139	 %read{254,254} %write{251,251}
temp	float	$tmp140	 %read{251,251} %write{250,250}
temp	float	$tmp141	 %read{254,254} %write{253,253}
temp	float	$tmp142	 %read{253,253} %write{252,252}
temp	float	$tmp143	 %read{257,257} %write{254,254}
temp	float	$tmp144	 %read{257,257} %write{256,256}
temp	float	$tmp145	 %read{256,256} %write{255,255}
temp	int	$tmp146	 %read{259,259} %write{258,258}
temp	float	$tmp147	 %read{267,267} %write{261,261}
temp	float	$tmp148	 %read{261,261} %write{260,260}
temp	float	$tmp149	 %read{267,267} %write{266,266}
temp	float	$tmp150	 %read{266,266} %write{263,263}
temp	float	$tmp151	 %read{263,263} %write{262,262}
temp	float	$tmp152	 %read{266,266} %write{265,265}
temp	float	$tmp153	 %read{265,265} %write{264,264}
temp	int	$tmp154	 %read{269,269} %write{268,268}
temp	float	$tmp155	 %read{276,276} %write{272,272}
temp	float	$tmp156	 %read{272,272} %write{271,271}
temp	float	$tmp157	 %read{271,271} %write{270,270}
temp	float	$tmp158	 %read{276,276} %write{275,275}
temp	float	$tmp159	 %read{275,275} %write{274,274}
temp	float	$tmp160	 %read{274,274} %write{273,273}
temp	float	$tmp161	 %read{280,280} %write{276,276}
temp	float	$tmp162	 %read{280,280} %write{279,279}
temp	float	$tmp163	 %read{279,279} %write{278,278}
temp	float	$tmp164	 %read{278,278} %write{277,277}
temp	int	$tmp165	 %read{282,282} %write{281,281}
temp	float	$tmp166	 %read{287,287} %write{286,286}
temp	float	$tmp167	 %read{286,286} %write{285,285}
temp	vector	$tmp168	 %read{285,285} %write{283,283}
temp	vector	$tmp169	 %read{285,285} %write{284,284}
temp	int	$tmp170	 %read{289,289} %write{288,288}
temp	float	$tmp171	 %read{296,296} %write{292,292}
temp	float	$tmp172	 %read{292,292} %write{291,291}
temp	float	$tmp173	 %read{291,291} %write{290,290}
temp	float	$tmp174	 %read{296,296} %write{295,295}
temp	float	$tmp175	 %read{295,295} %write{294,294}
temp	float	$tmp176	 %read{294,294} %write{293,293}
temp	float	$tmp177	 %read{300,300} %write{296,296}
temp	float	$tmp178	 %read{300,300} %write{299,299}
temp	float	$tmp179	 %read{299,299} %write{298,298}
temp	float	$tmp180	 %read{298,298} %write{297,297}
temp	float	$tmp181	 %read{302,302} %write{300,300}
temp	float	$tmp182	 %read{302,302} %write{301,301}
temp	point	$tmp183	 %read{308,308} %write{307,307}
temp	float	$tmp184	 %read{307,307} %write{304,304}
temp	float	$tmp185	 %read{307,307} %write{305,305}
temp	float	$tmp186	 %read{307,307} %write{306,306}
temp	float	$tmp187	 %read{310,310} %write{309,309}
temp	int	$tmp188	 %read{311,311} %write{310,310}
temp	float	$tmp189	 %read{313,313} %write{312,312}
temp	float	$tmp190	 %read{315,315} %write{314,314}
temp	float	$tmp191	 %read{317,317} %write{316,316}
temp	point	$tmp192	 %read{320,320} %write{319,319}
temp	point	$tmp193	 %read{322,322} %write{321,321}
temp	point	$tmp194	 %read{324,324} %write{323,323}
temp	float	$tmp195	 %read{327,327} %write{326,326}
temp	int	$tmp196	 %read{328,328} %write{327,327}
temp	float	$tmp197	 %read{330,330} %write{329,329}
temp	float	$tmp198	 %read{332,332} %write{331,331}
temp	point	$tmp199	 %read{335,335} %write{334,334}
temp	point	$tmp200	 %read{337,337} %write{336,336}
temp	float	$tmp201	 %read{340,340} %write{339,339}
temp	int	$tmp202	 %read{341,341} %write{340,340}
temp	float	$tmp203	 %read{343,343} %write{342,342}
temp	point	$tmp204	 %read{346,346} %write{345,345}
temp	float	$tmp205	 %read{349,349} %write{348,348}
temp	int	$tmp206	 %read{350,350} %write{349,349}
temp	int	$tmp207	 %read{2147483647,-1} %write{353,353}
temp	int	$tmp208	 %read{2147483647,-1} %write{355,355}
temp	int	$tmp209	 %read{2147483647,-1} %write{357,357}
temp	float	$tmp210	 %read{361,361} %write{360,360}
const	string	$const30	"Voronoi F3"		 %read{362,8999} %write{2147483647,-1}
temp	int	$tmp211	 %read{363,363} %write{362,362}
const	string	$const31	"voronoi_F3S"		 %read{364,9001} %write{2147483647,-1}
temp	float	$tmp212	 %read{533,533} %write{532,532}
const	string	$const32	"voronoi_F3"		 %read{365,9002} %write{2147483647,-1}
temp	float	$tmp213	 %read{370,370} %write{369,369}
temp	float	$tmp214	 %read{369,369} %write{368,368}
temp	float	$tmp215	 %read{373,373} %write{372,372}
temp	float	$tmp216	 %read{372,372} %write{371,371}
temp	float	$tmp217	 %read{376,376} %write{375,375}
temp	float	$tmp218	 %read{375,375} %write{374,374}
temp	int	$tmp219	 %read{384,384} %write{383,383}
temp	int	$tmp220	 %read{381,531} %write{381,531}
temp	int	$tmp221	 %read{388,388} %write{387,387}
temp	int	$tmp222	 %read{385,529} %write{385,529}
temp	int	$tmp223	 %read{392,392} %write{391,391}
temp	int	$tmp224	 %read{389,527} %write{389,527}
temp	float	$tmp225	 %read{396,396} %write{393,393}
temp	float	$tmp226	 %read{396,396} %write{394,394}
temp	float	$tmp227	 %read{396,396} %write{395,395}
temp	color	$tmp228	 %read{410,410} %write{409,409}
temp	point	$tmp229	 %read{403,403} %write{402,402}
temp	float	$tmp230	 %read{402,402} %write{399,399}
temp	float	$tmp231	 %read{402,402} %write{400,400}
temp	float	$tmp232	 %read{402,402} %write{401,401}
temp	point	$tmp233	 %read{408,408} %write{407,407}
temp	float	$tmp234	 %read{407,407} %write{404,404}
temp	float	$tmp235	 %read{407,407} %write{405,405}
temp	float	$tmp236	 %read{407,407} %write{406,406}
temp	point	$tmp237	 %read{412,412} %write{411,411}
temp	int	$tmp238	 %read{416,416} %write{415,415}
temp	int	$tmp239	 %read{419,419} %write{418,418}
temp	int	$tmp240	 %read{422,422} %write{421,421}
temp	float	$tmp241	 %read{427,427} %write{424,424}
temp	float	$tmp242	 %read{424,424} %write{423,423}
temp	float	$tmp243	 %read{427,427} %write{426,426}
temp	float	$tmp244	 %read{426,426} %write{425,425}
temp	float	$tmp245	 %read{430,430} %write{427,427}
temp	float	$tmp246	 %read{430,430} %write{429,429}
temp	float	$tmp247	 %read{429,429} %write{428,428}
temp	int	$tmp248	 %read{432,432} %write{431,431}
temp	float	$tmp249	 %read{440,440} %write{434,434}
temp	float	$tmp250	 %read{434,434} %write{433,433}
temp	float	$tmp251	 %read{440,440} %write{439,439}
temp	float	$tmp252	 %read{439,439} %write{436,436}
temp	float	$tmp253	 %read{436,436} %write{435,435}
temp	float	$tmp254	 %read{439,439} %write{438,438}
temp	float	$tmp255	 %read{438,438} %write{437,437}
temp	int	$tmp256	 %read{442,442} %write{441,441}
temp	float	$tmp257	 %read{449,449} %write{445,445}
temp	float	$tmp258	 %read{445,445} %write{444,444}
temp	float	$tmp259	 %read{444,444} %write{443,443}
temp	float	$tmp260	 %read{449,449} %write{448,448}
temp	float	$tmp261	 %read{448,448} %write{447,447}
temp	float	$tmp262	 %read{447,447} %write{446,446}
temp	float	$tmp263	 %read{453,453} %write{449,449}
temp	float	$tmp264	 %read{453,453} %write{452,452}
temp	float	$tmp265	 %read{452,452} %write{451,451}
temp	float	$tmp266	 %read{451,451} %write{450,450}
temp	int	$tmp267	 %read{455,455} %write{454,454}
temp	float	$tmp268	 %read{460,460} %write{459,459}
temp	float	$tmp269	 %read{459,459} %write{458,458}
temp	vector	$tmp270	 %read{458,458} %write{456,456}
temp	vector	$tmp271	 %read{458,458} %write{457,457}
temp	int	$tmp272	 %read{462,462} %write{461,461}
temp	float	$tmp273	 %read{469,469} %write{465,465}
temp	float	$tmp274	 %read{465,465} %write{464,464}
temp	float	$tmp275	 %read{464,464} %write{463,463}
temp	float	$tmp276	 %read{469,469} %write{468,468}
temp	float	$tmp277	 %read{468,468} %write{467,467}
temp	float	$tmp278	 %read{467,467} %write{466,466}
temp	float	$tmp279	 %read{473,473} %write{469,469}
temp	float	$tmp280	 %read{473,473} %write{472,472}
temp	float	$tmp281	 %read{472,472} %write{471,471}
temp	float	$tmp282	 %read{471,471} %write{470,470}
temp	float	$tmp283	 %read{475,475} %write{473,473}
temp	float	$tmp284	 %read{475,475} %write{474,474}
temp	point	$tmp285	 %read{481,481} %write{480,480}
temp	float	$tmp286	 %read{480,480} %write{477,477}
temp	float	$tmp287	 %read{480,480} %write{478,478}
temp	float	$tmp288	 %read{480,480} %write{479,479}
temp	float	$tmp289	 %read{483,483} %write{482,482}
temp	int	$tmp290	 %read{484,484} %write{483,483}
temp	float	$tmp291	 %read{486,486} %write{485,485}
temp	float	$tmp292	 %read{488,488} %write{487,487}
temp	float	$tmp293	 %read{490,490} %write{489,489}
temp	point	$tmp294	 %read{493,493} %write{492,492}
temp	point	$tmp295	 %read{495,495} %write{494,494}
temp	point	$tmp296	 %read{497,497} %write{496,496}
temp	float	$tmp297	 %read{500,500} %write{499,499}
temp	int	$tmp298	 %read{501,501} %write{500,500}
temp	float	$tmp299	 %read{503,503} %write{502,502}
temp	float	$tmp300	 %read{505,505} %write{504,504}
temp	point	$tmp301	 %read{508,508} %write{507,507}
temp	point	$tmp302	 %read{510,510} %write{509,509}
temp	float	$tmp303	 %read{513,513} %write{512,512}
temp	int	$tmp304	 %read{514,514} %write{513,513}
temp	float	$tmp305	 %read{516,516} %write{515,515}
temp	point	$tmp306	 %read{519,519} %write{518,518}
temp	float	$tmp307	 %read{522,522} %write{521,521}
temp	int	$tmp308	 %read{523,523} %write{522,522}
temp	int	$tmp309	 %read{2147483647,-1} %write{526,526}
temp	int	$tmp310	 %read{2147483647,-1} %write{528,528}
temp	int	$tmp311	 %read{2147483647,-1} %write{530,530}
temp	float	$tmp312	 %read{534,534} %write{533,533}
const	string	$const33	"Voronoi F4"		 %read{535,9172} %write{2147483647,-1}
temp	int	$tmp313	 %read{536,536} %write{535,535}
const	string	$const34	"voronoi_F4S"		 %read{537,9174} %write{2147483647,-1}
temp	float	$tmp314	 %read{706,706} %write{705,705}
const	string	$const35	"voronoi_F4"		 %read{538,9175} %write{2147483647,-1}
temp	float	$tmp315	 %read{543,543} %write{542,542}
temp	float	$tmp316	 %read{542,542} %write{541,541}
temp	float	$tmp317	 %read{546,546} %write{545,545}
temp	float	$tmp318	 %read{545,545} %write{544,544}
temp	float	$tmp319	 %read{549,549} %write{548,548}
temp	float	$tmp320	 %read{548,548} %write{547,547}
temp	int	$tmp321	 %read{557,557} %write{556,556}
temp	int	$tmp322	 %read{554,704} %write{554,704}
temp	int	$tmp323	 %read{561,561} %write{560,560}
temp	int	$tmp324	 %read{558,702} %write{558,702}
temp	int	$tmp325	 %read{565,565} %write{564,564}
temp	int	$tmp326	 %read{562,700} %write{562,700}
temp	float	$tmp327	 %read{569,569} %write{566,566}
temp	float	$tmp328	 %read{569,569} %write{567,567}
temp	float	$tmp329	 %read{569,569} %write{568,568}
temp	color	$tmp330	 %read{583,583} %write{582,582}
temp	point	$tmp331	 %read{576,576} %write{575,575}
temp	float	$tmp332	 %read{575,575} %write{572,572}
temp	float	$tmp333	 %read{575,575} %write{573,573}
temp	float	$tmp334	 %read{575,575} %write{574,574}
temp	point	$tmp335	 %read{581,581} %write{580,580}
temp	float	$tmp336	 %read{580,580} %write{577,577}
temp	float	$tmp337	 %read{580,580} %write{578,578}
temp	float	$tmp338	 %read{580,580} %write{579,579}
temp	point	$tmp339	 %read{585,585} %write{584,584}
temp	int	$tmp340	 %read{589,589} %write{588,588}
temp	int	$tmp341	 %read{592,592} %write{591,591}
temp	int	$tmp342	 %read{595,595} %write{594,594}
temp	float	$tmp343	 %read{600,600} %write{597,597}
temp	float	$tmp344	 %read{597,597} %write{596,596}
temp	float	$tmp345	 %read{600,600} %write{599,599}
temp	float	$tmp346	 %read{599,599} %write{598,598}
temp	float	$tmp347	 %read{603,603} %write{600,600}
temp	float	$tmp348	 %read{603,603} %write{602,602}
temp	float	$tmp349	 %read{602,602} %write{601,601}
temp	int	$tmp350	 %read{605,605} %write{604,604}
temp	float	$tmp351	 %read{613,613} %write{607,607}
temp	float	$tmp352	 %read{607,607} %write{606,606}
temp	float	$tmp353	 %read{613,613} %write{612,612}
temp	float	$tmp354	 %read{612,612} %write{609,609}
temp	float	$tmp355	 %read{609,609} %write{608,608}
temp	float	$tmp356	 %read{612,612} %write{611,611}
temp	float	$tmp357	 %read{611,611} %write{610,610}
temp	int	$tmp358	 %read{615,615} %write{614,614}
temp	float	$tmp359	 %read{622,622} %write{618,618}
temp	float	$tmp360	 %read{618,618} %write{617,617}
temp	float	$tmp361	 %read{617,617} %write{616,616}
temp	float	$tmp362	 %read{622,622} %write{621,621}
temp	float	$tmp363	 %read{621,621} %write{620,620}
temp	float	$tmp364	 %read{620,620} %write{619,619}
temp	float	$tmp365	 %read{626,626} %write{622,622}
temp	float	$tmp366	 %read{626,626} %write{625,625}
temp	float	$tmp367	 %read{625,625} %write{624,624}
temp	float	$tmp368	 %read{624,624} %write{623,623}
temp	int	$tmp369	 %read{628,628} %write{627,627}
temp	float	$tmp370	 %read{633,633} %write{632,632}
temp	float	$tmp371	 %read{632,632} %write{631,631}
temp	vector	$tmp372	 %read{631,631} %write{629,629}
temp	vector	$tmp373	 %read{631,631} %write{630,630}
temp	int	$tmp374	 %read{635,635} %write{634,634}
temp	float	$tmp375	 %read{642,642} %write{638,638}
temp	float	$tmp376	 %read{638,638} %write{637,637}
temp	float	$tmp377	 %read{637,637} %write{636,636}
temp	float	$tmp378	 %read{642,642} %write{641,641}
temp	float	$tmp379	 %read{641,641} %write{640,640}
temp	float	$tmp380	 %read{640,640} %write{639,639}
temp	float	$tmp381	 %read{646,646} %write{642,642}
temp	float	$tmp382	 %read{646,646} %write{645,645}
temp	float	$tmp383	 %read{645,645} %write{644,644}
temp	float	$tmp384	 %read{644,644} %write{643,643}
temp	float	$tmp385	 %read{648,648} %write{646,646}
temp	float	$tmp386	 %read{648,648} %write{647,647}
temp	point	$tmp387	 %read{654,654} %write{653,653}
temp	float	$tmp388	 %read{653,653} %write{650,650}
temp	float	$tmp389	 %read{653,653} %write{651,651}
temp	float	$tmp390	 %read{653,653} %write{652,652}
temp	float	$tmp391	 %read{656,656} %write{655,655}
temp	int	$tmp392	 %read{657,657} %write{656,656}
temp	float	$tmp393	 %read{659,659} %write{658,658}
temp	float	$tmp394	 %read{661,661} %write{660,660}
temp	float	$tmp395	 %read{663,663} %write{662,662}
temp	point	$tmp396	 %read{666,666} %write{665,665}
temp	point	$tmp397	 %read{668,668} %write{667,667}
temp	point	$tmp398	 %read{670,670} %write{669,669}
temp	float	$tmp399	 %read{673,673} %write{672,672}
temp	int	$tmp400	 %read{674,674} %write{673,673}
temp	float	$tmp401	 %read{676,676} %write{675,675}
temp	float	$tmp402	 %read{678,678} %write{677,677}
temp	point	$tmp403	 %read{681,681} %write{680,680}
temp	point	$tmp404	 %read{683,683} %write{682,682}
temp	float	$tmp405	 %read{686,686} %write{685,685}
temp	int	$tmp406	 %read{687,687} %write{686,686}
temp	float	$tmp407	 %read{689,689} %write{688,688}
temp	point	$tmp408	 %read{692,692} %write{691,691}
temp	float	$tmp409	 %read{695,695} %write{694,694}
temp	int	$tmp410	 %read{696,696} %write{695,695}
temp	int	$tmp411	 %read{2147483647,-1} %write{699,699}
temp	int	$tmp412	 %read{2147483647,-1} %write{701,701}
temp	int	$tmp413	 %read{2147483647,-1} %write{703,703}
temp	float	$tmp414	 %read{707,707} %write{706,706}
const	string	$const36	"Voronoi F2-F1"		 %read{708,9345} %write{2147483647,-1}
temp	int	$tmp415	 %read{709,709} %write{708,708}
const	string	$const37	"voronoi_F1F2S"		 %read{710,9347} %write{2147483647,-1}
temp	float	$tmp416	 %read{881,881} %write{880,880}
const	string	$const38	"voronoi_F1F2"		 %read{711,9524} %write{2147483647,-1}
const	string	$const39	"voronoi_FnFn"		 %read{712,9525} %write{2147483647,-1}
temp	float	$tmp417	 %read{716,716} %write{715,715}
temp	float	$tmp418	 %read{715,715} %write{714,714}
temp	float	$tmp419	 %read{719,719} %write{718,718}
temp	float	$tmp420	 %read{718,718} %write{717,717}
temp	float	$tmp421	 %read{722,722} %write{721,721}
temp	float	$tmp422	 %read{721,721} %write{720,720}
temp	int	$tmp423	 %read{730,730} %write{729,729}
temp	int	$tmp424	 %read{727,877} %write{727,877}
temp	int	$tmp425	 %read{734,734} %write{733,733}
temp	int	$tmp426	 %read{731,875} %write{731,875}
temp	int	$tmp427	 %read{738,738} %write{737,737}
temp	int	$tmp428	 %read{735,873} %write{735,873}
temp	float	$tmp429	 %read{742,742} %write{739,739}
temp	float	$tmp430	 %read{742,742} %write{740,740}
temp	float	$tmp431	 %read{742,742} %write{741,741}
temp	color	$tmp432	 %read{756,756} %write{755,755}
temp	point	$tmp433	 %read{749,749} %write{748,748}
temp	float	$tmp434	 %read{748,748} %write{745,745}
temp	float	$tmp435	 %read{748,748} %write{746,746}
temp	float	$tmp436	 %read{748,748} %write{747,747}
temp	point	$tmp437	 %read{754,754} %write{753,753}
temp	float	$tmp438	 %read{753,753} %write{750,750}
temp	float	$tmp439	 %read{753,753} %write{751,751}
temp	float	$tmp440	 %read{753,753} %write{752,752}
temp	point	$tmp441	 %read{758,758} %write{757,757}
temp	int	$tmp442	 %read{762,762} %write{761,761}
temp	int	$tmp443	 %read{765,765} %write{764,764}
temp	int	$tmp444	 %read{768,768} %write{767,767}
temp	float	$tmp445	 %read{773,773} %write{770,770}
temp	float	$tmp446	 %read{770,770} %write{769,769}
temp	float	$tmp447	 %read{773,773} %write{772,772}
temp	float	$tmp448	 %read{772,772} %write{771,771}
temp	float	$tmp449	 %read{776,776} %write{773,773}
temp	float	$tmp450	 %read{776,776} %write{775,775}
temp	float	$tmp451	 %read{775,775} %write{774,774}
temp	int	$tmp452	 %read{778,778} %write{777,777}
temp	float	$tmp453	 %read{786,786} %write{780,780}
temp	float	$tmp454	 %read{780,780} %write{779,779}
temp	float	$tmp455	 %read{786,786} %write{785,785}
temp	float	$tmp456	 %read{785,785} %write{782,782}
temp	float	$tmp457	 %read{782,782} %write{781,781}
temp	float	$tmp458	 %read{785,785} %write{784,784}
temp	float	$tmp459	 %read{784,784} %write{783,783}
temp	int	$tmp460	 %read{788,788} %write{787,787}
temp	float	$tmp461	 %read{795,795} %write{791,791}
temp	float	$tmp462	 %read{791,791} %write{790,790}
temp	float	$tmp463	 %read{790,790} %write{789,789}
temp	float	$tmp464	 %read{795,795} %write{794,794}
temp	float	$tmp465	 %read{794,794} %write{793,793}
temp	float	$tmp466	 %read{793,793} %write{792,792}
temp	float	$tmp467	 %read{799,799} %write{795,795}
temp	float	$tmp468	 %read{799,799} %write{798,798}
temp	float	$tmp469	 %read{798,798} %write{797,797}
temp	float	$tmp470	 %read{797,797} %write{796,796}
temp	int	$tmp471	 %read{801,801} %write{800,800}
temp	float	$tmp472	 %read{806,806} %write{805,805}
temp	float	$tmp473	 %read{805,805} %write{804,804}
temp	vector	$tmp474	 %read{804,804} %write{802,802}
temp	vector	$tmp475	 %read{804,804} %write{803,803}
temp	int	$tmp476	 %read{808,808} %write{807,807}
temp	float	$tmp477	 %read{815,815} %write{811,811}
temp	float	$tmp478	 %read{811,811} %write{810,810}
temp	float	$tmp479	 %read{810,810} %write{809,809}
temp	float	$tmp480	 %read{815,815} %write{814,814}
temp	float	$tmp481	 %read{814,814} %write{813,813}
temp	float	$tmp482	 %read{813,813} %write{812,812}
temp	float	$tmp483	 %read{819,819} %write{815,815}
temp	float	$tmp484	 %read{819,819} %write{818,818}
temp	float	$tmp485	 %read{818,818} %write{817,817}
temp	float	$tmp486	 %read{817,817} %write{816,816}
temp	float	$tmp487	 %read{821,821} %write{819,819}
temp	float	$tmp488	 %read{821,821} %write{820,820}
temp	point	$tmp489	 %read{827,827} %write{826,826}
temp	float	$tmp490	 %read{826,826} %write{823,823}
temp	float	$tmp491	 %read{826,826} %write{824,824}
temp	float	$tmp492	 %read{826,826} %write{825,825}
temp	float	$tmp493	 %read{829,829} %write{828,828}
temp	int	$tmp494	 %read{830,830} %write{829,829}
temp	float	$tmp495	 %read{832,832} %write{831,831}
temp	float	$tmp496	 %read{834,834} %write{833,833}
temp	float	$tmp497	 %read{836,836} %write{835,835}
temp	point	$tmp498	 %read{839,839} %write{838,838}
temp	point	$tmp499	 %read{841,841} %write{840,840}
temp	point	$tmp500	 %read{843,843} %write{842,842}
temp	float	$tmp501	 %read{846,846} %write{845,845}
temp	int	$tmp502	 %read{847,847} %write{846,846}
temp	float	$tmp503	 %read{849,849} %write{848,848}
temp	float	$tmp504	 %read{851,851} %write{850,850}
temp	point	$tmp505	 %read{854,854} %write{853,853}
temp	point	$tmp506	 %read{856,856} %write{855,855}
temp	float	$tmp507	 %read{859,859} %write{858,858}
temp	int	$tmp508	 %read{860,860} %write{859,859}
temp	float	$tmp509	 %read{862,862} %write{861,861}
temp	point	$tmp510	 %read{865,865} %write{864,864}
temp	float	$tmp511	 %read{868,868} %write{867,867}
temp	int	$tmp512	 %read{869,869} %write{868,868}
temp	int	$tmp513	 %read{2147483647,-1} %write{872,872}
temp	int	$tmp514	 %read{2147483647,-1} %write{874,874}
temp	int	$tmp515	 %read{2147483647,-1} %write{876,876}
temp	float	$tmp516	 %read{880,880} %write{878,878}
temp	float	$tmp517	 %read{880,880} %write{879,879}
temp	float	$tmp518	 %read{882,882} %write{881,881}
const	string	$const40	"Voronoi Crackle"		 %read{883,9520} %write{2147483647,-1}
temp	int	$tmp519	 %read{884,884} %write{883,883}
const	string	$const41	"voronoi_CrS"		 %read{885,9522} %write{2147483647,-1}
temp	float	$tmp520	 %read{1063,1063} %write{1060,1061}
const	string	$const42	"voronoi_Cr"		 %read{886,9523} %write{2147483647,-1}
const	float	$const43	10		 %read{1057,9694} %write{2147483647,-1}
temp	float	$tmp521	 %read{1057,1057} %write{1056,1056}
temp	float	$tmp522	 %read{892,892} %write{891,891}
temp	float	$tmp523	 %read{891,891} %write{890,890}
temp	float	$tmp524	 %read{895,895} %write{894,894}
temp	float	$tmp525	 %read{894,894} %write{893,893}
temp	float	$tmp526	 %read{898,898} %write{897,897}
temp	float	$tmp527	 %read{897,897} %write{896,896}
temp	int	$tmp528	 %read{906,906} %write{905,905}
temp	int	$tmp529	 %read{903,1053} %write{903,1053}
temp	int	$tmp530	 %read{910,910} %write{909,909}
temp	int	$tmp531	 %read{907,1051} %write{907,1051}
temp	int	$tmp532	 %read{914,914} %write{913,913}
temp	int	$tmp533	 %read{911,1049} %write{911,1049}
temp	float	$tmp534	 %read{918,918} %write{915,915}
temp	float	$tmp535	 %read{918,918} %write{916,916}
temp	float	$tmp536	 %read{918,918} %write{917,917}
temp	color	$tmp537	 %read{932,932} %write{931,931}
temp	point	$tmp538	 %read{925,925} %write{924,924}
temp	float	$tmp539	 %read{924,924} %write{921,921}
temp	float	$tmp540	 %read{924,924} %write{922,922}
temp	float	$tmp541	 %read{924,924} %write{923,923}
temp	point	$tmp542	 %read{930,930} %write{929,929}
temp	float	$tmp543	 %read{929,929} %write{926,926}
temp	float	$tmp544	 %read{929,929} %write{927,927}
temp	float	$tmp545	 %read{929,929} %write{928,928}
temp	point	$tmp546	 %read{934,934} %write{933,933}
temp	int	$tmp547	 %read{938,938} %write{937,937}
temp	int	$tmp548	 %read{941,941} %write{940,940}
temp	int	$tmp549	 %read{944,944} %write{943,943}
temp	float	$tmp550	 %read{949,949} %write{946,946}
temp	float	$tmp551	 %read{946,946} %write{945,945}
temp	float	$tmp552	 %read{949,949} %write{948,948}
temp	float	$tmp553	 %read{948,948} %write{947,947}
temp	float	$tmp554	 %read{952,952} %write{949,949}
temp	float	$tmp555	 %read{952,952} %write{951,951}
temp	float	$tmp556	 %read{951,951} %write{950,950}
temp	int	$tmp557	 %read{954,954} %write{953,953}
temp	float	$tmp558	 %read{962,962} %write{956,956}
temp	float	$tmp559	 %read{956,956} %write{955,955}
temp	float	$tmp560	 %read{962,962} %write{961,961}
temp	float	$tmp561	 %read{961,961} %write{958,958}
temp	float	$tmp562	 %read{958,958} %write{957,957}
temp	float	$tmp563	 %read{961,961} %write{960,960}
temp	float	$tmp564	 %read{960,960} %write{959,959}
temp	int	$tmp565	 %read{964,964} %write{963,963}
temp	float	$tmp566	 %read{971,971} %write{967,967}
temp	float	$tmp567	 %read{967,967} %write{966,966}
temp	float	$tmp568	 %read{966,966} %write{965,965}
temp	float	$tmp569	 %read{971,971} %write{970,970}
temp	float	$tmp570	 %read{970,970} %write{969,969}
temp	float	$tmp571	 %read{969,969} %write{968,968}
temp	float	$tmp572	 %read{975,975} %write{971,971}
temp	float	$tmp573	 %read{975,975} %write{974,974}
temp	float	$tmp574	 %read{974,974} %write{973,973}
temp	float	$tmp575	 %read{973,973} %write{972,972}
temp	int	$tmp576	 %read{977,977} %write{976,976}
temp	float	$tmp577	 %read{982,982} %write{981,981}
temp	float	$tmp578	 %read{981,981} %write{980,980}
temp	vector	$tmp579	 %read{980,980} %write{978,978}
temp	vector	$tmp580	 %read{980,980} %write{979,979}
temp	int	$tmp581	 %read{984,984} %write{983,983}
temp	float	$tmp582	 %read{991,991} %write{987,987}
temp	float	$tmp583	 %read{987,987} %write{986,986}
temp	float	$tmp584	 %read{986,986} %write{985,985}
temp	float	$tmp585	 %read{991,991} %write{990,990}
temp	float	$tmp586	 %read{990,990} %write{989,989}
temp	float	$tmp587	 %read{989,989} %write{988,988}
temp	float	$tmp588	 %read{995,995} %write{991,991}
temp	float	$tmp589	 %read{995,995} %write{994,994}
temp	float	$tmp590	 %read{994,994} %write{993,993}
temp	float	$tmp591	 %read{993,993} %write{992,992}
temp	float	$tmp592	 %read{997,997} %write{995,995}
temp	float	$tmp593	 %read{997,997} %write{996,996}
temp	point	$tmp594	 %read{1003,1003} %write{1002,1002}
temp	float	$tmp595	 %read{1002,1002} %write{999,999}
temp	float	$tmp596	 %read{1002,1002} %write{1000,1000}
temp	float	$tmp597	 %read{1002,1002} %write{1001,1001}
temp	float	$tmp598	 %read{1005,1005} %write{1004,1004}
temp	int	$tmp599	 %read{1006,1006} %write{1005,1005}
temp	float	$tmp600	 %read{1008,1008} %write{1007,1007}
temp	float	$tmp601	 %read{1010,1010} %write{1009,1009}
temp	float	$tmp602	 %read{1012,1012} %write{1011,1011}
temp	point	$tmp603	 %read{1015,1015} %write{1014,1014}
temp	point	$tmp604	 %read{1017,1017} %write{1016,1016}
temp	point	$tmp605	 %read{1019,1019} %write{1018,1018}
temp	float	$tmp606	 %read{1022,1022} %write{1021,1021}
temp	int	$tmp607	 %read{1023,1023} %write{1022,1022}
temp	float	$tmp608	 %read{1025,1025} %write{1024,1024}
temp	float	$tmp609	 %read{1027,1027} %write{1026,1026}
temp	point	$tmp610	 %read{1030,1030} %write{1029,1029}
temp	point	$tmp611	 %read{1032,1032} %write{1031,1031}
temp	float	$tmp612	 %read{1035,1035} %write{1034,1034}
temp	int	$tmp613	 %read{1036,1036} %write{1035,1035}
temp	float	$tmp614	 %read{1038,1038} %write{1037,1037}
temp	point	$tmp615	 %read{1041,1041} %write{1040,1040}
temp	float	$tmp616	 %read{1044,1044} %write{1043,1043}
temp	int	$tmp617	 %read{1045,1045} %write{1044,1044}
temp	int	$tmp618	 %read{2147483647,-1} %write{1048,1048}
temp	int	$tmp619	 %read{2147483647,-1} %write{1050,1050}
temp	int	$tmp620	 %read{2147483647,-1} %write{1052,1052}
temp	float	$tmp621	 %read{1056,1056} %write{1054,1054}
temp	float	$tmp622	 %read{1056,1056} %write{1055,1055}
temp	int	$tmp623	 %read{1059,1059} %write{1058,1058}
temp	float	$tmp624	 %read{1064,1064} %write{1063,1063}
const	string	$const44	"Cell Noise"		 %read{1065,9702} %write{2147483647,-1}
temp	int	$tmp625	 %read{1066,1066} %write{1065,1065}
temp	float	$tmp626	 %read{1070,1070} %write{1069,1069}
temp	float	$tmp627	 %read{2129,2129} %write{2128,2128}
temp	int	$tmp628	 %read{1074,1074} %write{1073,1073}
temp	int	$tmp629	 %read{1077,1077} %write{1076,1076}
temp	float	$tmp630	 %read{1247,1247} %write{1246,1246}
temp	float	$tmp631	 %read{1084,1084} %write{1083,1083}
temp	float	$tmp632	 %read{1083,1083} %write{1082,1082}
temp	float	$tmp633	 %read{1087,1087} %write{1086,1086}
temp	float	$tmp634	 %read{1086,1086} %write{1085,1085}
temp	float	$tmp635	 %read{1090,1090} %write{1089,1089}
temp	float	$tmp636	 %read{1089,1089} %write{1088,1088}
temp	int	$tmp637	 %read{1098,1098} %write{1097,1097}
temp	int	$tmp638	 %read{1095,1245} %write{1095,1245}
temp	int	$tmp639	 %read{1102,1102} %write{1101,1101}
temp	int	$tmp640	 %read{1099,1243} %write{1099,1243}
temp	int	$tmp641	 %read{1106,1106} %write{1105,1105}
temp	int	$tmp642	 %read{1103,1241} %write{1103,1241}
temp	float	$tmp643	 %read{1110,1110} %write{1107,1107}
temp	float	$tmp644	 %read{1110,1110} %write{1108,1108}
temp	float	$tmp645	 %read{1110,1110} %write{1109,1109}
temp	color	$tmp646	 %read{1124,1124} %write{1123,1123}
temp	point	$tmp647	 %read{1117,1117} %write{1116,1116}
temp	float	$tmp648	 %read{1116,1116} %write{1113,1113}
temp	float	$tmp649	 %read{1116,1116} %write{1114,1114}
temp	float	$tmp650	 %read{1116,1116} %write{1115,1115}
temp	point	$tmp651	 %read{1122,1122} %write{1121,1121}
temp	float	$tmp652	 %read{1121,1121} %write{1118,1118}
temp	float	$tmp653	 %read{1121,1121} %write{1119,1119}
temp	float	$tmp654	 %read{1121,1121} %write{1120,1120}
temp	point	$tmp655	 %read{1126,1126} %write{1125,1125}
temp	int	$tmp656	 %read{1130,1130} %write{1129,1129}
temp	int	$tmp657	 %read{1133,1133} %write{1132,1132}
temp	int	$tmp658	 %read{1136,1136} %write{1135,1135}
temp	float	$tmp659	 %read{1141,1141} %write{1138,1138}
temp	float	$tmp660	 %read{1138,1138} %write{1137,1137}
temp	float	$tmp661	 %read{1141,1141} %write{1140,1140}
temp	float	$tmp662	 %read{1140,1140} %write{1139,1139}
temp	float	$tmp663	 %read{1144,1144} %write{1141,1141}
temp	float	$tmp664	 %read{1144,1144} %write{1143,1143}
temp	float	$tmp665	 %read{1143,1143} %write{1142,1142}
temp	int	$tmp666	 %read{1146,1146} %write{1145,1145}
temp	float	$tmp667	 %read{1154,1154} %write{1148,1148}
temp	float	$tmp668	 %read{1148,1148} %write{1147,1147}
temp	float	$tmp669	 %read{1154,1154} %write{1153,1153}
temp	float	$tmp670	 %read{1153,1153} %write{1150,1150}
temp	float	$tmp671	 %read{1150,1150} %write{1149,1149}
temp	float	$tmp672	 %read{1153,1153} %write{1152,1152}
temp	float	$tmp673	 %read{1152,1152} %write{1151,1151}
temp	int	$tmp674	 %read{1156,1156} %write{1155,1155}
temp	float	$tmp675	 %read{1163,1163} %write{1159,1159}
temp	float	$tmp676	 %read{1159,1159} %write{1158,1158}
temp	float	$tmp677	 %read{1158,1158} %write{1157,1157}
temp	float	$tmp678	 %read{1163,1163} %write{1162,1162}
temp	float	$tmp679	 %read{1162,1162} %write{1161,1161}
temp	float	$tmp680	 %read{1161,1161} %write{1160,1160}
temp	float	$tmp681	 %read{1167,1167} %write{1163,1163}
temp	float	$tmp682	 %read{1167,1167} %write{1166,1166}
temp	float	$tmp683	 %read{1166,1166} %write{1165,1165}
temp	float	$tmp684	 %read{1165,1165} %write{1164,1164}
temp	int	$tmp685	 %read{1169,1169} %write{1168,1168}
temp	float	$tmp686	 %read{1174,1174} %write{1173,1173}
temp	float	$tmp687	 %read{1173,1173} %write{1172,1172}
temp	vector	$tmp688	 %read{1172,1172} %write{1170,1170}
temp	vector	$tmp689	 %read{1172,1172} %write{1171,1171}
temp	int	$tmp690	 %read{1176,1176} %write{1175,1175}
temp	float	$tmp691	 %read{1183,1183} %write{1179,1179}
temp	float	$tmp692	 %read{1179,1179} %write{1178,1178}
temp	float	$tmp693	 %read{1178,1178} %write{1177,1177}
temp	float	$tmp694	 %read{1183,1183} %write{1182,1182}
temp	float	$tmp695	 %read{1182,1182} %write{1181,1181}
temp	float	$tmp696	 %read{1181,1181} %write{1180,1180}
temp	float	$tmp697	 %read{1187,1187} %write{1183,1183}
temp	float	$tmp698	 %read{1187,1187} %write{1186,1186}
temp	float	$tmp699	 %read{1186,1186} %write{1185,1185}
temp	float	$tmp700	 %read{1185,1185} %write{1184,1184}
temp	float	$tmp701	 %read{1189,1189} %write{1187,1187}
temp	float	$tmp702	 %read{1189,1189} %write{1188,1188}
temp	point	$tmp703	 %read{1195,1195} %write{1194,1194}
temp	float	$tmp704	 %read{1194,1194} %write{1191,1191}
temp	float	$tmp705	 %read{1194,1194} %write{1192,1192}
temp	float	$tmp706	 %read{1194,1194} %write{1193,1193}
temp	float	$tmp707	 %read{1197,1197} %write{1196,1196}
temp	int	$tmp708	 %read{1198,1198} %write{1197,1197}
temp	float	$tmp709	 %read{1200,1200} %write{1199,1199}
temp	float	$tmp710	 %read{1202,1202} %write{1201,1201}
temp	float	$tmp711	 %read{1204,1204} %write{1203,1203}
temp	point	$tmp712	 %read{1207,1207} %write{1206,1206}
temp	point	$tmp713	 %read{1209,1209} %write{1208,1208}
temp	point	$tmp714	 %read{1211,1211} %write{1210,1210}
temp	float	$tmp715	 %read{1214,1214} %write{1213,1213}
temp	int	$tmp716	 %read{1215,1215} %write{1214,1214}
temp	float	$tmp717	 %read{1217,1217} %write{1216,1216}
temp	float	$tmp718	 %read{1219,1219} %write{1218,1218}
temp	point	$tmp719	 %read{1222,1222} %write{1221,1221}
temp	point	$tmp720	 %read{1224,1224} %write{1223,1223}
temp	float	$tmp721	 %read{1227,1227} %write{1226,1226}
temp	int	$tmp722	 %read{1228,1228} %write{1227,1227}
temp	float	$tmp723	 %read{1230,1230} %write{1229,1229}
temp	point	$tmp724	 %read{1233,1233} %write{1232,1232}
temp	float	$tmp725	 %read{1236,1236} %write{1235,1235}
temp	int	$tmp726	 %read{1237,1237} %write{1236,1236}
temp	int	$tmp727	 %read{2147483647,-1} %write{1240,1240}
temp	int	$tmp728	 %read{2147483647,-1} %write{1242,1242}
temp	int	$tmp729	 %read{2147483647,-1} %write{1244,1244}
temp	float	$tmp730	 %read{1248,1248} %write{1247,1247}
temp	int	$tmp731	 %read{1250,1250} %write{1249,1249}
temp	float	$tmp732	 %read{1420,1420} %write{1419,1419}
temp	float	$tmp733	 %read{1257,1257} %write{1256,1256}
temp	float	$tmp734	 %read{1256,1256} %write{1255,1255}
temp	float	$tmp735	 %read{1260,1260} %write{1259,1259}
temp	float	$tmp736	 %read{1259,1259} %write{1258,1258}
temp	float	$tmp737	 %read{1263,1263} %write{1262,1262}
temp	float	$tmp738	 %read{1262,1262} %write{1261,1261}
temp	int	$tmp739	 %read{1271,1271} %write{1270,1270}
temp	int	$tmp740	 %read{1268,1418} %write{1268,1418}
temp	int	$tmp741	 %read{1275,1275} %write{1274,1274}
temp	int	$tmp742	 %read{1272,1416} %write{1272,1416}
temp	int	$tmp743	 %read{1279,1279} %write{1278,1278}
temp	int	$tmp744	 %read{1276,1414} %write{1276,1414}
temp	float	$tmp745	 %read{1283,1283} %write{1280,1280}
temp	float	$tmp746	 %read{1283,1283} %write{1281,1281}
temp	float	$tmp747	 %read{1283,1283} %write{1282,1282}
temp	color	$tmp748	 %read{1297,1297} %write{1296,1296}
temp	point	$tmp749	 %read{1290,1290} %write{1289,1289}
temp	float	$tmp750	 %read{1289,1289} %write{1286,1286}
temp	float	$tmp751	 %read{1289,1289} %write{1287,1287}
temp	float	$tmp752	 %read{1289,1289} %write{1288,1288}
temp	point	$tmp753	 %read{1295,1295} %write{1294,1294}
temp	float	$tmp754	 %read{1294,1294} %write{1291,1291}
temp	float	$tmp755	 %read{1294,1294} %write{1292,1292}
temp	float	$tmp756	 %read{1294,1294} %write{1293,1293}
temp	point	$tmp757	 %read{1299,1299} %write{1298,1298}
temp	int	$tmp758	 %read{1303,1303} %write{1302,1302}
temp	int	$tmp759	 %read{1306,1306} %write{1305,1305}
temp	int	$tmp760	 %read{1309,1309} %write{1308,1308}
temp	float	$tmp761	 %read{1314,1314} %write{1311,1311}
temp	float	$tmp762	 %read{1311,1311} %write{1310,1310}
temp	float	$tmp763	 %read{1314,1314} %write{1313,1313}
temp	float	$tmp764	 %read{1313,1313} %write{1312,1312}
temp	float	$tmp765	 %read{1317,1317} %write{1314,1314}
temp	float	$tmp766	 %read{1317,1317} %write{1316,1316}
temp	float	$tmp767	 %read{1316,1316} %write{1315,1315}
temp	int	$tmp768	 %read{1319,1319} %write{1318,1318}
temp	float	$tmp769	 %read{1327,1327} %write{1321,1321}
temp	float	$tmp770	 %read{1321,1321} %write{1320,1320}
temp	float	$tmp771	 %read{1327,1327} %write{1326,1326}
temp	float	$tmp772	 %read{1326,1326} %write{1323,1323}
temp	float	$tmp773	 %read{1323,1323} %write{1322,1322}
temp	float	$tmp774	 %read{1326,1326} %write{1325,1325}
temp	float	$tmp775	 %read{1325,1325} %write{1324,1324}
temp	int	$tmp776	 %read{1329,1329} %write{1328,1328}
temp	float	$tmp777	 %read{1336,1336} %write{1332,1332}
temp	float	$tmp778	 %read{1332,1332} %write{1331,1331}
temp	float	$tmp779	 %read{1331,1331} %write{1330,1330}
temp	float	$tmp780	 %read{1336,1336} %write{1335,1335}
temp	float	$tmp781	 %read{1335,1335} %write{1334,1334}
temp	float	$tmp782	 %read{1334,1334} %write{1333,1333}
temp	float	$tmp783	 %read{1340,1340} %write{1336,1336}
temp	float	$tmp784	 %read{1340,1340} %write{1339,1339}
temp	float	$tmp785	 %read{1339,1339} %write{1338,1338}
temp	float	$tmp786	 %read{1338,1338} %write{1337,1337}
temp	int	$tmp787	 %read{1342,1342} %write{1341,1341}
temp	float	$tmp788	 %read{1347,1347} %write{1346,1346}
temp	float	$tmp789	 %read{1346,1346} %write{1345,1345}
temp	vector	$tmp790	 %read{1345,1345} %write{1343,1343}
temp	vector	$tmp791	 %read{1345,1345} %write{1344,1344}
temp	int	$tmp792	 %read{1349,1349} %write{1348,1348}
temp	float	$tmp793	 %read{1356,1356} %write{1352,1352}
temp	float	$tmp794	 %read{1352,1352} %write{1351,1351}
temp	float	$tmp795	 %read{1351,1351} %write{1350,1350}
temp	float	$tmp796	 %read{1356,1356} %write{1355,1355}
temp	float	$tmp797	 %read{1355,1355} %write{1354,1354}
temp	float	$tmp798	 %read{1354,1354} %write{1353,1353}
temp	float	$tmp799	 %read{1360,1360} %write{1356,1356}
temp	float	$tmp800	 %read{1360,1360} %write{1359,1359}
temp	float	$tmp801	 %read{1359,1359} %write{1358,1358}
temp	float	$tmp802	 %read{1358,1358} %write{1357,1357}
temp	float	$tmp803	 %read{1362,1362} %write{1360,1360}
temp	float	$tmp804	 %read{1362,1362} %write{1361,1361}
temp	point	$tmp805	 %read{1368,1368} %write{1367,1367}
temp	float	$tmp806	 %read{1367,1367} %write{1364,1364}
temp	float	$tmp807	 %read{1367,1367} %write{1365,1365}
temp	float	$tmp808	 %read{1367,1367} %write{1366,1366}
temp	float	$tmp809	 %read{1370,1370} %write{1369,1369}
temp	int	$tmp810	 %read{1371,1371} %write{1370,1370}
temp	float	$tmp811	 %read{1373,1373} %write{1372,1372}
temp	float	$tmp812	 %read{1375,1375} %write{1374,1374}
temp	float	$tmp813	 %read{1377,1377} %write{1376,1376}
temp	point	$tmp814	 %read{1380,1380} %write{1379,1379}
temp	point	$tmp815	 %read{1382,1382} %write{1381,1381}
temp	point	$tmp816	 %read{1384,1384} %write{1383,1383}
temp	float	$tmp817	 %read{1387,1387} %write{1386,1386}
temp	int	$tmp818	 %read{1388,1388} %write{1387,1387}
temp	float	$tmp819	 %read{1390,1390} %write{1389,1389}
temp	float	$tmp820	 %read{1392,1392} %write{1391,1391}
temp	point	$tmp821	 %read{1395,1395} %write{1394,1394}
temp	point	$tmp822	 %read{1397,1397} %write{1396,1396}
temp	float	$tmp823	 %read{1400,1400} %write{1399,1399}
temp	int	$tmp824	 %read{1401,1401} %write{1400,1400}
temp	float	$tmp825	 %read{1403,1403} %write{1402,1402}
temp	point	$tmp826	 %read{1406,1406} %write{1405,1405}
temp	float	$tmp827	 %read{1409,1409} %write{1408,1408}
temp	int	$tmp828	 %read{1410,1410} %write{1409,1409}
temp	int	$tmp829	 %read{2147483647,-1} %write{1413,1413}
temp	int	$tmp830	 %read{2147483647,-1} %write{1415,1415}
temp	int	$tmp831	 %read{2147483647,-1} %write{1417,1417}
temp	float	$tmp832	 %read{1421,1421} %write{1420,1420}
temp	int	$tmp833	 %read{1423,1423} %write{1422,1422}
temp	float	$tmp834	 %read{1593,1593} %write{1592,1592}
temp	float	$tmp835	 %read{1430,1430} %write{1429,1429}
temp	float	$tmp836	 %read{1429,1429} %write{1428,1428}
temp	float	$tmp837	 %read{1433,1433} %write{1432,1432}
temp	float	$tmp838	 %read{1432,1432} %write{1431,1431}
temp	float	$tmp839	 %read{1436,1436} %write{1435,1435}
temp	float	$tmp840	 %read{1435,1435} %write{1434,1434}
temp	int	$tmp841	 %read{1444,1444} %write{1443,1443}
temp	int	$tmp842	 %read{1441,1591} %write{1441,1591}
temp	int	$tmp843	 %read{1448,1448} %write{1447,1447}
temp	int	$tmp844	 %read{1445,1589} %write{1445,1589}
temp	int	$tmp845	 %read{1452,1452} %write{1451,1451}
temp	int	$tmp846	 %read{1449,1587} %write{1449,1587}
temp	float	$tmp847	 %read{1456,1456} %write{1453,1453}
temp	float	$tmp848	 %read{1456,1456} %write{1454,1454}
temp	float	$tmp849	 %read{1456,1456} %write{1455,1455}
temp	color	$tmp850	 %read{1470,1470} %write{1469,1469}
temp	point	$tmp851	 %read{1463,1463} %write{1462,1462}
temp	float	$tmp852	 %read{1462,1462} %write{1459,1459}
temp	float	$tmp853	 %read{1462,1462} %write{1460,1460}
temp	float	$tmp854	 %read{1462,1462} %write{1461,1461}
temp	point	$tmp855	 %read{1468,1468} %write{1467,1467}
temp	float	$tmp856	 %read{1467,1467} %write{1464,1464}
temp	float	$tmp857	 %read{1467,1467} %write{1465,1465}
temp	float	$tmp858	 %read{1467,1467} %write{1466,1466}
temp	point	$tmp859	 %read{1472,1472} %write{1471,1471}
temp	int	$tmp860	 %read{1476,1476} %write{1475,1475}
temp	int	$tmp861	 %read{1479,1479} %write{1478,1478}
temp	int	$tmp862	 %read{1482,1482} %write{1481,1481}
temp	float	$tmp863	 %read{1487,1487} %write{1484,1484}
temp	float	$tmp864	 %read{1484,1484} %write{1483,1483}
temp	float	$tmp865	 %read{1487,1487} %write{1486,1486}
temp	float	$tmp866	 %read{1486,1486} %write{1485,1485}
temp	float	$tmp867	 %read{1490,1490} %write{1487,1487}
temp	float	$tmp868	 %read{1490,1490} %write{1489,1489}
temp	float	$tmp869	 %read{1489,1489} %write{1488,1488}
temp	int	$tmp870	 %read{1492,1492} %write{1491,1491}
temp	float	$tmp871	 %read{1500,1500} %write{1494,1494}
temp	float	$tmp872	 %read{1494,1494} %write{1493,1493}
temp	float	$tmp873	 %read{1500,1500} %write{1499,1499}
temp	float	$tmp874	 %read{1499,1499} %write{1496,1496}
temp	float	$tmp875	 %read{1496,1496} %write{1495,1495}
temp	float	$tmp876	 %read{1499,1499} %write{1498,1498}
temp	float	$tmp877	 %read{1498,1498} %write{1497,1497}
temp	int	$tmp878	 %read{1502,1502} %write{1501,1501}
temp	float	$tmp879	 %read{1509,1509} %write{1505,1505}
temp	float	$tmp880	 %read{1505,1505} %write{1504,1504}
temp	float	$tmp881	 %read{1504,1504} %write{1503,1503}
temp	float	$tmp882	 %read{1509,1509} %write{1508,1508}
temp	float	$tmp883	 %read{1508,1508} %write{1507,1507}
temp	float	$tmp884	 %read{1507,1507} %write{1506,1506}
temp	float	$tmp885	 %read{1513,1513} %write{1509,1509}
temp	float	$tmp886	 %read{1513,1513} %write{1512,1512}
temp	float	$tmp887	 %read{1512,1512} %write{1511,1511}
temp	float	$tmp888	 %read{1511,1511} %write{1510,1510}
temp	int	$tmp889	 %read{1515,1515} %write{1514,1514}
temp	float	$tmp890	 %read{1520,1520} %write{1519,1519}
temp	float	$tmp891	 %read{1519,1519} %write{1518,1518}
temp	vector	$tmp892	 %read{1518,1518} %write{1516,1516}
temp	vector	$tmp893	 %read{1518,1518} %write{1517,1517}
temp	int	$tmp894	 %read{1522,1522} %write{1521,1521}
temp	float	$tmp895	 %read{1529,1529} %write{1525,1525}
temp	float	$tmp896	 %read{1525,1525} %write{1524,1524}
temp	float	$tmp897	 %read{1524,1524} %write{1523,1523}
temp	float	$tmp898	 %read{1529,1529} %write{1528,1528}
temp	float	$tmp899	 %read{1528,1528} %write{1527,1527}
temp	float	$tmp900	 %read{1527,1527} %write{1526,1526}
temp	float	$tmp901	 %read{1533,1533} %write{1529,1529}
temp	float	$tmp902	 %read{1533,1533} %write{1532,1532}
temp	float	$tmp903	 %read{1532,1532} %write{1531,1531}
temp	float	$tmp904	 %read{1531,1531} %write{1530,1530}
temp	float	$tmp905	 %read{1535,1535} %write{1533,1533}
temp	float	$tmp906	 %read{1535,1535} %write{1534,1534}
temp	point	$tmp907	 %read{1541,1541} %write{1540,1540}
temp	float	$tmp908	 %read{1540,1540} %write{1537,1537}
temp	float	$tmp909	 %read{1540,1540} %write{1538,1538}
temp	float	$tmp910	 %read{1540,1540} %write{1539,1539}
temp	float	$tmp911	 %read{1543,1543} %write{1542,1542}
temp	int	$tmp912	 %read{1544,1544} %write{1543,1543}
temp	float	$tmp913	 %read{1546,1546} %write{1545,1545}
temp	float	$tmp914	 %read{1548,1548} %write{1547,1547}
temp	float	$tmp915	 %read{1550,1550} %write{1549,1549}
temp	point	$tmp916	 %read{1553,1553} %write{1552,1552}
temp	point	$tmp917	 %read{1555,1555} %write{1554,1554}
temp	point	$tmp918	 %read{1557,1557} %write{1556,1556}
temp	float	$tmp919	 %read{1560,1560} %write{1559,1559}
temp	int	$tmp920	 %read{1561,1561} %write{1560,1560}
temp	float	$tmp921	 %read{1563,1563} %write{1562,1562}
temp	float	$tmp922	 %read{1565,1565} %write{1564,1564}
temp	point	$tmp923	 %read{1568,1568} %write{1567,1567}
temp	point	$tmp924	 %read{1570,1570} %write{1569,1569}
temp	float	$tmp925	 %read{1573,1573} %write{1572,1572}
temp	int	$tmp926	 %read{1574,1574} %write{1573,1573}
temp	float	$tmp927	 %read{1576,1576} %write{1575,1575}
temp	point	$tmp928	 %read{1579,1579} %write{1578,1578}
temp	float	$tmp929	 %read{1582,1582} %write{1581,1581}
temp	int	$tmp930	 %read{1583,1583} %write{1582,1582}
temp	int	$tmp931	 %read{2147483647,-1} %write{1586,1586}
temp	int	$tmp932	 %read{2147483647,-1} %write{1588,1588}
temp	int	$tmp933	 %read{2147483647,-1} %write{1590,1590}
temp	float	$tmp934	 %read{1594,1594} %write{1593,1593}
temp	int	$tmp935	 %read{1596,1596} %write{1595,1595}
temp	float	$tmp936	 %read{1766,1766} %write{1765,1765}
temp	float	$tmp937	 %read{1603,1603} %write{1602,1602}
temp	float	$tmp938	 %read{1602,1602} %write{1601,1601}
temp	float	$tmp939	 %read{1606,1606} %write{1605,1605}
temp	float	$tmp940	 %read{1605,1605} %write{1604,1604}
temp	float	$tmp941	 %read{1609,1609} %write{1608,1608}
temp	float	$tmp942	 %read{1608,1608} %write{1607,1607}
temp	int	$tmp943	 %read{1617,1617} %write{1616,1616}
temp	int	$tmp944	 %read{1614,1764} %write{1614,1764}
temp	int	$tmp945	 %read{1621,1621} %write{1620,1620}
temp	int	$tmp946	 %read{1618,1762} %write{1618,1762}
temp	int	$tmp947	 %read{1625,1625} %write{1624,1624}
temp	int	$tmp948	 %read{1622,1760} %write{1622,1760}
temp	float	$tmp949	 %read{1629,1629} %write{1626,1626}
temp	float	$tmp950	 %read{1629,1629} %write{1627,1627}
temp	float	$tmp951	 %read{1629,1629} %write{1628,1628}
temp	color	$tmp952	 %read{1643,1643} %write{1642,1642}
temp	point	$tmp953	 %read{1636,1636} %write{1635,1635}
temp	float	$tmp954	 %read{1635,1635} %write{1632,1632}
temp	float	$tmp955	 %read{1635,1635} %write{1633,1633}
temp	float	$tmp956	 %read{1635,1635} %write{1634,1634}
temp	point	$tmp957	 %read{1641,1641} %write{1640,1640}
temp	float	$tmp958	 %read{1640,1640} %write{1637,1637}
temp	float	$tmp959	 %read{1640,1640} %write{1638,1638}
temp	float	$tmp960	 %read{1640,1640} %write{1639,1639}
temp	point	$tmp961	 %read{1645,1645} %write{1644,1644}
temp	int	$tmp962	 %read{1649,1649} %write{1648,1648}
temp	int	$tmp963	 %read{1652,1652} %write{1651,1651}
temp	int	$tmp964	 %read{1655,1655} %write{1654,1654}
temp	float	$tmp965	 %read{1660,1660} %write{1657,1657}
temp	float	$tmp966	 %read{1657,1657} %write{1656,1656}
temp	float	$tmp967	 %read{1660,1660} %write{1659,1659}
temp	float	$tmp968	 %read{1659,1659} %write{1658,1658}
temp	float	$tmp969	 %read{1663,1663} %write{1660,1660}
temp	float	$tmp970	 %read{1663,1663} %write{1662,1662}
temp	float	$tmp971	 %read{1662,1662} %write{1661,1661}
temp	int	$tmp972	 %read{1665,1665} %write{1664,1664}
temp	float	$tmp973	 %read{1673,1673} %write{1667,1667}
temp	float	$tmp974	 %read{1667,1667} %write{1666,1666}
temp	float	$tmp975	 %read{1673,1673} %write{1672,1672}
temp	float	$tmp976	 %read{1672,1672} %write{1669,1669}
temp	float	$tmp977	 %read{1669,1669} %write{1668,1668}
temp	float	$tmp978	 %read{1672,1672} %write{1671,1671}
temp	float	$tmp979	 %read{1671,1671} %write{1670,1670}
temp	int	$tmp980	 %read{1675,1675} %write{1674,1674}
temp	float	$tmp981	 %read{1682,1682} %write{1678,1678}
temp	float	$tmp982	 %read{1678,1678} %write{1677,1677}
temp	float	$tmp983	 %read{1677,1677} %write{1676,1676}
temp	float	$tmp984	 %read{1682,1682} %write{1681,1681}
temp	float	$tmp985	 %read{1681,1681} %write{1680,1680}
temp	float	$tmp986	 %read{1680,1680} %write{1679,1679}
temp	float	$tmp987	 %read{1686,1686} %write{1682,1682}
temp	float	$tmp988	 %read{1686,1686} %write{1685,1685}
temp	float	$tmp989	 %read{1685,1685} %write{1684,1684}
temp	float	$tmp990	 %read{1684,1684} %write{1683,1683}
temp	int	$tmp991	 %read{1688,1688} %write{1687,1687}
temp	float	$tmp992	 %read{1693,1693} %write{1692,1692}
temp	float	$tmp993	 %read{1692,1692} %write{1691,1691}
temp	vector	$tmp994	 %read{1691,1691} %write{1689,1689}
temp	vector	$tmp995	 %read{1691,1691} %write{1690,1690}
temp	int	$tmp996	 %read{1695,1695} %write{1694,1694}
temp	float	$tmp997	 %read{1702,1702} %write{1698,1698}
temp	float	$tmp998	 %read{1698,1698} %write{1697,1697}
temp	float	$tmp999	 %read{1697,1697} %write{1696,1696}
temp	float	$tmp1000	 %read{1702,1702} %write{1701,1701}
temp	float	$tmp1001	 %read{1701,1701} %write{1700,1700}
temp	float	$tmp1002	 %read{1700,1700} %write{1699,1699}
temp	float	$tmp1003	 %read{1706,1706} %write{1702,1702}
temp	float	$tmp1004	 %read{1706,1706} %write{1705,1705}
temp	float	$tmp1005	 %read{1705,1705} %write{1704,1704}
temp	float	$tmp1006	 %read{1704,1704} %write{1703,1703}
temp	float	$tmp1007	 %read{1708,1708} %write{1706,1706}
temp	float	$tmp1008	 %read{1708,1708} %write{1707,1707}
temp	point	$tmp1009	 %read{1714,1714} %write{1713,1713}
temp	float	$tmp1010	 %read{1713,1713} %write{1710,1710}
temp	float	$tmp1011	 %read{1713,1713} %write{1711,1711}
temp	float	$tmp1012	 %read{1713,1713} %write{1712,1712}
temp	float	$tmp1013	 %read{1716,1716} %write{1715,1715}
temp	int	$tmp1014	 %read{1717,1717} %write{1716,1716}
temp	float	$tmp1015	 %read{1719,1719} %write{1718,1718}
temp	float	$tmp1016	 %read{1721,1721} %write{1720,1720}
temp	float	$tmp1017	 %read{1723,1723} %write{1722,1722}
temp	point	$tmp1018	 %read{1726,1726} %write{1725,1725}
temp	point	$tmp1019	 %read{1728,1728} %write{1727,1727}
temp	point	$tmp1020	 %read{1730,1730} %write{1729,1729}
temp	float	$tmp1021	 %read{1733,1733} %write{1732,1732}
temp	int	$tmp1022	 %read{1734,1734} %write{1733,1733}
temp	float	$tmp1023	 %read{1736,1736} %write{1735,1735}
temp	float	$tmp1024	 %read{1738,1738} %write{1737,1737}
temp	point	$tmp1025	 %read{1741,1741} %write{1740,1740}
temp	point	$tmp1026	 %read{1743,1743} %write{1742,1742}
temp	float	$tmp1027	 %read{1746,1746} %write{1745,1745}
temp	int	$tmp1028	 %read{1747,1747} %write{1746,1746}
temp	float	$tmp1029	 %read{1749,1749} %write{1748,1748}
temp	point	$tmp1030	 %read{1752,1752} %write{1751,1751}
temp	float	$tmp1031	 %read{1755,1755} %write{1754,1754}
temp	int	$tmp1032	 %read{1756,1756} %write{1755,1755}
temp	int	$tmp1033	 %read{2147483647,-1} %write{1759,1759}
temp	int	$tmp1034	 %read{2147483647,-1} %write{1761,1761}
temp	int	$tmp1035	 %read{2147483647,-1} %write{1763,1763}
temp	float	$tmp1036	 %read{1767,1767} %write{1766,1766}
temp	int	$tmp1037	 %read{1769,1769} %write{1768,1768}
temp	float	$tmp1038	 %read{1941,1941} %write{1940,1940}
temp	float	$tmp1039	 %read{1776,1776} %write{1775,1775}
temp	float	$tmp1040	 %read{1775,1775} %write{1774,1774}
temp	float	$tmp1041	 %read{1779,1779} %write{1778,1778}
temp	float	$tmp1042	 %read{1778,1778} %write{1777,1777}
temp	float	$tmp1043	 %read{1782,1782} %write{1781,1781}
temp	float	$tmp1044	 %read{1781,1781} %write{1780,1780}
temp	int	$tmp1045	 %read{1790,1790} %write{1789,1789}
temp	int	$tmp1046	 %read{1787,1937} %write{1787,1937}
temp	int	$tmp1047	 %read{1794,1794} %write{1793,1793}
temp	int	$tmp1048	 %read{1791,1935} %write{1791,1935}
temp	int	$tmp1049	 %read{1798,1798} %write{1797,1797}
temp	int	$tmp1050	 %read{1795,1933} %write{1795,1933}
temp	float	$tmp1051	 %read{1802,1802} %write{1799,1799}
temp	float	$tmp1052	 %read{1802,1802} %write{1800,1800}
temp	float	$tmp1053	 %read{1802,1802} %write{1801,1801}
temp	color	$tmp1054	 %read{1816,1816} %write{1815,1815}
temp	point	$tmp1055	 %read{1809,1809} %write{1808,1808}
temp	float	$tmp1056	 %read{1808,1808} %write{1805,1805}
temp	float	$tmp1057	 %read{1808,1808} %write{1806,1806}
temp	float	$tmp1058	 %read{1808,1808} %write{1807,1807}
temp	point	$tmp1059	 %read{1814,1814} %write{1813,1813}
temp	float	$tmp1060	 %read{1813,1813} %write{1810,1810}
temp	float	$tmp1061	 %read{1813,1813} %write{1811,1811}
temp	float	$tmp1062	 %read{1813,1813} %write{1812,1812}
temp	point	$tmp1063	 %read{1818,1818} %write{1817,1817}
temp	int	$tmp1064	 %read{1822,1822} %write{1821,1821}
temp	int	$tmp1065	 %read{1825,1825} %write{1824,1824}
temp	int	$tmp1066	 %read{1828,1828} %write{1827,1827}
temp	float	$tmp1067	 %read{1833,1833} %write{1830,1830}
temp	float	$tmp1068	 %read{1830,1830} %write{1829,1829}
temp	float	$tmp1069	 %read{1833,1833} %write{1832,1832}
temp	float	$tmp1070	 %read{1832,1832} %write{1831,1831}
temp	float	$tmp1071	 %read{1836,1836} %write{1833,1833}
temp	float	$tmp1072	 %read{1836,1836} %write{1835,1835}
temp	float	$tmp1073	 %read{1835,1835} %write{1834,1834}
temp	int	$tmp1074	 %read{1838,1838} %write{1837,1837}
temp	float	$tmp1075	 %read{1846,1846} %write{1840,1840}
temp	float	$tmp1076	 %read{1840,1840} %write{1839,1839}
temp	float	$tmp1077	 %read{1846,1846} %write{1845,1845}
temp	float	$tmp1078	 %read{1845,1845} %write{1842,1842}
temp	float	$tmp1079	 %read{1842,1842} %write{1841,1841}
temp	float	$tmp1080	 %read{1845,1845} %write{1844,1844}
temp	float	$tmp1081	 %read{1844,1844} %write{1843,1843}
temp	int	$tmp1082	 %read{1848,1848} %write{1847,1847}
temp	float	$tmp1083	 %read{1855,1855} %write{1851,1851}
temp	float	$tmp1084	 %read{1851,1851} %write{1850,1850}
temp	float	$tmp1085	 %read{1850,1850} %write{1849,1849}
temp	float	$tmp1086	 %read{1855,1855} %write{1854,1854}
temp	float	$tmp1087	 %read{1854,1854} %write{1853,1853}
temp	float	$tmp1088	 %read{1853,1853} %write{1852,1852}
temp	float	$tmp1089	 %read{1859,1859} %write{1855,1855}
temp	float	$tmp1090	 %read{1859,1859} %write{1858,1858}
temp	float	$tmp1091	 %read{1858,1858} %write{1857,1857}
temp	float	$tmp1092	 %read{1857,1857} %write{1856,1856}
temp	int	$tmp1093	 %read{1861,1861} %write{1860,1860}
temp	float	$tmp1094	 %read{1866,1866} %write{1865,1865}
temp	float	$tmp1095	 %read{1865,1865} %write{1864,1864}
temp	vector	$tmp1096	 %read{1864,1864} %write{1862,1862}
temp	vector	$tmp1097	 %read{1864,1864} %write{1863,1863}
temp	int	$tmp1098	 %read{1868,1868} %write{1867,1867}
temp	float	$tmp1099	 %read{1875,1875} %write{1871,1871}
temp	float	$tmp1100	 %read{1871,1871} %write{1870,1870}
temp	float	$tmp1101	 %read{1870,1870} %write{1869,1869}
temp	float	$tmp1102	 %read{1875,1875} %write{1874,1874}
temp	float	$tmp1103	 %read{1874,1874} %write{1873,1873}
temp	float	$tmp1104	 %read{1873,1873} %write{1872,1872}
temp	float	$tmp1105	 %read{1879,1879} %write{1875,1875}
temp	float	$tmp1106	 %read{1879,1879} %write{1878,1878}
temp	float	$tmp1107	 %read{1878,1878} %write{1877,1877}
temp	float	$tmp1108	 %read{1877,1877} %write{1876,1876}
temp	float	$tmp1109	 %read{1881,1881} %write{1879,1879}
temp	float	$tmp1110	 %read{1881,1881} %write{1880,1880}
temp	point	$tmp1111	 %read{1887,1887} %write{1886,1886}
temp	float	$tmp1112	 %read{1886,1886} %write{1883,1883}
temp	float	$tmp1113	 %read{1886,1886} %write{1884,1884}
temp	float	$tmp1114	 %read{1886,1886} %write{1885,1885}
temp	float	$tmp1115	 %read{1889,1889} %write{1888,1888}
temp	int	$tmp1116	 %read{1890,1890} %write{1889,1889}
temp	float	$tmp1117	 %read{1892,1892} %write{1891,1891}
temp	float	$tmp1118	 %read{1894,1894} %write{1893,1893}
temp	float	$tmp1119	 %read{1896,1896} %write{1895,1895}
temp	point	$tmp1120	 %read{1899,1899} %write{1898,1898}
temp	point	$tmp1121	 %read{1901,1901} %write{1900,1900}
temp	point	$tmp1122	 %read{1903,1903} %write{1902,1902}
temp	float	$tmp1123	 %read{1906,1906} %write{1905,1905}
temp	int	$tmp1124	 %read{1907,1907} %write{1906,1906}
temp	float	$tmp1125	 %read{1909,1909} %write{1908,1908}
temp	float	$tmp1126	 %read{1911,1911} %write{1910,1910}
temp	point	$tmp1127	 %read{1914,1914} %write{1913,1913}
temp	point	$tmp1128	 %read{1916,1916} %write{1915,1915}
temp	float	$tmp1129	 %read{1919,1919} %write{1918,1918}
temp	int	$tmp1130	 %read{1920,1920} %write{1919,1919}
temp	float	$tmp1131	 %read{1922,1922} %write{1921,1921}
temp	point	$tmp1132	 %read{1925,1925} %write{1924,1924}
temp	float	$tmp1133	 %read{1928,1928} %write{1927,1927}
temp	int	$tmp1134	 %read{1929,1929} %write{1928,1928}
temp	int	$tmp1135	 %read{2147483647,-1} %write{1932,1932}
temp	int	$tmp1136	 %read{2147483647,-1} %write{1934,1934}
temp	int	$tmp1137	 %read{2147483647,-1} %write{1936,1936}
temp	float	$tmp1138	 %read{1940,1940} %write{1938,1938}
temp	float	$tmp1139	 %read{1940,1940} %write{1939,1939}
temp	float	$tmp1140	 %read{1942,1942} %write{1941,1941}
temp	int	$tmp1141	 %read{1944,1944} %write{1943,1943}
temp	float	$tmp1142	 %read{2123,2123} %write{2120,2121}
temp	float	$tmp1143	 %read{2117,2117} %write{2116,2116}
temp	float	$tmp1144	 %read{1952,1952} %write{1951,1951}
temp	float	$tmp1145	 %read{1951,1951} %write{1950,1950}
temp	float	$tmp1146	 %read{1955,1955} %write{1954,1954}
temp	float	$tmp1147	 %read{1954,1954} %write{1953,1953}
temp	float	$tmp1148	 %read{1958,1958} %write{1957,1957}
temp	float	$tmp1149	 %read{1957,1957} %write{1956,1956}
temp	int	$tmp1150	 %read{1966,1966} %write{1965,1965}
temp	int	$tmp1151	 %read{1963,2113} %write{1963,2113}
temp	int	$tmp1152	 %read{1970,1970} %write{1969,1969}
temp	int	$tmp1153	 %read{1967,2111} %write{1967,2111}
temp	int	$tmp1154	 %read{1974,1974} %write{1973,1973}
temp	int	$tmp1155	 %read{1971,2109} %write{1971,2109}
temp	float	$tmp1156	 %read{1978,1978} %write{1975,1975}
temp	float	$tmp1157	 %read{1978,1978} %write{1976,1976}
temp	float	$tmp1158	 %read{1978,1978} %write{1977,1977}
temp	color	$tmp1159	 %read{1992,1992} %write{1991,1991}
temp	point	$tmp1160	 %read{1985,1985} %write{1984,1984}
temp	float	$tmp1161	 %read{1984,1984} %write{1981,1981}
temp	float	$tmp1162	 %read{1984,1984} %write{1982,1982}
temp	float	$tmp1163	 %read{1984,1984} %write{1983,1983}
temp	point	$tmp1164	 %read{1990,1990} %write{1989,1989}
temp	float	$tmp1165	 %read{1989,1989} %write{1986,1986}
temp	float	$tmp1166	 %read{1989,1989} %write{1987,1987}
temp	float	$tmp1167	 %read{1989,1989} %write{1988,1988}
temp	point	$tmp1168	 %read{1994,1994} %write{1993,1993}
temp	int	$tmp1169	 %read{1998,1998} %write{1997,1997}
temp	int	$tmp1170	 %read{2001,2001} %write{2000,2000}
temp	int	$tmp1171	 %read{2004,2004} %write{2003,2003}
temp	float	$tmp1172	 %read{2009,2009} %write{2006,2006}
temp	float	$tmp1173	 %read{2006,2006} %write{2005,2005}
temp	float	$tmp1174	 %read{2009,2009} %write{2008,2008}
temp	float	$tmp1175	 %read{2008,2008} %write{2007,2007}
temp	float	$tmp1176	 %read{2012,2012} %write{2009,2009}
temp	float	$tmp1177	 %read{2012,2012} %write{2011,2011}
temp	float	$tmp1178	 %read{2011,2011} %write{2010,2010}
temp	int	$tmp1179	 %read{2014,2014} %write{2013,2013}
temp	float	$tmp1180	 %read{2022,2022} %write{2016,2016}
temp	float	$tmp1181	 %read{2016,2016} %write{2015,2015}
temp	float	$tmp1182	 %read{2022,2022} %write{2021,2021}
temp	float	$tmp1183	 %read{2021,2021} %write{2018,2018}
temp	float	$tmp1184	 %read{2018,2018} %write{2017,2017}
temp	float	$tmp1185	 %read{2021,2021} %write{2020,2020}
temp	float	$tmp1186	 %read{2020,2020} %write{2019,2019}
temp	int	$tmp1187	 %read{2024,2024} %write{2023,2023}
temp	float	$tmp1188	 %read{2031,2031} %write{2027,2027}
temp	float	$tmp1189	 %read{2027,2027} %write{2026,2026}
temp	float	$tmp1190	 %read{2026,2026} %write{2025,2025}
temp	float	$tmp1191	 %read{2031,2031} %write{2030,2030}
temp	float	$tmp1192	 %read{2030,2030} %write{2029,2029}
temp	float	$tmp1193	 %read{2029,2029} %write{2028,2028}
temp	float	$tmp1194	 %read{2035,2035} %write{2031,2031}
temp	float	$tmp1195	 %read{2035,2035} %write{2034,2034}
temp	float	$tmp1196	 %read{2034,2034} %write{2033,2033}
temp	float	$tmp1197	 %read{2033,2033} %write{2032,2032}
temp	int	$tmp1198	 %read{2037,2037} %write{2036,2036}
temp	float	$tmp1199	 %read{2042,2042} %write{2041,2041}
temp	float	$tmp1200	 %read{2041,2041} %write{2040,2040}
temp	vector	$tmp1201	 %read{2040,2040} %write{2038,2038}
temp	vector	$tmp1202	 %read{2040,2040} %write{2039,2039}
temp	int	$tmp1203	 %read{2044,2044} %write{2043,2043}
temp	float	$tmp1204	 %read{2051,2051} %write{2047,2047}
temp	float	$tmp1205	 %read{2047,2047} %write{2046,2046}
temp	float	$tmp1206	 %read{2046,2046} %write{2045,2045}
temp	float	$tmp1207	 %read{2051,2051} %write{2050,2050}
temp	float	$tmp1208	 %read{2050,2050} %write{2049,2049}
temp	float	$tmp1209	 %read{2049,2049} %write{2048,2048}
temp	float	$tmp1210	 %read{2055,2055} %write{2051,2051}
temp	float	$tmp1211	 %read{2055,2055} %write{2054,2054}
temp	float	$tmp1212	 %read{2054,2054} %write{2053,2053}
temp	float	$tmp1213	 %read{2053,2053} %write{2052,2052}
temp	float	$tmp1214	 %read{2057,2057} %write{2055,2055}
temp	float	$tmp1215	 %read{2057,2057} %write{2056,2056}
temp	point	$tmp1216	 %read{2063,2063} %write{2062,2062}
temp	float	$tmp1217	 %read{2062,2062} %write{2059,2059}
temp	float	$tmp1218	 %read{2062,2062} %write{2060,2060}
temp	float	$tmp1219	 %read{2062,2062} %write{2061,2061}
temp	float	$tmp1220	 %read{2065,2065} %write{2064,2064}
temp	int	$tmp1221	 %read{2066,2066} %write{2065,2065}
temp	float	$tmp1222	 %read{2068,2068} %write{2067,2067}
temp	float	$tmp1223	 %read{2070,2070} %write{2069,2069}
temp	float	$tmp1224	 %read{2072,2072} %write{2071,2071}
temp	point	$tmp1225	 %read{2075,2075} %write{2074,2074}
temp	point	$tmp1226	 %read{2077,2077} %write{2076,2076}
temp	point	$tmp1227	 %read{2079,2079} %write{2078,2078}
temp	float	$tmp1228	 %read{2082,2082} %write{2081,2081}
temp	int	$tmp1229	 %read{2083,2083} %write{2082,2082}
temp	float	$tmp1230	 %read{2085,2085} %write{2084,2084}
temp	float	$tmp1231	 %read{2087,2087} %write{2086,2086}
temp	point	$tmp1232	 %read{2090,2090} %write{2089,2089}
temp	point	$tmp1233	 %read{2092,2092} %write{2091,2091}
temp	float	$tmp1234	 %read{2095,2095} %write{2094,2094}
temp	int	$tmp1235	 %read{2096,2096} %write{2095,2095}
temp	float	$tmp1236	 %read{2098,2098} %write{2097,2097}
temp	point	$tmp1237	 %read{2101,2101} %write{2100,2100}
temp	float	$tmp1238	 %read{2104,2104} %write{2103,2103}
temp	int	$tmp1239	 %read{2105,2105} %write{2104,2104}
temp	int	$tmp1240	 %read{2147483647,-1} %write{2108,2108}
temp	int	$tmp1241	 %read{2147483647,-1} %write{2110,2110}
temp	int	$tmp1242	 %read{2147483647,-1} %write{2112,2112}
temp	float	$tmp1243	 %read{2116,2116} %write{2114,2114}
temp	float	$tmp1244	 %read{2116,2116} %write{2115,2115}
temp	int	$tmp1245	 %read{2119,2119} %write{2118,2118}
temp	float	$tmp1246	 %read{2124,2124} %write{2123,2123}
temp	int	$tmp1247	 %read{2126,2126} %write{2125,2125}
temp	float	$tmp1248	 %read{2130,2130} %write{2129,2129}
temp	float	$tmp1249	 %read{3190,3190} %write{3189,3189}
temp	vector	$tmp1251	 %read{2136,3188} %write{2131,3174}
temp	int	$tmp1252	 %read{2135,2135} %write{2134,2134}
temp	int	$tmp1253	 %read{2138,2138} %write{2137,2137}
temp	float	$tmp1254	 %read{2308,2308} %write{2307,2307}
temp	float	$tmp1255	 %read{2145,2145} %write{2144,2144}
temp	float	$tmp1256	 %read{2144,2144} %write{2143,2143}
temp	float	$tmp1257	 %read{2148,2148} %write{2147,2147}
temp	float	$tmp1258	 %read{2147,2147} %write{2146,2146}
temp	float	$tmp1259	 %read{2151,2151} %write{2150,2150}
temp	float	$tmp1260	 %read{2150,2150} %write{2149,2149}
temp	int	$tmp1261	 %read{2159,2159} %write{2158,2158}
temp	int	$tmp1262	 %read{2156,2306} %write{2156,2306}
temp	int	$tmp1263	 %read{2163,2163} %write{2162,2162}
temp	int	$tmp1264	 %read{2160,2304} %write{2160,2304}
temp	int	$tmp1265	 %read{2167,2167} %write{2166,2166}
temp	int	$tmp1266	 %read{2164,2302} %write{2164,2302}
temp	float	$tmp1267	 %read{2171,2171} %write{2168,2168}
temp	float	$tmp1268	 %read{2171,2171} %write{2169,2169}
temp	float	$tmp1269	 %read{2171,2171} %write{2170,2170}
temp	color	$tmp1270	 %read{2185,2185} %write{2184,2184}
temp	point	$tmp1271	 %read{2178,2178} %write{2177,2177}
temp	float	$tmp1272	 %read{2177,2177} %write{2174,2174}
temp	float	$tmp1273	 %read{2177,2177} %write{2175,2175}
temp	float	$tmp1274	 %read{2177,2177} %write{2176,2176}
temp	point	$tmp1275	 %read{2183,2183} %write{2182,2182}
temp	float	$tmp1276	 %read{2182,2182} %write{2179,2179}
temp	float	$tmp1277	 %read{2182,2182} %write{2180,2180}
temp	float	$tmp1278	 %read{2182,2182} %write{2181,2181}
temp	point	$tmp1279	 %read{2187,2187} %write{2186,2186}
temp	int	$tmp1280	 %read{2191,2191} %write{2190,2190}
temp	int	$tmp1281	 %read{2194,2194} %write{2193,2193}
temp	int	$tmp1282	 %read{2197,2197} %write{2196,2196}
temp	float	$tmp1283	 %read{2202,2202} %write{2199,2199}
temp	float	$tmp1284	 %read{2199,2199} %write{2198,2198}
temp	float	$tmp1285	 %read{2202,2202} %write{2201,2201}
temp	float	$tmp1286	 %read{2201,2201} %write{2200,2200}
temp	float	$tmp1287	 %read{2205,2205} %write{2202,2202}
temp	float	$tmp1288	 %read{2205,2205} %write{2204,2204}
temp	float	$tmp1289	 %read{2204,2204} %write{2203,2203}
temp	int	$tmp1290	 %read{2207,2207} %write{2206,2206}
temp	float	$tmp1291	 %read{2215,2215} %write{2209,2209}
temp	float	$tmp1292	 %read{2209,2209} %write{2208,2208}
temp	float	$tmp1293	 %read{2215,2215} %write{2214,2214}
temp	float	$tmp1294	 %read{2214,2214} %write{2211,2211}
temp	float	$tmp1295	 %read{2211,2211} %write{2210,2210}
temp	float	$tmp1296	 %read{2214,2214} %write{2213,2213}
temp	float	$tmp1297	 %read{2213,2213} %write{2212,2212}
temp	int	$tmp1298	 %read{2217,2217} %write{2216,2216}
temp	float	$tmp1299	 %read{2224,2224} %write{2220,2220}
temp	float	$tmp1300	 %read{2220,2220} %write{2219,2219}
temp	float	$tmp1301	 %read{2219,2219} %write{2218,2218}
temp	float	$tmp1302	 %read{2224,2224} %write{2223,2223}
temp	float	$tmp1303	 %read{2223,2223} %write{2222,2222}
temp	float	$tmp1304	 %read{2222,2222} %write{2221,2221}
temp	float	$tmp1305	 %read{2228,2228} %write{2224,2224}
temp	float	$tmp1306	 %read{2228,2228} %write{2227,2227}
temp	float	$tmp1307	 %read{2227,2227} %write{2226,2226}
temp	float	$tmp1308	 %read{2226,2226} %write{2225,2225}
temp	int	$tmp1309	 %read{2230,2230} %write{2229,2229}
temp	float	$tmp1310	 %read{2235,2235} %write{2234,2234}
temp	float	$tmp1311	 %read{2234,2234} %write{2233,2233}
temp	vector	$tmp1312	 %read{2233,2233} %write{2231,2231}
temp	vector	$tmp1313	 %read{2233,2233} %write{2232,2232}
temp	int	$tmp1314	 %read{2237,2237} %write{2236,2236}
temp	float	$tmp1315	 %read{2244,2244} %write{2240,2240}
temp	float	$tmp1316	 %read{2240,2240} %write{2239,2239}
temp	float	$tmp1317	 %read{2239,2239} %write{2238,2238}
temp	float	$tmp1318	 %read{2244,2244} %write{2243,2243}
temp	float	$tmp1319	 %read{2243,2243} %write{2242,2242}
temp	float	$tmp1320	 %read{2242,2242} %write{2241,2241}
temp	float	$tmp1321	 %read{2248,2248} %write{2244,2244}
temp	float	$tmp1322	 %read{2248,2248} %write{2247,2247}
temp	float	$tmp1323	 %read{2247,2247} %write{2246,2246}
temp	float	$tmp1324	 %read{2246,2246} %write{2245,2245}
temp	float	$tmp1325	 %read{2250,2250} %write{2248,2248}
temp	float	$tmp1326	 %read{2250,2250} %write{2249,2249}
temp	point	$tmp1327	 %read{2256,2256} %write{2255,2255}
temp	float	$tmp1328	 %read{2255,2255} %write{2252,2252}
temp	float	$tmp1329	 %read{2255,2255} %write{2253,2253}
temp	float	$tmp1330	 %read{2255,2255} %write{2254,2254}
temp	float	$tmp1331	 %read{2258,2258} %write{2257,2257}
temp	int	$tmp1332	 %read{2259,2259} %write{2258,2258}
temp	float	$tmp1333	 %read{2261,2261} %write{2260,2260}
temp	float	$tmp1334	 %read{2263,2263} %write{2262,2262}
temp	float	$tmp1335	 %read{2265,2265} %write{2264,2264}
temp	point	$tmp1336	 %read{2268,2268} %write{2267,2267}
temp	point	$tmp1337	 %read{2270,2270} %write{2269,2269}
temp	point	$tmp1338	 %read{2272,2272} %write{2271,2271}
temp	float	$tmp1339	 %read{2275,2275} %write{2274,2274}
temp	int	$tmp1340	 %read{2276,2276} %write{2275,2275}
temp	float	$tmp1341	 %read{2278,2278} %write{2277,2277}
temp	float	$tmp1342	 %read{2280,2280} %write{2279,2279}
temp	point	$tmp1343	 %read{2283,2283} %write{2282,2282}
temp	point	$tmp1344	 %read{2285,2285} %write{2284,2284}
temp	float	$tmp1345	 %read{2288,2288} %write{2287,2287}
temp	int	$tmp1346	 %read{2289,2289} %write{2288,2288}
temp	float	$tmp1347	 %read{2291,2291} %write{2290,2290}
temp	point	$tmp1348	 %read{2294,2294} %write{2293,2293}
temp	float	$tmp1349	 %read{2297,2297} %write{2296,2296}
temp	int	$tmp1350	 %read{2298,2298} %write{2297,2297}
temp	int	$tmp1351	 %read{2147483647,-1} %write{2301,2301}
temp	int	$tmp1352	 %read{2147483647,-1} %write{2303,2303}
temp	int	$tmp1353	 %read{2147483647,-1} %write{2305,2305}
temp	float	$tmp1354	 %read{2309,2309} %write{2308,2308}
temp	int	$tmp1355	 %read{2311,2311} %write{2310,2310}
temp	float	$tmp1356	 %read{2481,2481} %write{2480,2480}
temp	float	$tmp1357	 %read{2318,2318} %write{2317,2317}
temp	float	$tmp1358	 %read{2317,2317} %write{2316,2316}
temp	float	$tmp1359	 %read{2321,2321} %write{2320,2320}
temp	float	$tmp1360	 %read{2320,2320} %write{2319,2319}
temp	float	$tmp1361	 %read{2324,2324} %write{2323,2323}
temp	float	$tmp1362	 %read{2323,2323} %write{2322,2322}
temp	int	$tmp1363	 %read{2332,2332} %write{2331,2331}
temp	int	$tmp1364	 %read{2329,2479} %write{2329,2479}
temp	int	$tmp1365	 %read{2336,2336} %write{2335,2335}
temp	int	$tmp1366	 %read{2333,2477} %write{2333,2477}
temp	int	$tmp1367	 %read{2340,2340} %write{2339,2339}
temp	int	$tmp1368	 %read{2337,2475} %write{2337,2475}
temp	float	$tmp1369	 %read{2344,2344} %write{2341,2341}
temp	float	$tmp1370	 %read{2344,2344} %write{2342,2342}
temp	float	$tmp1371	 %read{2344,2344} %write{2343,2343}
temp	color	$tmp1372	 %read{2358,2358} %write{2357,2357}
temp	point	$tmp1373	 %read{2351,2351} %write{2350,2350}
temp	float	$tmp1374	 %read{2350,2350} %write{2347,2347}
temp	float	$tmp1375	 %read{2350,2350} %write{2348,2348}
temp	float	$tmp1376	 %read{2350,2350} %write{2349,2349}
temp	point	$tmp1377	 %read{2356,2356} %write{2355,2355}
temp	float	$tmp1378	 %read{2355,2355} %write{2352,2352}
temp	float	$tmp1379	 %read{2355,2355} %write{2353,2353}
temp	float	$tmp1380	 %read{2355,2355} %write{2354,2354}
temp	point	$tmp1381	 %read{2360,2360} %write{2359,2359}
temp	int	$tmp1382	 %read{2364,2364} %write{2363,2363}
temp	int	$tmp1383	 %read{2367,2367} %write{2366,2366}
temp	int	$tmp1384	 %read{2370,2370} %write{2369,2369}
temp	float	$tmp1385	 %read{2375,2375} %write{2372,2372}
temp	float	$tmp1386	 %read{2372,2372} %write{2371,2371}
temp	float	$tmp1387	 %read{2375,2375} %write{2374,2374}
temp	float	$tmp1388	 %read{2374,2374} %write{2373,2373}
temp	float	$tmp1389	 %read{2378,2378} %write{2375,2375}
temp	float	$tmp1390	 %read{2378,2378} %write{2377,2377}
temp	float	$tmp1391	 %read{2377,2377} %write{2376,2376}
temp	int	$tmp1392	 %read{2380,2380} %write{2379,2379}
temp	float	$tmp1393	 %read{2388,2388} %write{2382,2382}
temp	float	$tmp1394	 %read{2382,2382} %write{2381,2381}
temp	float	$tmp1395	 %read{2388,2388} %write{2387,2387}
temp	float	$tmp1396	 %read{2387,2387} %write{2384,2384}
temp	float	$tmp1397	 %read{2384,2384} %write{2383,2383}
temp	float	$tmp1398	 %read{2387,2387} %write{2386,2386}
temp	float	$tmp1399	 %read{2386,2386} %write{2385,2385}
temp	int	$tmp1400	 %read{2390,2390} %write{2389,2389}
temp	float	$tmp1401	 %read{2397,2397} %write{2393,2393}
temp	float	$tmp1402	 %read{2393,2393} %write{2392,2392}
temp	float	$tmp1403	 %read{2392,2392} %write{2391,2391}
temp	float	$tmp1404	 %read{2397,2397} %write{2396,2396}
temp	float	$tmp1405	 %read{2396,2396} %write{2395,2395}
temp	float	$tmp1406	 %read{2395,2395} %write{2394,2394}
temp	float	$tmp1407	 %read{2401,2401} %write{2397,2397}
temp	float	$tmp1408	 %read{2401,2401} %write{2400,2400}
temp	float	$tmp1409	 %read{2400,2400} %write{2399,2399}
temp	float	$tmp1410	 %read{2399,2399} %write{2398,2398}
temp	int	$tmp1411	 %read{2403,2403} %write{2402,2402}
temp	float	$tmp1412	 %read{2408,2408} %write{2407,2407}
temp	float	$tmp1413	 %read{2407,2407} %write{2406,2406}
temp	vector	$tmp1414	 %read{2406,2406} %write{2404,2404}
temp	vector	$tmp1415	 %read{2406,2406} %write{2405,2405}
temp	int	$tmp1416	 %read{2410,2410} %write{2409,2409}
temp	float	$tmp1417	 %read{2417,2417} %write{2413,2413}
temp	float	$tmp1418	 %read{2413,2413} %write{2412,2412}
temp	float	$tmp1419	 %read{2412,2412} %write{2411,2411}
temp	float	$tmp1420	 %read{2417,2417} %write{2416,2416}
temp	float	$tmp1421	 %read{2416,2416} %write{2415,2415}
temp	float	$tmp1422	 %read{2415,2415} %write{2414,2414}
temp	float	$tmp1423	 %read{2421,2421} %write{2417,2417}
temp	float	$tmp1424	 %read{2421,2421} %write{2420,2420}
temp	float	$tmp1425	 %read{2420,2420} %write{2419,2419}
temp	float	$tmp1426	 %read{2419,2419} %write{2418,2418}
temp	float	$tmp1427	 %read{2423,2423} %write{2421,2421}
temp	float	$tmp1428	 %read{2423,2423} %write{2422,2422}
temp	point	$tmp1429	 %read{2429,2429} %write{2428,2428}
temp	float	$tmp1430	 %read{2428,2428} %write{2425,2425}
temp	float	$tmp1431	 %read{2428,2428} %write{2426,2426}
temp	float	$tmp1432	 %read{2428,2428} %write{2427,2427}
temp	float	$tmp1433	 %read{2431,2431} %write{2430,2430}
temp	int	$tmp1434	 %read{2432,2432} %write{2431,2431}
temp	float	$tmp1435	 %read{2434,2434} %write{2433,2433}
temp	float	$tmp1436	 %read{2436,2436} %write{2435,2435}
temp	float	$tmp1437	 %read{2438,2438} %write{2437,2437}
temp	point	$tmp1438	 %read{2441,2441} %write{2440,2440}
temp	point	$tmp1439	 %read{2443,2443} %write{2442,2442}
temp	point	$tmp1440	 %read{2445,2445} %write{2444,2444}
temp	float	$tmp1441	 %read{2448,2448} %write{2447,2447}
temp	int	$tmp1442	 %read{2449,2449} %write{2448,2448}
temp	float	$tmp1443	 %read{2451,2451} %write{2450,2450}
temp	float	$tmp1444	 %read{2453,2453} %write{2452,2452}
temp	point	$tmp1445	 %read{2456,2456} %write{2455,2455}
temp	point	$tmp1446	 %read{2458,2458} %write{2457,2457}
temp	float	$tmp1447	 %read{2461,2461} %write{2460,2460}
temp	int	$tmp1448	 %read{2462,2462} %write{2461,2461}
temp	float	$tmp1449	 %read{2464,2464} %write{2463,2463}
temp	point	$tmp1450	 %read{2467,2467} %write{2466,2466}
temp	float	$tmp1451	 %read{2470,2470} %write{2469,2469}
temp	int	$tmp1452	 %read{2471,2471} %write{2470,2470}
temp	int	$tmp1453	 %read{2147483647,-1} %write{2474,2474}
temp	int	$tmp1454	 %read{2147483647,-1} %write{2476,2476}
temp	int	$tmp1455	 %read{2147483647,-1} %write{2478,2478}
temp	float	$tmp1456	 %read{2482,2482} %write{2481,2481}
temp	int	$tmp1457	 %read{2484,2484} %write{2483,2483}
temp	float	$tmp1458	 %read{2654,2654} %write{2653,2653}
temp	float	$tmp1459	 %read{2491,2491} %write{2490,2490}
temp	float	$tmp1460	 %read{2490,2490} %write{2489,2489}
temp	float	$tmp1461	 %read{2494,2494} %write{2493,2493}
temp	float	$tmp1462	 %read{2493,2493} %write{2492,2492}
temp	float	$tmp1463	 %read{2497,2497} %write{2496,2496}
temp	float	$tmp1464	 %read{2496,2496} %write{2495,2495}
temp	int	$tmp1465	 %read{2505,2505} %write{2504,2504}
temp	int	$tmp1466	 %read{2502,2652} %write{2502,2652}
temp	int	$tmp1467	 %read{2509,2509} %write{2508,2508}
temp	int	$tmp1468	 %read{2506,2650} %write{2506,2650}
temp	int	$tmp1469	 %read{2513,2513} %write{2512,2512}
temp	int	$tmp1470	 %read{2510,2648} %write{2510,2648}
temp	float	$tmp1471	 %read{2517,2517} %write{2514,2514}
temp	float	$tmp1472	 %read{2517,2517} %write{2515,2515}
temp	float	$tmp1473	 %read{2517,2517} %write{2516,2516}
temp	color	$tmp1474	 %read{2531,2531} %write{2530,2530}
temp	point	$tmp1475	 %read{2524,2524} %write{2523,2523}
temp	float	$tmp1476	 %read{2523,2523} %write{2520,2520}
temp	float	$tmp1477	 %read{2523,2523} %write{2521,2521}
temp	float	$tmp1478	 %read{2523,2523} %write{2522,2522}
temp	point	$tmp1479	 %read{2529,2529} %write{2528,2528}
temp	float	$tmp1480	 %read{2528,2528} %write{2525,2525}
temp	float	$tmp1481	 %read{2528,2528} %write{2526,2526}
temp	float	$tmp1482	 %read{2528,2528} %write{2527,2527}
temp	point	$tmp1483	 %read{2533,2533} %write{2532,2532}
temp	int	$tmp1484	 %read{2537,2537} %write{2536,2536}
temp	int	$tmp1485	 %read{2540,2540} %write{2539,2539}
temp	int	$tmp1486	 %read{2543,2543} %write{2542,2542}
temp	float	$tmp1487	 %read{2548,2548} %write{2545,2545}
temp	float	$tmp1488	 %read{2545,2545} %write{2544,2544}
temp	float	$tmp1489	 %read{2548,2548} %write{2547,2547}
temp	float	$tmp1490	 %read{2547,2547} %write{2546,2546}
temp	float	$tmp1491	 %read{2551,2551} %write{2548,2548}
temp	float	$tmp1492	 %read{2551,2551} %write{2550,2550}
temp	float	$tmp1493	 %read{2550,2550} %write{2549,2549}
temp	int	$tmp1494	 %read{2553,2553} %write{2552,2552}
temp	float	$tmp1495	 %read{2561,2561} %write{2555,2555}
temp	float	$tmp1496	 %read{2555,2555} %write{2554,2554}
temp	float	$tmp1497	 %read{2561,2561} %write{2560,2560}
temp	float	$tmp1498	 %read{2560,2560} %write{2557,2557}
temp	float	$tmp1499	 %read{2557,2557} %write{2556,2556}
temp	float	$tmp1500	 %read{2560,2560} %write{2559,2559}
temp	float	$tmp1501	 %read{2559,2559} %write{2558,2558}
temp	int	$tmp1502	 %read{2563,2563} %write{2562,2562}
temp	float	$tmp1503	 %read{2570,2570} %write{2566,2566}
temp	float	$tmp1504	 %read{2566,2566} %write{2565,2565}
temp	float	$tmp1505	 %read{2565,2565} %write{2564,2564}
temp	float	$tmp1506	 %read{2570,2570} %write{2569,2569}
temp	float	$tmp1507	 %read{2569,2569} %write{2568,2568}
temp	float	$tmp1508	 %read{2568,2568} %write{2567,2567}
temp	float	$tmp1509	 %read{2574,2574} %write{2570,2570}
temp	float	$tmp1510	 %read{2574,2574} %write{2573,2573}
temp	float	$tmp1511	 %read{2573,2573} %write{2572,2572}
temp	float	$tmp1512	 %read{2572,2572} %write{2571,2571}
temp	int	$tmp1513	 %read{2576,2576} %write{2575,2575}
temp	float	$tmp1514	 %read{2581,2581} %write{2580,2580}
temp	float	$tmp1515	 %read{2580,2580} %write{2579,2579}
temp	vector	$tmp1516	 %read{2579,2579} %write{2577,2577}
temp	vector	$tmp1517	 %read{2579,2579} %write{2578,2578}
temp	int	$tmp1518	 %read{2583,2583} %write{2582,2582}
temp	float	$tmp1519	 %read{2590,2590} %write{2586,2586}
temp	float	$tmp1520	 %read{2586,2586} %write{2585,2585}
temp	float	$tmp1521	 %read{2585,2585} %write{2584,2584}
temp	float	$tmp1522	 %read{2590,2590} %write{2589,2589}
temp	float	$tmp1523	 %read{2589,2589} %write{2588,2588}
temp	float	$tmp1524	 %read{2588,2588} %write{2587,2587}
temp	float	$tmp1525	 %read{2594,2594} %write{2590,2590}
temp	float	$tmp1526	 %read{2594,2594} %write{2593,2593}
temp	float	$tmp1527	 %read{2593,2593} %write{2592,2592}
temp	float	$tmp1528	 %read{2592,2592} %write{2591,2591}
temp	float	$tmp1529	 %read{2596,2596} %write{2594,2594}
temp	float	$tmp1530	 %read{2596,2596} %write{2595,2595}
temp	point	$tmp1531	 %read{2602,2602} %write{2601,2601}
temp	float	$tmp1532	 %read{2601,2601} %write{2598,2598}
temp	float	$tmp1533	 %read{2601,2601} %write{2599,2599}
temp	float	$tmp1534	 %read{2601,2601} %write{2600,2600}
temp	float	$tmp1535	 %read{2604,2604} %write{2603,2603}
temp	int	$tmp1536	 %read{2605,2605} %write{2604,2604}
temp	float	$tmp1537	 %read{2607,2607} %write{2606,2606}
temp	float	$tmp1538	 %read{2609,2609} %write{2608,2608}
temp	float	$tmp1539	 %read{2611,2611} %write{2610,2610}
temp	point	$tmp1540	 %read{2614,2614} %write{2613,2613}
temp	point	$tmp1541	 %read{2616,2616} %write{2615,2615}
temp	point	$tmp1542	 %read{2618,2618} %write{2617,2617}
temp	float	$tmp1543	 %read{2621,2621} %write{2620,2620}
temp	int	$tmp1544	 %read{2622,2622} %write{2621,2621}
temp	float	$tmp1545	 %read{2624,2624} %write{2623,2623}
temp	float	$tmp1546	 %read{2626,2626} %write{2625,2625}
temp	point	$tmp1547	 %read{2629,2629} %write{2628,2628}
temp	point	$tmp1548	 %read{2631,2631} %write{2630,2630}
temp	float	$tmp1549	 %read{2634,2634} %write{2633,2633}
temp	int	$tmp1550	 %read{2635,2635} %write{2634,2634}
temp	float	$tmp1551	 %read{2637,2637} %write{2636,2636}
temp	point	$tmp1552	 %read{2640,2640} %write{2639,2639}
temp	float	$tmp1553	 %read{2643,2643} %write{2642,2642}
temp	int	$tmp1554	 %read{2644,2644} %write{2643,2643}
temp	int	$tmp1555	 %read{2147483647,-1} %write{2647,2647}
temp	int	$tmp1556	 %read{2147483647,-1} %write{2649,2649}
temp	int	$tmp1557	 %read{2147483647,-1} %write{2651,2651}
temp	float	$tmp1558	 %read{2655,2655} %write{2654,2654}
temp	int	$tmp1559	 %read{2657,2657} %write{2656,2656}
temp	float	$tmp1560	 %read{2827,2827} %write{2826,2826}
temp	float	$tmp1561	 %read{2664,2664} %write{2663,2663}
temp	float	$tmp1562	 %read{2663,2663} %write{2662,2662}
temp	float	$tmp1563	 %read{2667,2667} %write{2666,2666}
temp	float	$tmp1564	 %read{2666,2666} %write{2665,2665}
temp	float	$tmp1565	 %read{2670,2670} %write{2669,2669}
temp	float	$tmp1566	 %read{2669,2669} %write{2668,2668}
temp	int	$tmp1567	 %read{2678,2678} %write{2677,2677}
temp	int	$tmp1568	 %read{2675,2825} %write{2675,2825}
temp	int	$tmp1569	 %read{2682,2682} %write{2681,2681}
temp	int	$tmp1570	 %read{2679,2823} %write{2679,2823}
temp	int	$tmp1571	 %read{2686,2686} %write{2685,2685}
temp	int	$tmp1572	 %read{2683,2821} %write{2683,2821}
temp	float	$tmp1573	 %read{2690,2690} %write{2687,2687}
temp	float	$tmp1574	 %read{2690,2690} %write{2688,2688}
temp	float	$tmp1575	 %read{2690,2690} %write{2689,2689}
temp	color	$tmp1576	 %read{2704,2704} %write{2703,2703}
temp	point	$tmp1577	 %read{2697,2697} %write{2696,2696}
temp	float	$tmp1578	 %read{2696,2696} %write{2693,2693}
temp	float	$tmp1579	 %read{2696,2696} %write{2694,2694}
temp	float	$tmp1580	 %read{2696,2696} %write{2695,2695}
temp	point	$tmp1581	 %read{2702,2702} %write{2701,2701}
temp	float	$tmp1582	 %read{2701,2701} %write{2698,2698}
temp	float	$tmp1583	 %read{2701,2701} %write{2699,2699}
temp	float	$tmp1584	 %read{2701,2701} %write{2700,2700}
temp	point	$tmp1585	 %read{2706,2706} %write{2705,2705}
temp	int	$tmp1586	 %read{2710,2710} %write{2709,2709}
temp	int	$tmp1587	 %read{2713,2713} %write{2712,2712}
temp	int	$tmp1588	 %read{2716,2716} %write{2715,2715}
temp	float	$tmp1589	 %read{2721,2721} %write{2718,2718}
temp	float	$tmp1590	 %read{2718,2718} %write{2717,2717}
temp	float	$tmp1591	 %read{2721,2721} %write{2720,2720}
temp	float	$tmp1592	 %read{2720,2720} %write{2719,2719}
temp	float	$tmp1593	 %read{2724,2724} %write{2721,2721}
temp	float	$tmp1594	 %read{2724,2724} %write{2723,2723}
temp	float	$tmp1595	 %read{2723,2723} %write{2722,2722}
temp	int	$tmp1596	 %read{2726,2726} %write{2725,2725}
temp	float	$tmp1597	 %read{2734,2734} %write{2728,2728}
temp	float	$tmp1598	 %read{2728,2728} %write{2727,2727}
temp	float	$tmp1599	 %read{2734,2734} %write{2733,2733}
temp	float	$tmp1600	 %read{2733,2733} %write{2730,2730}
temp	float	$tmp1601	 %read{2730,2730} %write{2729,2729}
temp	float	$tmp1602	 %read{2733,2733} %write{2732,2732}
temp	float	$tmp1603	 %read{2732,2732} %write{2731,2731}
temp	int	$tmp1604	 %read{2736,2736} %write{2735,2735}
temp	float	$tmp1605	 %read{2743,2743} %write{2739,2739}
temp	float	$tmp1606	 %read{2739,2739} %write{2738,2738}
temp	float	$tmp1607	 %read{2738,2738} %write{2737,2737}
temp	float	$tmp1608	 %read{2743,2743} %write{2742,2742}
temp	float	$tmp1609	 %read{2742,2742} %write{2741,2741}
temp	float	$tmp1610	 %read{2741,2741} %write{2740,2740}
temp	float	$tmp1611	 %read{2747,2747} %write{2743,2743}
temp	float	$tmp1612	 %read{2747,2747} %write{2746,2746}
temp	float	$tmp1613	 %read{2746,2746} %write{2745,2745}
temp	float	$tmp1614	 %read{2745,2745} %write{2744,2744}
temp	int	$tmp1615	 %read{2749,2749} %write{2748,2748}
temp	float	$tmp1616	 %read{2754,2754} %write{2753,2753}
temp	float	$tmp1617	 %read{2753,2753} %write{2752,2752}
temp	vector	$tmp1618	 %read{2752,2752} %write{2750,2750}
temp	vector	$tmp1619	 %read{2752,2752} %write{2751,2751}
temp	int	$tmp1620	 %read{2756,2756} %write{2755,2755}
temp	float	$tmp1621	 %read{2763,2763} %write{2759,2759}
temp	float	$tmp1622	 %read{2759,2759} %write{2758,2758}
temp	float	$tmp1623	 %read{2758,2758} %write{2757,2757}
temp	float	$tmp1624	 %read{2763,2763} %write{2762,2762}
temp	float	$tmp1625	 %read{2762,2762} %write{2761,2761}
temp	float	$tmp1626	 %read{2761,2761} %write{2760,2760}
temp	float	$tmp1627	 %read{2767,2767} %write{2763,2763}
temp	float	$tmp1628	 %read{2767,2767} %write{2766,2766}
temp	float	$tmp1629	 %read{2766,2766} %write{2765,2765}
temp	float	$tmp1630	 %read{2765,2765} %write{2764,2764}
temp	float	$tmp1631	 %read{2769,2769} %write{2767,2767}
temp	float	$tmp1632	 %read{2769,2769} %write{2768,2768}
temp	point	$tmp1633	 %read{2775,2775} %write{2774,2774}
temp	float	$tmp1634	 %read{2774,2774} %write{2771,2771}
temp	float	$tmp1635	 %read{2774,2774} %write{2772,2772}
temp	float	$tmp1636	 %read{2774,2774} %write{2773,2773}
temp	float	$tmp1637	 %read{2777,2777} %write{2776,2776}
temp	int	$tmp1638	 %read{2778,2778} %write{2777,2777}
temp	float	$tmp1639	 %read{2780,2780} %write{2779,2779}
temp	float	$tmp1640	 %read{2782,2782} %write{2781,2781}
temp	float	$tmp1641	 %read{2784,2784} %write{2783,2783}
temp	point	$tmp1642	 %read{2787,2787} %write{2786,2786}
temp	point	$tmp1643	 %read{2789,2789} %write{2788,2788}
temp	point	$tmp1644	 %read{2791,2791} %write{2790,2790}
temp	float	$tmp1645	 %read{2794,2794} %write{2793,2793}
temp	int	$tmp1646	 %read{2795,2795} %write{2794,2794}
temp	float	$tmp1647	 %read{2797,2797} %write{2796,2796}
temp	float	$tmp1648	 %read{2799,2799} %write{2798,2798}
temp	point	$tmp1649	 %read{2802,2802} %write{2801,2801}
temp	point	$tmp1650	 %read{2804,2804} %write{2803,2803}
temp	float	$tmp1651	 %read{2807,2807} %write{2806,2806}
temp	int	$tmp1652	 %read{2808,2808} %write{2807,2807}
temp	float	$tmp1653	 %read{2810,2810} %write{2809,2809}
temp	point	$tmp1654	 %read{2813,2813} %write{2812,2812}
temp	float	$tmp1655	 %read{2816,2816} %write{2815,2815}
temp	int	$tmp1656	 %read{2817,2817} %write{2816,2816}
temp	int	$tmp1657	 %read{2147483647,-1} %write{2820,2820}
temp	int	$tmp1658	 %read{2147483647,-1} %write{2822,2822}
temp	int	$tmp1659	 %read{2147483647,-1} %write{2824,2824}
temp	float	$tmp1660	 %read{2828,2828} %write{2827,2827}
temp	int	$tmp1661	 %read{2830,2830} %write{2829,2829}
temp	float	$tmp1662	 %read{3002,3002} %write{3001,3001}
temp	float	$tmp1663	 %read{2837,2837} %write{2836,2836}
temp	float	$tmp1664	 %read{2836,2836} %write{2835,2835}
temp	float	$tmp1665	 %read{2840,2840} %write{2839,2839}
temp	float	$tmp1666	 %read{2839,2839} %write{2838,2838}
temp	float	$tmp1667	 %read{2843,2843} %write{2842,2842}
temp	float	$tmp1668	 %read{2842,2842} %write{2841,2841}
temp	int	$tmp1669	 %read{2851,2851} %write{2850,2850}
temp	int	$tmp1670	 %read{2848,2998} %write{2848,2998}
temp	int	$tmp1671	 %read{2855,2855} %write{2854,2854}
temp	int	$tmp1672	 %read{2852,2996} %write{2852,2996}
temp	int	$tmp1673	 %read{2859,2859} %write{2858,2858}
temp	int	$tmp1674	 %read{2856,2994} %write{2856,2994}
temp	float	$tmp1675	 %read{2863,2863} %write{2860,2860}
temp	float	$tmp1676	 %read{2863,2863} %write{2861,2861}
temp	float	$tmp1677	 %read{2863,2863} %write{2862,2862}
temp	color	$tmp1678	 %read{2877,2877} %write{2876,2876}
temp	point	$tmp1679	 %read{2870,2870} %write{2869,2869}
temp	float	$tmp1680	 %read{2869,2869} %write{2866,2866}
temp	float	$tmp1681	 %read{2869,2869} %write{2867,2867}
temp	float	$tmp1682	 %read{2869,2869} %write{2868,2868}
temp	point	$tmp1683	 %read{2875,2875} %write{2874,2874}
temp	float	$tmp1684	 %read{2874,2874} %write{2871,2871}
temp	float	$tmp1685	 %read{2874,2874} %write{2872,2872}
temp	float	$tmp1686	 %read{2874,2874} %write{2873,2873}
temp	point	$tmp1687	 %read{2879,2879} %write{2878,2878}
temp	int	$tmp1688	 %read{2883,2883} %write{2882,2882}
temp	int	$tmp1689	 %read{2886,2886} %write{2885,2885}
temp	int	$tmp1690	 %read{2889,2889} %write{2888,2888}
temp	float	$tmp1691	 %read{2894,2894} %write{2891,2891}
temp	float	$tmp1692	 %read{2891,2891} %write{2890,2890}
temp	float	$tmp1693	 %read{2894,2894} %write{2893,2893}
temp	float	$tmp1694	 %read{2893,2893} %write{2892,2892}
temp	float	$tmp1695	 %read{2897,2897} %write{2894,2894}
temp	float	$tmp1696	 %read{2897,2897} %write{2896,2896}
temp	float	$tmp1697	 %read{2896,2896} %write{2895,2895}
temp	int	$tmp1698	 %read{2899,2899} %write{2898,2898}
temp	float	$tmp1699	 %read{2907,2907} %write{2901,2901}
temp	float	$tmp1700	 %read{2901,2901} %write{2900,2900}
temp	float	$tmp1701	 %read{2907,2907} %write{2906,2906}
temp	float	$tmp1702	 %read{2906,2906} %write{2903,2903}
temp	float	$tmp1703	 %read{2903,2903} %write{2902,2902}
temp	float	$tmp1704	 %read{2906,2906} %write{2905,2905}
temp	float	$tmp1705	 %read{2905,2905} %write{2904,2904}
temp	int	$tmp1706	 %read{2909,2909} %write{2908,2908}
temp	float	$tmp1707	 %read{2916,2916} %write{2912,2912}
temp	float	$tmp1708	 %read{2912,2912} %write{2911,2911}
temp	float	$tmp1709	 %read{2911,2911} %write{2910,2910}
temp	float	$tmp1710	 %read{2916,2916} %write{2915,2915}
temp	float	$tmp1711	 %read{2915,2915} %write{2914,2914}
temp	float	$tmp1712	 %read{2914,2914} %write{2913,2913}
temp	float	$tmp1713	 %read{2920,2920} %write{2916,2916}
temp	float	$tmp1714	 %read{2920,2920} %write{2919,2919}
temp	float	$tmp1715	 %read{2919,2919} %write{2918,2918}
temp	float	$tmp1716	 %read{2918,2918} %write{2917,2917}
temp	int	$tmp1717	 %read{2922,2922} %write{2921,2921}
temp	float	$tmp1718	 %read{2927,2927} %write{2926,2926}
temp	float	$tmp1719	 %read{2926,2926} %write{2925,2925}
temp	vector	$tmp1720	 %read{2925,2925} %write{2923,2923}
temp	vector	$tmp1721	 %read{2925,2925} %write{2924,2924}
temp	int	$tmp1722	 %read{2929,2929} %write{2928,2928}
temp	float	$tmp1723	 %read{2936,2936} %write{2932,2932}
temp	float	$tmp1724	 %read{2932,2932} %write{2931,2931}
temp	float	$tmp1725	 %read{2931,2931} %write{2930,2930}
temp	float	$tmp1726	 %read{2936,2936} %write{2935,2935}
temp	float	$tmp1727	 %read{2935,2935} %write{2934,2934}
temp	float	$tmp1728	 %read{2934,2934} %write{2933,2933}
temp	float	$tmp1729	 %read{2940,2940} %write{2936,2936}
temp	float	$tmp1730	 %read{2940,2940} %write{2939,2939}
temp	float	$tmp1731	 %read{2939,2939} %write{2938,2938}
temp	float	$tmp1732	 %read{2938,2938} %write{2937,2937}
temp	float	$tmp1733	 %read{2942,2942} %write{2940,2940}
temp	float	$tmp1734	 %read{2942,2942} %write{2941,2941}
temp	point	$tmp1735	 %read{2948,2948} %write{2947,2947}
temp	float	$tmp1736	 %read{2947,2947} %write{2944,2944}
temp	float	$tmp1737	 %read{2947,2947} %write{2945,2945}
temp	float	$tmp1738	 %read{2947,2947} %write{2946,2946}
temp	float	$tmp1739	 %read{2950,2950} %write{2949,2949}
temp	int	$tmp1740	 %read{2951,2951} %write{2950,2950}
temp	float	$tmp1741	 %read{2953,2953} %write{2952,2952}
temp	float	$tmp1742	 %read{2955,2955} %write{2954,2954}
temp	float	$tmp1743	 %read{2957,2957} %write{2956,2956}
temp	point	$tmp1744	 %read{2960,2960} %write{2959,2959}
temp	point	$tmp1745	 %read{2962,2962} %write{2961,2961}
temp	point	$tmp1746	 %read{2964,2964} %write{2963,2963}
temp	float	$tmp1747	 %read{2967,2967} %write{2966,2966}
temp	int	$tmp1748	 %read{2968,2968} %write{2967,2967}
temp	float	$tmp1749	 %read{2970,2970} %write{2969,2969}
temp	float	$tmp1750	 %read{2972,2972} %write{2971,2971}
temp	point	$tmp1751	 %read{2975,2975} %write{2974,2974}
temp	point	$tmp1752	 %read{2977,2977} %write{2976,2976}
temp	float	$tmp1753	 %read{2980,2980} %write{2979,2979}
temp	int	$tmp1754	 %read{2981,2981} %write{2980,2980}
temp	float	$tmp1755	 %read{2983,2983} %write{2982,2982}
temp	point	$tmp1756	 %read{2986,2986} %write{2985,2985}
temp	float	$tmp1757	 %read{2989,2989} %write{2988,2988}
temp	int	$tmp1758	 %read{2990,2990} %write{2989,2989}
temp	int	$tmp1759	 %read{2147483647,-1} %write{2993,2993}
temp	int	$tmp1760	 %read{2147483647,-1} %write{2995,2995}
temp	int	$tmp1761	 %read{2147483647,-1} %write{2997,2997}
temp	float	$tmp1762	 %read{3001,3001} %write{2999,2999}
temp	float	$tmp1763	 %read{3001,3001} %write{3000,3000}
temp	float	$tmp1764	 %read{3003,3003} %write{3002,3002}
temp	int	$tmp1765	 %read{3005,3005} %write{3004,3004}
temp	float	$tmp1766	 %read{3184,3184} %write{3181,3182}
temp	float	$tmp1767	 %read{3178,3178} %write{3177,3177}
temp	float	$tmp1768	 %read{3013,3013} %write{3012,3012}
temp	float	$tmp1769	 %read{3012,3012} %write{3011,3011}
temp	float	$tmp1770	 %read{3016,3016} %write{3015,3015}
temp	float	$tmp1771	 %read{3015,3015} %write{3014,3014}
temp	float	$tmp1772	 %read{3019,3019} %write{3018,3018}
temp	float	$tmp1773	 %read{3018,3018} %write{3017,3017}
temp	int	$tmp1774	 %read{3027,3027} %write{3026,3026}
temp	int	$tmp1775	 %read{3024,3174} %write{3024,3174}
temp	int	$tmp1776	 %read{3031,3031} %write{3030,3030}
temp	int	$tmp1777	 %read{3028,3172} %write{3028,3172}
temp	int	$tmp1778	 %read{3035,3035} %write{3034,3034}
temp	int	$tmp1779	 %read{3032,3170} %write{3032,3170}
temp	float	$tmp1780	 %read{3039,3039} %write{3036,3036}
temp	float	$tmp1781	 %read{3039,3039} %write{3037,3037}
temp	float	$tmp1782	 %read{3039,3039} %write{3038,3038}
temp	color	$tmp1783	 %read{3053,3053} %write{3052,3052}
temp	point	$tmp1784	 %read{3046,3046} %write{3045,3045}
temp	float	$tmp1785	 %read{3045,3045} %write{3042,3042}
temp	float	$tmp1786	 %read{3045,3045} %write{3043,3043}
temp	float	$tmp1787	 %read{3045,3045} %write{3044,3044}
temp	point	$tmp1788	 %read{3051,3051} %write{3050,3050}
temp	float	$tmp1789	 %read{3050,3050} %write{3047,3047}
temp	float	$tmp1790	 %read{3050,3050} %write{3048,3048}
temp	float	$tmp1791	 %read{3050,3050} %write{3049,3049}
temp	point	$tmp1792	 %read{3055,3055} %write{3054,3054}
temp	int	$tmp1793	 %read{3059,3059} %write{3058,3058}
temp	int	$tmp1794	 %read{3062,3062} %write{3061,3061}
temp	int	$tmp1795	 %read{3065,3065} %write{3064,3064}
temp	float	$tmp1796	 %read{3070,3070} %write{3067,3067}
temp	float	$tmp1797	 %read{3067,3067} %write{3066,3066}
temp	float	$tmp1798	 %read{3070,3070} %write{3069,3069}
temp	float	$tmp1799	 %read{3069,3069} %write{3068,3068}
temp	float	$tmp1800	 %read{3073,3073} %write{3070,3070}
temp	float	$tmp1801	 %read{3073,3073} %write{3072,3072}
temp	float	$tmp1802	 %read{3072,3072} %write{3071,3071}
temp	int	$tmp1803	 %read{3075,3075} %write{3074,3074}
temp	float	$tmp1804	 %read{3083,3083} %write{3077,3077}
temp	float	$tmp1805	 %read{3077,3077} %write{3076,3076}
temp	float	$tmp1806	 %read{3083,3083} %write{3082,3082}
temp	float	$tmp1807	 %read{3082,3082} %write{3079,3079}
temp	float	$tmp1808	 %read{3079,3079} %write{3078,3078}
temp	float	$tmp1809	 %read{3082,3082} %write{3081,3081}
temp	float	$tmp1810	 %read{3081,3081} %write{3080,3080}
temp	int	$tmp1811	 %read{3085,3085} %write{3084,3084}
temp	float	$tmp1812	 %read{3092,3092} %write{3088,3088}
temp	float	$tmp1813	 %read{3088,3088} %write{3087,3087}
temp	float	$tmp1814	 %read{3087,3087} %write{3086,3086}
temp	float	$tmp1815	 %read{3092,3092} %write{3091,3091}
temp	float	$tmp1816	 %read{3091,3091} %write{3090,3090}
temp	float	$tmp1817	 %read{3090,3090} %write{3089,3089}
temp	float	$tmp1818	 %read{3096,3096} %write{3092,3092}
temp	float	$tmp1819	 %read{3096,3096} %write{3095,3095}
temp	float	$tmp1820	 %read{3095,3095} %write{3094,3094}
temp	float	$tmp1821	 %read{3094,3094} %write{3093,3093}
temp	int	$tmp1822	 %read{3098,3098} %write{3097,3097}
temp	float	$tmp1823	 %read{3103,3103} %write{3102,3102}
temp	float	$tmp1824	 %read{3102,3102} %write{3101,3101}
temp	vector	$tmp1825	 %read{3101,3101} %write{3099,3099}
temp	vector	$tmp1826	 %read{3101,3101} %write{3100,3100}
temp	int	$tmp1827	 %read{3105,3105} %write{3104,3104}
temp	float	$tmp1828	 %read{3112,3112} %write{3108,3108}
temp	float	$tmp1829	 %read{3108,3108} %write{3107,3107}
temp	float	$tmp1830	 %read{3107,3107} %write{3106,3106}
temp	float	$tmp1831	 %read{3112,3112} %write{3111,3111}
temp	float	$tmp1832	 %read{3111,3111} %write{3110,3110}
temp	float	$tmp1833	 %read{3110,3110} %write{3109,3109}
temp	float	$tmp1834	 %read{3116,3116} %write{3112,3112}
temp	float	$tmp1835	 %read{3116,3116} %write{3115,3115}
temp	float	$tmp1836	 %read{3115,3115} %write{3114,3114}
temp	float	$tmp1837	 %read{3114,3114} %write{3113,3113}
temp	float	$tmp1838	 %read{3118,3118} %write{3116,3116}
temp	float	$tmp1839	 %read{3118,3118} %write{3117,3117}
temp	point	$tmp1840	 %read{3124,3124} %write{3123,3123}
temp	float	$tmp1841	 %read{3123,3123} %write{3120,3120}
temp	float	$tmp1842	 %read{3123,3123} %write{3121,3121}
temp	float	$tmp1843	 %read{3123,3123} %write{3122,3122}
temp	float	$tmp1844	 %read{3126,3126} %write{3125,3125}
temp	int	$tmp1845	 %read{3127,3127} %write{3126,3126}
temp	float	$tmp1846	 %read{3129,3129} %write{3128,3128}
temp	float	$tmp1847	 %read{3131,3131} %write{3130,3130}
temp	float	$tmp1848	 %read{3133,3133} %write{3132,3132}
temp	point	$tmp1849	 %read{3136,3136} %write{3135,3135}
temp	point	$tmp1850	 %read{3138,3138} %write{3137,3137}
temp	point	$tmp1851	 %read{3140,3140} %write{3139,3139}
temp	float	$tmp1852	 %read{3143,3143} %write{3142,3142}
temp	int	$tmp1853	 %read{3144,3144} %write{3143,3143}
temp	float	$tmp1854	 %read{3146,3146} %write{3145,3145}
temp	float	$tmp1855	 %read{3148,3148} %write{3147,3147}
temp	point	$tmp1856	 %read{3151,3151} %write{3150,3150}
temp	point	$tmp1857	 %read{3153,3153} %write{3152,3152}
temp	float	$tmp1858	 %read{3156,3156} %write{3155,3155}
temp	int	$tmp1859	 %read{3157,3157} %write{3156,3156}
temp	float	$tmp1860	 %read{3159,3159} %write{3158,3158}
temp	point	$tmp1861	 %read{3162,3162} %write{3161,3161}
temp	float	$tmp1862	 %read{3165,3165} %write{3164,3164}
temp	int	$tmp1863	 %read{3166,3166} %write{3165,3165}
temp	int	$tmp1864	 %read{2147483647,-1} %write{3169,3169}
temp	int	$tmp1865	 %read{2147483647,-1} %write{3171,3171}
temp	int	$tmp1866	 %read{2147483647,-1} %write{3173,3173}
temp	float	$tmp1867	 %read{3177,3177} %write{3175,3175}
temp	float	$tmp1868	 %read{3177,3177} %write{3176,3176}
temp	int	$tmp1869	 %read{3180,3180} %write{3179,3179}
temp	float	$tmp1870	 %read{3185,3185} %write{3184,3184}
temp	int	$tmp1871	 %read{3187,3187} %write{3186,3186}
temp	float	$tmp1872	 %read{3191,3191} %write{3190,3190}
const	string	$const45	"noise_turbulence"		 %read{3193,7563} %write{2147483647,-1}
const	float	$const46	16		 %read{3198,7568} %write{2147483647,-1}
const	string	$const47	"clamp"		 %read{3197,7567} %write{2147483647,-1}
temp	float	$tmp1873	 %read{3199,3199} %write{3198,3198}
temp	int	$tmp1874	 %read{3201,4272} %write{3201,4272}
temp	point	$tmp1875	 %read{3209,4261} %write{3204,4247}
temp	int	$tmp1876	 %read{3208,3208} %write{3207,3207}
temp	int	$tmp1877	 %read{3211,3211} %write{3210,3210}
temp	float	$tmp1878	 %read{3381,3381} %write{3380,3380}
temp	float	$tmp1879	 %read{3218,3218} %write{3217,3217}
temp	float	$tmp1880	 %read{3217,3217} %write{3216,3216}
temp	float	$tmp1881	 %read{3221,3221} %write{3220,3220}
temp	float	$tmp1882	 %read{3220,3220} %write{3219,3219}
temp	float	$tmp1883	 %read{3224,3224} %write{3223,3223}
temp	float	$tmp1884	 %read{3223,3223} %write{3222,3222}
temp	int	$tmp1885	 %read{3232,3232} %write{3231,3231}
temp	int	$tmp1886	 %read{3229,3379} %write{3229,3379}
temp	int	$tmp1887	 %read{3236,3236} %write{3235,3235}
temp	int	$tmp1888	 %read{3233,3377} %write{3233,3377}
temp	int	$tmp1889	 %read{3240,3240} %write{3239,3239}
temp	int	$tmp1890	 %read{3237,3375} %write{3237,3375}
temp	float	$tmp1891	 %read{3244,3244} %write{3241,3241}
temp	float	$tmp1892	 %read{3244,3244} %write{3242,3242}
temp	float	$tmp1893	 %read{3244,3244} %write{3243,3243}
temp	color	$tmp1894	 %read{3258,3258} %write{3257,3257}
temp	point	$tmp1895	 %read{3251,3251} %write{3250,3250}
temp	float	$tmp1896	 %read{3250,3250} %write{3247,3247}
temp	float	$tmp1897	 %read{3250,3250} %write{3248,3248}
temp	float	$tmp1898	 %read{3250,3250} %write{3249,3249}
temp	point	$tmp1899	 %read{3256,3256} %write{3255,3255}
temp	float	$tmp1900	 %read{3255,3255} %write{3252,3252}
temp	float	$tmp1901	 %read{3255,3255} %write{3253,3253}
temp	float	$tmp1902	 %read{3255,3255} %write{3254,3254}
temp	point	$tmp1903	 %read{3260,3260} %write{3259,3259}
temp	int	$tmp1904	 %read{3264,3264} %write{3263,3263}
temp	int	$tmp1905	 %read{3267,3267} %write{3266,3266}
temp	int	$tmp1906	 %read{3270,3270} %write{3269,3269}
temp	float	$tmp1907	 %read{3275,3275} %write{3272,3272}
temp	float	$tmp1908	 %read{3272,3272} %write{3271,3271}
temp	float	$tmp1909	 %read{3275,3275} %write{3274,3274}
temp	float	$tmp1910	 %read{3274,3274} %write{3273,3273}
temp	float	$tmp1911	 %read{3278,3278} %write{3275,3275}
temp	float	$tmp1912	 %read{3278,3278} %write{3277,3277}
temp	float	$tmp1913	 %read{3277,3277} %write{3276,3276}
temp	int	$tmp1914	 %read{3280,3280} %write{3279,3279}
temp	float	$tmp1915	 %read{3288,3288} %write{3282,3282}
temp	float	$tmp1916	 %read{3282,3282} %write{3281,3281}
temp	float	$tmp1917	 %read{3288,3288} %write{3287,3287}
temp	float	$tmp1918	 %read{3287,3287} %write{3284,3284}
temp	float	$tmp1919	 %read{3284,3284} %write{3283,3283}
temp	float	$tmp1920	 %read{3287,3287} %write{3286,3286}
temp	float	$tmp1921	 %read{3286,3286} %write{3285,3285}
temp	int	$tmp1922	 %read{3290,3290} %write{3289,3289}
temp	float	$tmp1923	 %read{3297,3297} %write{3293,3293}
temp	float	$tmp1924	 %read{3293,3293} %write{3292,3292}
temp	float	$tmp1925	 %read{3292,3292} %write{3291,3291}
temp	float	$tmp1926	 %read{3297,3297} %write{3296,3296}
temp	float	$tmp1927	 %read{3296,3296} %write{3295,3295}
temp	float	$tmp1928	 %read{3295,3295} %write{3294,3294}
temp	float	$tmp1929	 %read{3301,3301} %write{3297,3297}
temp	float	$tmp1930	 %read{3301,3301} %write{3300,3300}
temp	float	$tmp1931	 %read{3300,3300} %write{3299,3299}
temp	float	$tmp1932	 %read{3299,3299} %write{3298,3298}
temp	int	$tmp1933	 %read{3303,3303} %write{3302,3302}
temp	float	$tmp1934	 %read{3308,3308} %write{3307,3307}
temp	float	$tmp1935	 %read{3307,3307} %write{3306,3306}
temp	vector	$tmp1936	 %read{3306,3306} %write{3304,3304}
temp	vector	$tmp1937	 %read{3306,3306} %write{3305,3305}
temp	int	$tmp1938	 %read{3310,3310} %write{3309,3309}
temp	float	$tmp1939	 %read{3317,3317} %write{3313,3313}
temp	float	$tmp1940	 %read{3313,3313} %write{3312,3312}
temp	float	$tmp1941	 %read{3312,3312} %write{3311,3311}
temp	float	$tmp1942	 %read{3317,3317} %write{3316,3316}
temp	float	$tmp1943	 %read{3316,3316} %write{3315,3315}
temp	float	$tmp1944	 %read{3315,3315} %write{3314,3314}
temp	float	$tmp1945	 %read{3321,3321} %write{3317,3317}
temp	float	$tmp1946	 %read{3321,3321} %write{3320,3320}
temp	float	$tmp1947	 %read{3320,3320} %write{3319,3319}
temp	float	$tmp1948	 %read{3319,3319} %write{3318,3318}
temp	float	$tmp1949	 %read{3323,3323} %write{3321,3321}
temp	float	$tmp1950	 %read{3323,3323} %write{3322,3322}
temp	point	$tmp1951	 %read{3329,3329} %write{3328,3328}
temp	float	$tmp1952	 %read{3328,3328} %write{3325,3325}
temp	float	$tmp1953	 %read{3328,3328} %write{3326,3326}
temp	float	$tmp1954	 %read{3328,3328} %write{3327,3327}
temp	float	$tmp1955	 %read{3331,3331} %write{3330,3330}
temp	int	$tmp1956	 %read{3332,3332} %write{3331,3331}
temp	float	$tmp1957	 %read{3334,3334} %write{3333,3333}
temp	float	$tmp1958	 %read{3336,3336} %write{3335,3335}
temp	float	$tmp1959	 %read{3338,3338} %write{3337,3337}
temp	point	$tmp1960	 %read{3341,3341} %write{3340,3340}
temp	point	$tmp1961	 %read{3343,3343} %write{3342,3342}
temp	point	$tmp1962	 %read{3345,3345} %write{3344,3344}
temp	float	$tmp1963	 %read{3348,3348} %write{3347,3347}
temp	int	$tmp1964	 %read{3349,3349} %write{3348,3348}
temp	float	$tmp1965	 %read{3351,3351} %write{3350,3350}
temp	float	$tmp1966	 %read{3353,3353} %write{3352,3352}
temp	point	$tmp1967	 %read{3356,3356} %write{3355,3355}
temp	point	$tmp1968	 %read{3358,3358} %write{3357,3357}
temp	float	$tmp1969	 %read{3361,3361} %write{3360,3360}
temp	int	$tmp1970	 %read{3362,3362} %write{3361,3361}
temp	float	$tmp1971	 %read{3364,3364} %write{3363,3363}
temp	point	$tmp1972	 %read{3367,3367} %write{3366,3366}
temp	float	$tmp1973	 %read{3370,3370} %write{3369,3369}
temp	int	$tmp1974	 %read{3371,3371} %write{3370,3370}
temp	int	$tmp1975	 %read{2147483647,-1} %write{3374,3374}
temp	int	$tmp1976	 %read{2147483647,-1} %write{3376,3376}
temp	int	$tmp1977	 %read{2147483647,-1} %write{3378,3378}
temp	float	$tmp1978	 %read{3382,3382} %write{3381,3381}
temp	int	$tmp1979	 %read{3384,3384} %write{3383,3383}
temp	float	$tmp1980	 %read{3554,3554} %write{3553,3553}
temp	float	$tmp1981	 %read{3391,3391} %write{3390,3390}
temp	float	$tmp1982	 %read{3390,3390} %write{3389,3389}
temp	float	$tmp1983	 %read{3394,3394} %write{3393,3393}
temp	float	$tmp1984	 %read{3393,3393} %write{3392,3392}
temp	float	$tmp1985	 %read{3397,3397} %write{3396,3396}
temp	float	$tmp1986	 %read{3396,3396} %write{3395,3395}
temp	int	$tmp1987	 %read{3405,3405} %write{3404,3404}
temp	int	$tmp1988	 %read{3402,3552} %write{3402,3552}
temp	int	$tmp1989	 %read{3409,3409} %write{3408,3408}
temp	int	$tmp1990	 %read{3406,3550} %write{3406,3550}
temp	int	$tmp1991	 %read{3413,3413} %write{3412,3412}
temp	int	$tmp1992	 %read{3410,3548} %write{3410,3548}
temp	float	$tmp1993	 %read{3417,3417} %write{3414,3414}
temp	float	$tmp1994	 %read{3417,3417} %write{3415,3415}
temp	float	$tmp1995	 %read{3417,3417} %write{3416,3416}
temp	color	$tmp1996	 %read{3431,3431} %write{3430,3430}
temp	point	$tmp1997	 %read{3424,3424} %write{3423,3423}
temp	float	$tmp1998	 %read{3423,3423} %write{3420,3420}
temp	float	$tmp1999	 %read{3423,3423} %write{3421,3421}
temp	float	$tmp2000	 %read{3423,3423} %write{3422,3422}
temp	point	$tmp2001	 %read{3429,3429} %write{3428,3428}
temp	float	$tmp2002	 %read{3428,3428} %write{3425,3425}
temp	float	$tmp2003	 %read{3428,3428} %write{3426,3426}
temp	float	$tmp2004	 %read{3428,3428} %write{3427,3427}
temp	point	$tmp2005	 %read{3433,3433} %write{3432,3432}
temp	int	$tmp2006	 %read{3437,3437} %write{3436,3436}
temp	int	$tmp2007	 %read{3440,3440} %write{3439,3439}
temp	int	$tmp2008	 %read{3443,3443} %write{3442,3442}
temp	float	$tmp2009	 %read{3448,3448} %write{3445,3445}
temp	float	$tmp2010	 %read{3445,3445} %write{3444,3444}
temp	float	$tmp2011	 %read{3448,3448} %write{3447,3447}
temp	float	$tmp2012	 %read{3447,3447} %write{3446,3446}
temp	float	$tmp2013	 %read{3451,3451} %write{3448,3448}
temp	float	$tmp2014	 %read{3451,3451} %write{3450,3450}
temp	float	$tmp2015	 %read{3450,3450} %write{3449,3449}
temp	int	$tmp2016	 %read{3453,3453} %write{3452,3452}
temp	float	$tmp2017	 %read{3461,3461} %write{3455,3455}
temp	float	$tmp2018	 %read{3455,3455} %write{3454,3454}
temp	float	$tmp2019	 %read{3461,3461} %write{3460,3460}
temp	float	$tmp2020	 %read{3460,3460} %write{3457,3457}
temp	float	$tmp2021	 %read{3457,3457} %write{3456,3456}
temp	float	$tmp2022	 %read{3460,3460} %write{3459,3459}
temp	float	$tmp2023	 %read{3459,3459} %write{3458,3458}
temp	int	$tmp2024	 %read{3463,3463} %write{3462,3462}
temp	float	$tmp2025	 %read{3470,3470} %write{3466,3466}
temp	float	$tmp2026	 %read{3466,3466} %write{3465,3465}
temp	float	$tmp2027	 %read{3465,3465} %write{3464,3464}
temp	float	$tmp2028	 %read{3470,3470} %write{3469,3469}
temp	float	$tmp2029	 %read{3469,3469} %write{3468,3468}
temp	float	$tmp2030	 %read{3468,3468} %write{3467,3467}
temp	float	$tmp2031	 %read{3474,3474} %write{3470,3470}
temp	float	$tmp2032	 %read{3474,3474} %write{3473,3473}
temp	float	$tmp2033	 %read{3473,3473} %write{3472,3472}
temp	float	$tmp2034	 %read{3472,3472} %write{3471,3471}
temp	int	$tmp2035	 %read{3476,3476} %write{3475,3475}
temp	float	$tmp2036	 %read{3481,3481} %write{3480,3480}
temp	float	$tmp2037	 %read{3480,3480} %write{3479,3479}
temp	vector	$tmp2038	 %read{3479,3479} %write{3477,3477}
temp	vector	$tmp2039	 %read{3479,3479} %write{3478,3478}
temp	int	$tmp2040	 %read{3483,3483} %write{3482,3482}
temp	float	$tmp2041	 %read{3490,3490} %write{3486,3486}
temp	float	$tmp2042	 %read{3486,3486} %write{3485,3485}
temp	float	$tmp2043	 %read{3485,3485} %write{3484,3484}
temp	float	$tmp2044	 %read{3490,3490} %write{3489,3489}
temp	float	$tmp2045	 %read{3489,3489} %write{3488,3488}
temp	float	$tmp2046	 %read{3488,3488} %write{3487,3487}
temp	float	$tmp2047	 %read{3494,3494} %write{3490,3490}
temp	float	$tmp2048	 %read{3494,3494} %write{3493,3493}
temp	float	$tmp2049	 %read{3493,3493} %write{3492,3492}
temp	float	$tmp2050	 %read{3492,3492} %write{3491,3491}
temp	float	$tmp2051	 %read{3496,3496} %write{3494,3494}
temp	float	$tmp2052	 %read{3496,3496} %write{3495,3495}
temp	point	$tmp2053	 %read{3502,3502} %write{3501,3501}
temp	float	$tmp2054	 %read{3501,3501} %write{3498,3498}
temp	float	$tmp2055	 %read{3501,3501} %write{3499,3499}
temp	float	$tmp2056	 %read{3501,3501} %write{3500,3500}
temp	float	$tmp2057	 %read{3504,3504} %write{3503,3503}
temp	int	$tmp2058	 %read{3505,3505} %write{3504,3504}
temp	float	$tmp2059	 %read{3507,3507} %write{3506,3506}
temp	float	$tmp2060	 %read{3509,3509} %write{3508,3508}
temp	float	$tmp2061	 %read{3511,3511} %write{3510,3510}
temp	point	$tmp2062	 %read{3514,3514} %write{3513,3513}
temp	point	$tmp2063	 %read{3516,3516} %write{3515,3515}
temp	point	$tmp2064	 %read{3518,3518} %write{3517,3517}
temp	float	$tmp2065	 %read{3521,3521} %write{3520,3520}
temp	int	$tmp2066	 %read{3522,3522} %write{3521,3521}
temp	float	$tmp2067	 %read{3524,3524} %write{3523,3523}
temp	float	$tmp2068	 %read{3526,3526} %write{3525,3525}
temp	point	$tmp2069	 %read{3529,3529} %write{3528,3528}
temp	point	$tmp2070	 %read{3531,3531} %write{3530,3530}
temp	float	$tmp2071	 %read{3534,3534} %write{3533,3533}
temp	int	$tmp2072	 %read{3535,3535} %write{3534,3534}
temp	float	$tmp2073	 %read{3537,3537} %write{3536,3536}
temp	point	$tmp2074	 %read{3540,3540} %write{3539,3539}
temp	float	$tmp2075	 %read{3543,3543} %write{3542,3542}
temp	int	$tmp2076	 %read{3544,3544} %write{3543,3543}
temp	int	$tmp2077	 %read{2147483647,-1} %write{3547,3547}
temp	int	$tmp2078	 %read{2147483647,-1} %write{3549,3549}
temp	int	$tmp2079	 %read{2147483647,-1} %write{3551,3551}
temp	float	$tmp2080	 %read{3555,3555} %write{3554,3554}
temp	int	$tmp2081	 %read{3557,3557} %write{3556,3556}
temp	float	$tmp2082	 %read{3727,3727} %write{3726,3726}
temp	float	$tmp2083	 %read{3564,3564} %write{3563,3563}
temp	float	$tmp2084	 %read{3563,3563} %write{3562,3562}
temp	float	$tmp2085	 %read{3567,3567} %write{3566,3566}
temp	float	$tmp2086	 %read{3566,3566} %write{3565,3565}
temp	float	$tmp2087	 %read{3570,3570} %write{3569,3569}
temp	float	$tmp2088	 %read{3569,3569} %write{3568,3568}
temp	int	$tmp2089	 %read{3578,3578} %write{3577,3577}
temp	int	$tmp2090	 %read{3575,3725} %write{3575,3725}
temp	int	$tmp2091	 %read{3582,3582} %write{3581,3581}
temp	int	$tmp2092	 %read{3579,3723} %write{3579,3723}
temp	int	$tmp2093	 %read{3586,3586} %write{3585,3585}
temp	int	$tmp2094	 %read{3583,3721} %write{3583,3721}
temp	float	$tmp2095	 %read{3590,3590} %write{3587,3587}
temp	float	$tmp2096	 %read{3590,3590} %write{3588,3588}
temp	float	$tmp2097	 %read{3590,3590} %write{3589,3589}
temp	color	$tmp2098	 %read{3604,3604} %write{3603,3603}
temp	point	$tmp2099	 %read{3597,3597} %write{3596,3596}
temp	float	$tmp2100	 %read{3596,3596} %write{3593,3593}
temp	float	$tmp2101	 %read{3596,3596} %write{3594,3594}
temp	float	$tmp2102	 %read{3596,3596} %write{3595,3595}
temp	point	$tmp2103	 %read{3602,3602} %write{3601,3601}
temp	float	$tmp2104	 %read{3601,3601} %write{3598,3598}
temp	float	$tmp2105	 %read{3601,3601} %write{3599,3599}
temp	float	$tmp2106	 %read{3601,3601} %write{3600,3600}
temp	point	$tmp2107	 %read{3606,3606} %write{3605,3605}
temp	int	$tmp2108	 %read{3610,3610} %write{3609,3609}
temp	int	$tmp2109	 %read{3613,3613} %write{3612,3612}
temp	int	$tmp2110	 %read{3616,3616} %write{3615,3615}
temp	float	$tmp2111	 %read{3621,3621} %write{3618,3618}
temp	float	$tmp2112	 %read{3618,3618} %write{3617,3617}
temp	float	$tmp2113	 %read{3621,3621} %write{3620,3620}
temp	float	$tmp2114	 %read{3620,3620} %write{3619,3619}
temp	float	$tmp2115	 %read{3624,3624} %write{3621,3621}
temp	float	$tmp2116	 %read{3624,3624} %write{3623,3623}
temp	float	$tmp2117	 %read{3623,3623} %write{3622,3622}
temp	int	$tmp2118	 %read{3626,3626} %write{3625,3625}
temp	float	$tmp2119	 %read{3634,3634} %write{3628,3628}
temp	float	$tmp2120	 %read{3628,3628} %write{3627,3627}
temp	float	$tmp2121	 %read{3634,3634} %write{3633,3633}
temp	float	$tmp2122	 %read{3633,3633} %write{3630,3630}
temp	float	$tmp2123	 %read{3630,3630} %write{3629,3629}
temp	float	$tmp2124	 %read{3633,3633} %write{3632,3632}
temp	float	$tmp2125	 %read{3632,3632} %write{3631,3631}
temp	int	$tmp2126	 %read{3636,3636} %write{3635,3635}
temp	float	$tmp2127	 %read{3643,3643} %write{3639,3639}
temp	float	$tmp2128	 %read{3639,3639} %write{3638,3638}
temp	float	$tmp2129	 %read{3638,3638} %write{3637,3637}
temp	float	$tmp2130	 %read{3643,3643} %write{3642,3642}
temp	float	$tmp2131	 %read{3642,3642} %write{3641,3641}
temp	float	$tmp2132	 %read{3641,3641} %write{3640,3640}
temp	float	$tmp2133	 %read{3647,3647} %write{3643,3643}
temp	float	$tmp2134	 %read{3647,3647} %write{3646,3646}
temp	float	$tmp2135	 %read{3646,3646} %write{3645,3645}
temp	float	$tmp2136	 %read{3645,3645} %write{3644,3644}
temp	int	$tmp2137	 %read{3649,3649} %write{3648,3648}
temp	float	$tmp2138	 %read{3654,3654} %write{3653,3653}
temp	float	$tmp2139	 %read{3653,3653} %write{3652,3652}
temp	vector	$tmp2140	 %read{3652,3652} %write{3650,3650}
temp	vector	$tmp2141	 %read{3652,3652} %write{3651,3651}
temp	int	$tmp2142	 %read{3656,3656} %write{3655,3655}
temp	float	$tmp2143	 %read{3663,3663} %write{3659,3659}
temp	float	$tmp2144	 %read{3659,3659} %write{3658,3658}
temp	float	$tmp2145	 %read{3658,3658} %write{3657,3657}
temp	float	$tmp2146	 %read{3663,3663} %write{3662,3662}
temp	float	$tmp2147	 %read{3662,3662} %write{3661,3661}
temp	float	$tmp2148	 %read{3661,3661} %write{3660,3660}
temp	float	$tmp2149	 %read{3667,3667} %write{3663,3663}
temp	float	$tmp2150	 %read{3667,3667} %write{3666,3666}
temp	float	$tmp2151	 %read{3666,3666} %write{3665,3665}
temp	float	$tmp2152	 %read{3665,3665} %write{3664,3664}
temp	float	$tmp2153	 %read{3669,3669} %write{3667,3667}
temp	float	$tmp2154	 %read{3669,3669} %write{3668,3668}
temp	point	$tmp2155	 %read{3675,3675} %write{3674,3674}
temp	float	$tmp2156	 %read{3674,3674} %write{3671,3671}
temp	float	$tmp2157	 %read{3674,3674} %write{3672,3672}
temp	float	$tmp2158	 %read{3674,3674} %write{3673,3673}
temp	float	$tmp2159	 %read{3677,3677} %write{3676,3676}
temp	int	$tmp2160	 %read{3678,3678} %write{3677,3677}
temp	float	$tmp2161	 %read{3680,3680} %write{3679,3679}
temp	float	$tmp2162	 %read{3682,3682} %write{3681,3681}
temp	float	$tmp2163	 %read{3684,3684} %write{3683,3683}
temp	point	$tmp2164	 %read{3687,3687} %write{3686,3686}
temp	point	$tmp2165	 %read{3689,3689} %write{3688,3688}
temp	point	$tmp2166	 %read{3691,3691} %write{3690,3690}
temp	float	$tmp2167	 %read{3694,3694} %write{3693,3693}
temp	int	$tmp2168	 %read{3695,3695} %write{3694,3694}
temp	float	$tmp2169	 %read{3697,3697} %write{3696,3696}
temp	float	$tmp2170	 %read{3699,3699} %write{3698,3698}
temp	point	$tmp2171	 %read{3702,3702} %write{3701,3701}
temp	point	$tmp2172	 %read{3704,3704} %write{3703,3703}
temp	float	$tmp2173	 %read{3707,3707} %write{3706,3706}
temp	int	$tmp2174	 %read{3708,3708} %write{3707,3707}
temp	float	$tmp2175	 %read{3710,3710} %write{3709,3709}
temp	point	$tmp2176	 %read{3713,3713} %write{3712,3712}
temp	float	$tmp2177	 %read{3716,3716} %write{3715,3715}
temp	int	$tmp2178	 %read{3717,3717} %write{3716,3716}
temp	int	$tmp2179	 %read{2147483647,-1} %write{3720,3720}
temp	int	$tmp2180	 %read{2147483647,-1} %write{3722,3722}
temp	int	$tmp2181	 %read{2147483647,-1} %write{3724,3724}
temp	float	$tmp2182	 %read{3728,3728} %write{3727,3727}
temp	int	$tmp2183	 %read{3730,3730} %write{3729,3729}
temp	float	$tmp2184	 %read{3900,3900} %write{3899,3899}
temp	float	$tmp2185	 %read{3737,3737} %write{3736,3736}
temp	float	$tmp2186	 %read{3736,3736} %write{3735,3735}
temp	float	$tmp2187	 %read{3740,3740} %write{3739,3739}
temp	float	$tmp2188	 %read{3739,3739} %write{3738,3738}
temp	float	$tmp2189	 %read{3743,3743} %write{3742,3742}
temp	float	$tmp2190	 %read{3742,3742} %write{3741,3741}
temp	int	$tmp2191	 %read{3751,3751} %write{3750,3750}
temp	int	$tmp2192	 %read{3748,3898} %write{3748,3898}
temp	int	$tmp2193	 %read{3755,3755} %write{3754,3754}
temp	int	$tmp2194	 %read{3752,3896} %write{3752,3896}
temp	int	$tmp2195	 %read{3759,3759} %write{3758,3758}
temp	int	$tmp2196	 %read{3756,3894} %write{3756,3894}
temp	float	$tmp2197	 %read{3763,3763} %write{3760,3760}
temp	float	$tmp2198	 %read{3763,3763} %write{3761,3761}
temp	float	$tmp2199	 %read{3763,3763} %write{3762,3762}
temp	color	$tmp2200	 %read{3777,3777} %write{3776,3776}
temp	point	$tmp2201	 %read{3770,3770} %write{3769,3769}
temp	float	$tmp2202	 %read{3769,3769} %write{3766,3766}
temp	float	$tmp2203	 %read{3769,3769} %write{3767,3767}
temp	float	$tmp2204	 %read{3769,3769} %write{3768,3768}
temp	point	$tmp2205	 %read{3775,3775} %write{3774,3774}
temp	float	$tmp2206	 %read{3774,3774} %write{3771,3771}
temp	float	$tmp2207	 %read{3774,3774} %write{3772,3772}
temp	float	$tmp2208	 %read{3774,3774} %write{3773,3773}
temp	point	$tmp2209	 %read{3779,3779} %write{3778,3778}
temp	int	$tmp2210	 %read{3783,3783} %write{3782,3782}
temp	int	$tmp2211	 %read{3786,3786} %write{3785,3785}
temp	int	$tmp2212	 %read{3789,3789} %write{3788,3788}
temp	float	$tmp2213	 %read{3794,3794} %write{3791,3791}
temp	float	$tmp2214	 %read{3791,3791} %write{3790,3790}
temp	float	$tmp2215	 %read{3794,3794} %write{3793,3793}
temp	float	$tmp2216	 %read{3793,3793} %write{3792,3792}
temp	float	$tmp2217	 %read{3797,3797} %write{3794,3794}
temp	float	$tmp2218	 %read{3797,3797} %write{3796,3796}
temp	float	$tmp2219	 %read{3796,3796} %write{3795,3795}
temp	int	$tmp2220	 %read{3799,3799} %write{3798,3798}
temp	float	$tmp2221	 %read{3807,3807} %write{3801,3801}
temp	float	$tmp2222	 %read{3801,3801} %write{3800,3800}
temp	float	$tmp2223	 %read{3807,3807} %write{3806,3806}
temp	float	$tmp2224	 %read{3806,3806} %write{3803,3803}
temp	float	$tmp2225	 %read{3803,3803} %write{3802,3802}
temp	float	$tmp2226	 %read{3806,3806} %write{3805,3805}
temp	float	$tmp2227	 %read{3805,3805} %write{3804,3804}
temp	int	$tmp2228	 %read{3809,3809} %write{3808,3808}
temp	float	$tmp2229	 %read{3816,3816} %write{3812,3812}
temp	float	$tmp2230	 %read{3812,3812} %write{3811,3811}
temp	float	$tmp2231	 %read{3811,3811} %write{3810,3810}
temp	float	$tmp2232	 %read{3816,3816} %write{3815,3815}
temp	float	$tmp2233	 %read{3815,3815} %write{3814,3814}
temp	float	$tmp2234	 %read{3814,3814} %write{3813,3813}
temp	float	$tmp2235	 %read{3820,3820} %write{3816,3816}
temp	float	$tmp2236	 %read{3820,3820} %write{3819,3819}
temp	float	$tmp2237	 %read{3819,3819} %write{3818,3818}
temp	float	$tmp2238	 %read{3818,3818} %write{3817,3817}
temp	int	$tmp2239	 %read{3822,3822} %write{3821,3821}
temp	float	$tmp2240	 %read{3827,3827} %write{3826,3826}
temp	float	$tmp2241	 %read{3826,3826} %write{3825,3825}
temp	vector	$tmp2242	 %read{3825,3825} %write{3823,3823}
temp	vector	$tmp2243	 %read{3825,3825} %write{3824,3824}
temp	int	$tmp2244	 %read{3829,3829} %write{3828,3828}
temp	float	$tmp2245	 %read{3836,3836} %write{3832,3832}
temp	float	$tmp2246	 %read{3832,3832} %write{3831,3831}
temp	float	$tmp2247	 %read{3831,3831} %write{3830,3830}
temp	float	$tmp2248	 %read{3836,3836} %write{3835,3835}
temp	float	$tmp2249	 %read{3835,3835} %write{3834,3834}
temp	float	$tmp2250	 %read{3834,3834} %write{3833,3833}
temp	float	$tmp2251	 %read{3840,3840} %write{3836,3836}
temp	float	$tmp2252	 %read{3840,3840} %write{3839,3839}
temp	float	$tmp2253	 %read{3839,3839} %write{3838,3838}
temp	float	$tmp2254	 %read{3838,3838} %write{3837,3837}
temp	float	$tmp2255	 %read{3842,3842} %write{3840,3840}
temp	float	$tmp2256	 %read{3842,3842} %write{3841,3841}
temp	point	$tmp2257	 %read{3848,3848} %write{3847,3847}
temp	float	$tmp2258	 %read{3847,3847} %write{3844,3844}
temp	float	$tmp2259	 %read{3847,3847} %write{3845,3845}
temp	float	$tmp2260	 %read{3847,3847} %write{3846,3846}
temp	float	$tmp2261	 %read{3850,3850} %write{3849,3849}
temp	int	$tmp2262	 %read{3851,3851} %write{3850,3850}
temp	float	$tmp2263	 %read{3853,3853} %write{3852,3852}
temp	float	$tmp2264	 %read{3855,3855} %write{3854,3854}
temp	float	$tmp2265	 %read{3857,3857} %write{3856,3856}
temp	point	$tmp2266	 %read{3860,3860} %write{3859,3859}
temp	point	$tmp2267	 %read{3862,3862} %write{3861,3861}
temp	point	$tmp2268	 %read{3864,3864} %write{3863,3863}
temp	float	$tmp2269	 %read{3867,3867} %write{3866,3866}
temp	int	$tmp2270	 %read{3868,3868} %write{3867,3867}
temp	float	$tmp2271	 %read{3870,3870} %write{3869,3869}
temp	float	$tmp2272	 %read{3872,3872} %write{3871,3871}
temp	point	$tmp2273	 %read{3875,3875} %write{3874,3874}
temp	point	$tmp2274	 %read{3877,3877} %write{3876,3876}
temp	float	$tmp2275	 %read{3880,3880} %write{3879,3879}
temp	int	$tmp2276	 %read{3881,3881} %write{3880,3880}
temp	float	$tmp2277	 %read{3883,3883} %write{3882,3882}
temp	point	$tmp2278	 %read{3886,3886} %write{3885,3885}
temp	float	$tmp2279	 %read{3889,3889} %write{3888,3888}
temp	int	$tmp2280	 %read{3890,3890} %write{3889,3889}
temp	int	$tmp2281	 %read{2147483647,-1} %write{3893,3893}
temp	int	$tmp2282	 %read{2147483647,-1} %write{3895,3895}
temp	int	$tmp2283	 %read{2147483647,-1} %write{3897,3897}
temp	float	$tmp2284	 %read{3901,3901} %write{3900,3900}
temp	int	$tmp2285	 %read{3903,3903} %write{3902,3902}
temp	float	$tmp2286	 %read{4075,4075} %write{4074,4074}
temp	float	$tmp2287	 %read{3910,3910} %write{3909,3909}
temp	float	$tmp2288	 %read{3909,3909} %write{3908,3908}
temp	float	$tmp2289	 %read{3913,3913} %write{3912,3912}
temp	float	$tmp2290	 %read{3912,3912} %write{3911,3911}
temp	float	$tmp2291	 %read{3916,3916} %write{3915,3915}
temp	float	$tmp2292	 %read{3915,3915} %write{3914,3914}
temp	int	$tmp2293	 %read{3924,3924} %write{3923,3923}
temp	int	$tmp2294	 %read{3921,4071} %write{3921,4071}
temp	int	$tmp2295	 %read{3928,3928} %write{3927,3927}
temp	int	$tmp2296	 %read{3925,4069} %write{3925,4069}
temp	int	$tmp2297	 %read{3932,3932} %write{3931,3931}
temp	int	$tmp2298	 %read{3929,4067} %write{3929,4067}
temp	float	$tmp2299	 %read{3936,3936} %write{3933,3933}
temp	float	$tmp2300	 %read{3936,3936} %write{3934,3934}
temp	float	$tmp2301	 %read{3936,3936} %write{3935,3935}
temp	color	$tmp2302	 %read{3950,3950} %write{3949,3949}
temp	point	$tmp2303	 %read{3943,3943} %write{3942,3942}
temp	float	$tmp2304	 %read{3942,3942} %write{3939,3939}
temp	float	$tmp2305	 %read{3942,3942} %write{3940,3940}
temp	float	$tmp2306	 %read{3942,3942} %write{3941,3941}
temp	point	$tmp2307	 %read{3948,3948} %write{3947,3947}
temp	float	$tmp2308	 %read{3947,3947} %write{3944,3944}
temp	float	$tmp2309	 %read{3947,3947} %write{3945,3945}
temp	float	$tmp2310	 %read{3947,3947} %write{3946,3946}
temp	point	$tmp2311	 %read{3952,3952} %write{3951,3951}
temp	int	$tmp2312	 %read{3956,3956} %write{3955,3955}
temp	int	$tmp2313	 %read{3959,3959} %write{3958,3958}
temp	int	$tmp2314	 %read{3962,3962} %write{3961,3961}
temp	float	$tmp2315	 %read{3967,3967} %write{3964,3964}
temp	float	$tmp2316	 %read{3964,3964} %write{3963,3963}
temp	float	$tmp2317	 %read{3967,3967} %write{3966,3966}
temp	float	$tmp2318	 %read{3966,3966} %write{3965,3965}
temp	float	$tmp2319	 %read{3970,3970} %write{3967,3967}
temp	float	$tmp2320	 %read{3970,3970} %write{3969,3969}
temp	float	$tmp2321	 %read{3969,3969} %write{3968,3968}
temp	int	$tmp2322	 %read{3972,3972} %write{3971,3971}
temp	float	$tmp2323	 %read{3980,3980} %write{3974,3974}
temp	float	$tmp2324	 %read{3974,3974} %write{3973,3973}
temp	float	$tmp2325	 %read{3980,3980} %write{3979,3979}
temp	float	$tmp2326	 %read{3979,3979} %write{3976,3976}
temp	float	$tmp2327	 %read{3976,3976} %write{3975,3975}
temp	float	$tmp2328	 %read{3979,3979} %write{3978,3978}
temp	float	$tmp2329	 %read{3978,3978} %write{3977,3977}
temp	int	$tmp2330	 %read{3982,3982} %write{3981,3981}
temp	float	$tmp2331	 %read{3989,3989} %write{3985,3985}
temp	float	$tmp2332	 %read{3985,3985} %write{3984,3984}
temp	float	$tmp2333	 %read{3984,3984} %write{3983,3983}
temp	float	$tmp2334	 %read{3989,3989} %write{3988,3988}
temp	float	$tmp2335	 %read{3988,3988} %write{3987,3987}
temp	float	$tmp2336	 %read{3987,3987} %write{3986,3986}
temp	float	$tmp2337	 %read{3993,3993} %write{3989,3989}
temp	float	$tmp2338	 %read{3993,3993} %write{3992,3992}
temp	float	$tmp2339	 %read{3992,3992} %write{3991,3991}
temp	float	$tmp2340	 %read{3991,3991} %write{3990,3990}
temp	int	$tmp2341	 %read{3995,3995} %write{3994,3994}
temp	float	$tmp2342	 %read{4000,4000} %write{3999,3999}
temp	float	$tmp2343	 %read{3999,3999} %write{3998,3998}
temp	vector	$tmp2344	 %read{3998,3998} %write{3996,3996}
temp	vector	$tmp2345	 %read{3998,3998} %write{3997,3997}
temp	int	$tmp2346	 %read{4002,4002} %write{4001,4001}
temp	float	$tmp2347	 %read{4009,4009} %write{4005,4005}
temp	float	$tmp2348	 %read{4005,4005} %write{4004,4004}
temp	float	$tmp2349	 %read{4004,4004} %write{4003,4003}
temp	float	$tmp2350	 %read{4009,4009} %write{4008,4008}
temp	float	$tmp2351	 %read{4008,4008} %write{4007,4007}
temp	float	$tmp2352	 %read{4007,4007} %write{4006,4006}
temp	float	$tmp2353	 %read{4013,4013} %write{4009,4009}
temp	float	$tmp2354	 %read{4013,4013} %write{4012,4012}
temp	float	$tmp2355	 %read{4012,4012} %write{4011,4011}
temp	float	$tmp2356	 %read{4011,4011} %write{4010,4010}
temp	float	$tmp2357	 %read{4015,4015} %write{4013,4013}
temp	float	$tmp2358	 %read{4015,4015} %write{4014,4014}
temp	point	$tmp2359	 %read{4021,4021} %write{4020,4020}
temp	float	$tmp2360	 %read{4020,4020} %write{4017,4017}
temp	float	$tmp2361	 %read{4020,4020} %write{4018,4018}
temp	float	$tmp2362	 %read{4020,4020} %write{4019,4019}
temp	float	$tmp2363	 %read{4023,4023} %write{4022,4022}
temp	int	$tmp2364	 %read{4024,4024} %write{4023,4023}
temp	float	$tmp2365	 %read{4026,4026} %write{4025,4025}
temp	float	$tmp2366	 %read{4028,4028} %write{4027,4027}
temp	float	$tmp2367	 %read{4030,4030} %write{4029,4029}
temp	point	$tmp2368	 %read{4033,4033} %write{4032,4032}
temp	point	$tmp2369	 %read{4035,4035} %write{4034,4034}
temp	point	$tmp2370	 %read{4037,4037} %write{4036,4036}
temp	float	$tmp2371	 %read{4040,4040} %write{4039,4039}
temp	int	$tmp2372	 %read{4041,4041} %write{4040,4040}
temp	float	$tmp2373	 %read{4043,4043} %write{4042,4042}
temp	float	$tmp2374	 %read{4045,4045} %write{4044,4044}
temp	point	$tmp2375	 %read{4048,4048} %write{4047,4047}
temp	point	$tmp2376	 %read{4050,4050} %write{4049,4049}
temp	float	$tmp2377	 %read{4053,4053} %write{4052,4052}
temp	int	$tmp2378	 %read{4054,4054} %write{4053,4053}
temp	float	$tmp2379	 %read{4056,4056} %write{4055,4055}
temp	point	$tmp2380	 %read{4059,4059} %write{4058,4058}
temp	float	$tmp2381	 %read{4062,4062} %write{4061,4061}
temp	int	$tmp2382	 %read{4063,4063} %write{4062,4062}
temp	int	$tmp2383	 %read{2147483647,-1} %write{4066,4066}
temp	int	$tmp2384	 %read{2147483647,-1} %write{4068,4068}
temp	int	$tmp2385	 %read{2147483647,-1} %write{4070,4070}
temp	float	$tmp2386	 %read{4074,4074} %write{4072,4072}
temp	float	$tmp2387	 %read{4074,4074} %write{4073,4073}
temp	float	$tmp2388	 %read{4076,4076} %write{4075,4075}
temp	int	$tmp2389	 %read{4078,4078} %write{4077,4077}
temp	float	$tmp2390	 %read{4257,4257} %write{4254,4255}
temp	float	$tmp2391	 %read{4251,4251} %write{4250,4250}
temp	float	$tmp2392	 %read{4086,4086} %write{4085,4085}
temp	float	$tmp2393	 %read{4085,4085} %write{4084,4084}
temp	float	$tmp2394	 %read{4089,4089} %write{4088,4088}
temp	float	$tmp2395	 %read{4088,4088} %write{4087,4087}
temp	float	$tmp2396	 %read{4092,4092} %write{4091,4091}
temp	float	$tmp2397	 %read{4091,4091} %write{4090,4090}
temp	int	$tmp2398	 %read{4100,4100} %write{4099,4099}
temp	int	$tmp2399	 %read{4097,4247} %write{4097,4247}
temp	int	$tmp2400	 %read{4104,4104} %write{4103,4103}
temp	int	$tmp2401	 %read{4101,4245} %write{4101,4245}
temp	int	$tmp2402	 %read{4108,4108} %write{4107,4107}
temp	int	$tmp2403	 %read{4105,4243} %write{4105,4243}
temp	float	$tmp2404	 %read{4112,4112} %write{4109,4109}
temp	float	$tmp2405	 %read{4112,4112} %write{4110,4110}
temp	float	$tmp2406	 %read{4112,4112} %write{4111,4111}
temp	color	$tmp2407	 %read{4126,4126} %write{4125,4125}
temp	point	$tmp2408	 %read{4119,4119} %write{4118,4118}
temp	float	$tmp2409	 %read{4118,4118} %write{4115,4115}
temp	float	$tmp2410	 %read{4118,4118} %write{4116,4116}
temp	float	$tmp2411	 %read{4118,4118} %write{4117,4117}
temp	point	$tmp2412	 %read{4124,4124} %write{4123,4123}
temp	float	$tmp2413	 %read{4123,4123} %write{4120,4120}
temp	float	$tmp2414	 %read{4123,4123} %write{4121,4121}
temp	float	$tmp2415	 %read{4123,4123} %write{4122,4122}
temp	point	$tmp2416	 %read{4128,4128} %write{4127,4127}
temp	int	$tmp2417	 %read{4132,4132} %write{4131,4131}
temp	int	$tmp2418	 %read{4135,4135} %write{4134,4134}
temp	int	$tmp2419	 %read{4138,4138} %write{4137,4137}
temp	float	$tmp2420	 %read{4143,4143} %write{4140,4140}
temp	float	$tmp2421	 %read{4140,4140} %write{4139,4139}
temp	float	$tmp2422	 %read{4143,4143} %write{4142,4142}
temp	float	$tmp2423	 %read{4142,4142} %write{4141,4141}
temp	float	$tmp2424	 %read{4146,4146} %write{4143,4143}
temp	float	$tmp2425	 %read{4146,4146} %write{4145,4145}
temp	float	$tmp2426	 %read{4145,4145} %write{4144,4144}
temp	int	$tmp2427	 %read{4148,4148} %write{4147,4147}
temp	float	$tmp2428	 %read{4156,4156} %write{4150,4150}
temp	float	$tmp2429	 %read{4150,4150} %write{4149,4149}
temp	float	$tmp2430	 %read{4156,4156} %write{4155,4155}
temp	float	$tmp2431	 %read{4155,4155} %write{4152,4152}
temp	float	$tmp2432	 %read{4152,4152} %write{4151,4151}
temp	float	$tmp2433	 %read{4155,4155} %write{4154,4154}
temp	float	$tmp2434	 %read{4154,4154} %write{4153,4153}
temp	int	$tmp2435	 %read{4158,4158} %write{4157,4157}
temp	float	$tmp2436	 %read{4165,4165} %write{4161,4161}
temp	float	$tmp2437	 %read{4161,4161} %write{4160,4160}
temp	float	$tmp2438	 %read{4160,4160} %write{4159,4159}
temp	float	$tmp2439	 %read{4165,4165} %write{4164,4164}
temp	float	$tmp2440	 %read{4164,4164} %write{4163,4163}
temp	float	$tmp2441	 %read{4163,4163} %write{4162,4162}
temp	float	$tmp2442	 %read{4169,4169} %write{4165,4165}
temp	float	$tmp2443	 %read{4169,4169} %write{4168,4168}
temp	float	$tmp2444	 %read{4168,4168} %write{4167,4167}
temp	float	$tmp2445	 %read{4167,4167} %write{4166,4166}
temp	int	$tmp2446	 %read{4171,4171} %write{4170,4170}
temp	float	$tmp2447	 %read{4176,4176} %write{4175,4175}
temp	float	$tmp2448	 %read{4175,4175} %write{4174,4174}
temp	vector	$tmp2449	 %read{4174,4174} %write{4172,4172}
temp	vector	$tmp2450	 %read{4174,4174} %write{4173,4173}
temp	int	$tmp2451	 %read{4178,4178} %write{4177,4177}
temp	float	$tmp2452	 %read{4185,4185} %write{4181,4181}
temp	float	$tmp2453	 %read{4181,4181} %write{4180,4180}
temp	float	$tmp2454	 %read{4180,4180} %write{4179,4179}
temp	float	$tmp2455	 %read{4185,4185} %write{4184,4184}
temp	float	$tmp2456	 %read{4184,4184} %write{4183,4183}
temp	float	$tmp2457	 %read{4183,4183} %write{4182,4182}
temp	float	$tmp2458	 %read{4189,4189} %write{4185,4185}
temp	float	$tmp2459	 %read{4189,4189} %write{4188,4188}
temp	float	$tmp2460	 %read{4188,4188} %write{4187,4187}
temp	float	$tmp2461	 %read{4187,4187} %write{4186,4186}
temp	float	$tmp2462	 %read{4191,4191} %write{4189,4189}
temp	float	$tmp2463	 %read{4191,4191} %write{4190,4190}
temp	point	$tmp2464	 %read{4197,4197} %write{4196,4196}
temp	float	$tmp2465	 %read{4196,4196} %write{4193,4193}
temp	float	$tmp2466	 %read{4196,4196} %write{4194,4194}
temp	float	$tmp2467	 %read{4196,4196} %write{4195,4195}
temp	float	$tmp2468	 %read{4199,4199} %write{4198,4198}
temp	int	$tmp2469	 %read{4200,4200} %write{4199,4199}
temp	float	$tmp2470	 %read{4202,4202} %write{4201,4201}
temp	float	$tmp2471	 %read{4204,4204} %write{4203,4203}
temp	float	$tmp2472	 %read{4206,4206} %write{4205,4205}
temp	point	$tmp2473	 %read{4209,4209} %write{4208,4208}
temp	point	$tmp2474	 %read{4211,4211} %write{4210,4210}
temp	point	$tmp2475	 %read{4213,4213} %write{4212,4212}
temp	float	$tmp2476	 %read{4216,4216} %write{4215,4215}
temp	int	$tmp2477	 %read{4217,4217} %write{4216,4216}
temp	float	$tmp2478	 %read{4219,4219} %write{4218,4218}
temp	float	$tmp2479	 %read{4221,4221} %write{4220,4220}
temp	point	$tmp2480	 %read{4224,4224} %write{4223,4223}
temp	point	$tmp2481	 %read{4226,4226} %write{4225,4225}
temp	float	$tmp2482	 %read{4229,4229} %write{4228,4228}
temp	int	$tmp2483	 %read{4230,4230} %write{4229,4229}
temp	float	$tmp2484	 %read{4232,4232} %write{4231,4231}
temp	point	$tmp2485	 %read{4235,4235} %write{4234,4234}
temp	float	$tmp2486	 %read{4238,4238} %write{4237,4237}
temp	int	$tmp2487	 %read{4239,4239} %write{4238,4238}
temp	int	$tmp2488	 %read{2147483647,-1} %write{4242,4242}
temp	int	$tmp2489	 %read{2147483647,-1} %write{4244,4244}
temp	int	$tmp2490	 %read{2147483647,-1} %write{4246,4246}
temp	float	$tmp2491	 %read{4250,4250} %write{4248,4248}
temp	float	$tmp2492	 %read{4250,4250} %write{4249,4249}
temp	int	$tmp2493	 %read{4253,4253} %write{4252,4252}
temp	float	$tmp2494	 %read{4258,4258} %write{4257,4257}
temp	int	$tmp2495	 %read{4260,4260} %write{4259,4259}
temp	float	$tmp2496	 %read{4265,4265} %write{4264,4264}
temp	float	$tmp2497	 %read{4266,4266} %write{4265,4265}
temp	float	$tmp2498	 %read{4268,4268} %write{4267,4267}
const	float	$const48	0.5		 %read{4269,8639} %write{2147483647,-1}
temp	int	$tmp2499	 %read{2147483647,-1} %write{4271,4271}
temp	float	$tmp2500	 %read{4274,4274} %write{4273,4273}
temp	int	$tmp2501	 %read{4276,4276} %write{4275,4275}
temp	point	$tmp2502	 %read{4282,5334} %write{4277,5320}
temp	int	$tmp2503	 %read{4281,4281} %write{4280,4280}
temp	int	$tmp2504	 %read{4284,4284} %write{4283,4283}
temp	float	$tmp2505	 %read{4454,4454} %write{4453,4453}
temp	float	$tmp2506	 %read{4291,4291} %write{4290,4290}
temp	float	$tmp2507	 %read{4290,4290} %write{4289,4289}
temp	float	$tmp2508	 %read{4294,4294} %write{4293,4293}
temp	float	$tmp2509	 %read{4293,4293} %write{4292,4292}
temp	float	$tmp2510	 %read{4297,4297} %write{4296,4296}
temp	float	$tmp2511	 %read{4296,4296} %write{4295,4295}
temp	int	$tmp2512	 %read{4305,4305} %write{4304,4304}
temp	int	$tmp2513	 %read{4302,4452} %write{4302,4452}
temp	int	$tmp2514	 %read{4309,4309} %write{4308,4308}
temp	int	$tmp2515	 %read{4306,4450} %write{4306,4450}
temp	int	$tmp2516	 %read{4313,4313} %write{4312,4312}
temp	int	$tmp2517	 %read{4310,4448} %write{4310,4448}
temp	float	$tmp2518	 %read{4317,4317} %write{4314,4314}
temp	float	$tmp2519	 %read{4317,4317} %write{4315,4315}
temp	float	$tmp2520	 %read{4317,4317} %write{4316,4316}
temp	color	$tmp2521	 %read{4331,4331} %write{4330,4330}
temp	point	$tmp2522	 %read{4324,4324} %write{4323,4323}
temp	float	$tmp2523	 %read{4323,4323} %write{4320,4320}
temp	float	$tmp2524	 %read{4323,4323} %write{4321,4321}
temp	float	$tmp2525	 %read{4323,4323} %write{4322,4322}
temp	point	$tmp2526	 %read{4329,4329} %write{4328,4328}
temp	float	$tmp2527	 %read{4328,4328} %write{4325,4325}
temp	float	$tmp2528	 %read{4328,4328} %write{4326,4326}
temp	float	$tmp2529	 %read{4328,4328} %write{4327,4327}
temp	point	$tmp2530	 %read{4333,4333} %write{4332,4332}
temp	int	$tmp2531	 %read{4337,4337} %write{4336,4336}
temp	int	$tmp2532	 %read{4340,4340} %write{4339,4339}
temp	int	$tmp2533	 %read{4343,4343} %write{4342,4342}
temp	float	$tmp2534	 %read{4348,4348} %write{4345,4345}
temp	float	$tmp2535	 %read{4345,4345} %write{4344,4344}
temp	float	$tmp2536	 %read{4348,4348} %write{4347,4347}
temp	float	$tmp2537	 %read{4347,4347} %write{4346,4346}
temp	float	$tmp2538	 %read{4351,4351} %write{4348,4348}
temp	float	$tmp2539	 %read{4351,4351} %write{4350,4350}
temp	float	$tmp2540	 %read{4350,4350} %write{4349,4349}
temp	int	$tmp2541	 %read{4353,4353} %write{4352,4352}
temp	float	$tmp2542	 %read{4361,4361} %write{4355,4355}
temp	float	$tmp2543	 %read{4355,4355} %write{4354,4354}
temp	float	$tmp2544	 %read{4361,4361} %write{4360,4360}
temp	float	$tmp2545	 %read{4360,4360} %write{4357,4357}
temp	float	$tmp2546	 %read{4357,4357} %write{4356,4356}
temp	float	$tmp2547	 %read{4360,4360} %write{4359,4359}
temp	float	$tmp2548	 %read{4359,4359} %write{4358,4358}
temp	int	$tmp2549	 %read{4363,4363} %write{4362,4362}
temp	float	$tmp2550	 %read{4370,4370} %write{4366,4366}
temp	float	$tmp2551	 %read{4366,4366} %write{4365,4365}
temp	float	$tmp2552	 %read{4365,4365} %write{4364,4364}
temp	float	$tmp2553	 %read{4370,4370} %write{4369,4369}
temp	float	$tmp2554	 %read{4369,4369} %write{4368,4368}
temp	float	$tmp2555	 %read{4368,4368} %write{4367,4367}
temp	float	$tmp2556	 %read{4374,4374} %write{4370,4370}
temp	float	$tmp2557	 %read{4374,4374} %write{4373,4373}
temp	float	$tmp2558	 %read{4373,4373} %write{4372,4372}
temp	float	$tmp2559	 %read{4372,4372} %write{4371,4371}
temp	int	$tmp2560	 %read{4376,4376} %write{4375,4375}
temp	float	$tmp2561	 %read{4381,4381} %write{4380,4380}
temp	float	$tmp2562	 %read{4380,4380} %write{4379,4379}
temp	vector	$tmp2563	 %read{4379,4379} %write{4377,4377}
temp	vector	$tmp2564	 %read{4379,4379} %write{4378,4378}
temp	int	$tmp2565	 %read{4383,4383} %write{4382,4382}
temp	float	$tmp2566	 %read{4390,4390} %write{4386,4386}
temp	float	$tmp2567	 %read{4386,4386} %write{4385,4385}
temp	float	$tmp2568	 %read{4385,4385} %write{4384,4384}
temp	float	$tmp2569	 %read{4390,4390} %write{4389,4389}
temp	float	$tmp2570	 %read{4389,4389} %write{4388,4388}
temp	float	$tmp2571	 %read{4388,4388} %write{4387,4387}
temp	float	$tmp2572	 %read{4394,4394} %write{4390,4390}
temp	float	$tmp2573	 %read{4394,4394} %write{4393,4393}
temp	float	$tmp2574	 %read{4393,4393} %write{4392,4392}
temp	float	$tmp2575	 %read{4392,4392} %write{4391,4391}
temp	float	$tmp2576	 %read{4396,4396} %write{4394,4394}
temp	float	$tmp2577	 %read{4396,4396} %write{4395,4395}
temp	point	$tmp2578	 %read{4402,4402} %write{4401,4401}
temp	float	$tmp2579	 %read{4401,4401} %write{4398,4398}
temp	float	$tmp2580	 %read{4401,4401} %write{4399,4399}
temp	float	$tmp2581	 %read{4401,4401} %write{4400,4400}
temp	float	$tmp2582	 %read{4404,4404} %write{4403,4403}
temp	int	$tmp2583	 %read{4405,4405} %write{4404,4404}
temp	float	$tmp2584	 %read{4407,4407} %write{4406,4406}
temp	float	$tmp2585	 %read{4409,4409} %write{4408,4408}
temp	float	$tmp2586	 %read{4411,4411} %write{4410,4410}
temp	point	$tmp2587	 %read{4414,4414} %write{4413,4413}
temp	point	$tmp2588	 %read{4416,4416} %write{4415,4415}
temp	point	$tmp2589	 %read{4418,4418} %write{4417,4417}
temp	float	$tmp2590	 %read{4421,4421} %write{4420,4420}
temp	int	$tmp2591	 %read{4422,4422} %write{4421,4421}
temp	float	$tmp2592	 %read{4424,4424} %write{4423,4423}
temp	float	$tmp2593	 %read{4426,4426} %write{4425,4425}
temp	point	$tmp2594	 %read{4429,4429} %write{4428,4428}
temp	point	$tmp2595	 %read{4431,4431} %write{4430,4430}
temp	float	$tmp2596	 %read{4434,4434} %write{4433,4433}
temp	int	$tmp2597	 %read{4435,4435} %write{4434,4434}
temp	float	$tmp2598	 %read{4437,4437} %write{4436,4436}
temp	point	$tmp2599	 %read{4440,4440} %write{4439,4439}
temp	float	$tmp2600	 %read{4443,4443} %write{4442,4442}
temp	int	$tmp2601	 %read{4444,4444} %write{4443,4443}
temp	int	$tmp2602	 %read{2147483647,-1} %write{4447,4447}
temp	int	$tmp2603	 %read{2147483647,-1} %write{4449,4449}
temp	int	$tmp2604	 %read{2147483647,-1} %write{4451,4451}
temp	float	$tmp2605	 %read{4455,4455} %write{4454,4454}
temp	int	$tmp2606	 %read{4457,4457} %write{4456,4456}
temp	float	$tmp2607	 %read{4627,4627} %write{4626,4626}
temp	float	$tmp2608	 %read{4464,4464} %write{4463,4463}
temp	float	$tmp2609	 %read{4463,4463} %write{4462,4462}
temp	float	$tmp2610	 %read{4467,4467} %write{4466,4466}
temp	float	$tmp2611	 %read{4466,4466} %write{4465,4465}
temp	float	$tmp2612	 %read{4470,4470} %write{4469,4469}
temp	float	$tmp2613	 %read{4469,4469} %write{4468,4468}
temp	int	$tmp2614	 %read{4478,4478} %write{4477,4477}
temp	int	$tmp2615	 %read{4475,4625} %write{4475,4625}
temp	int	$tmp2616	 %read{4482,4482} %write{4481,4481}
temp	int	$tmp2617	 %read{4479,4623} %write{4479,4623}
temp	int	$tmp2618	 %read{4486,4486} %write{4485,4485}
temp	int	$tmp2619	 %read{4483,4621} %write{4483,4621}
temp	float	$tmp2620	 %read{4490,4490} %write{4487,4487}
temp	float	$tmp2621	 %read{4490,4490} %write{4488,4488}
temp	float	$tmp2622	 %read{4490,4490} %write{4489,4489}
temp	color	$tmp2623	 %read{4504,4504} %write{4503,4503}
temp	point	$tmp2624	 %read{4497,4497} %write{4496,4496}
temp	float	$tmp2625	 %read{4496,4496} %write{4493,4493}
temp	float	$tmp2626	 %read{4496,4496} %write{4494,4494}
temp	float	$tmp2627	 %read{4496,4496} %write{4495,4495}
temp	point	$tmp2628	 %read{4502,4502} %write{4501,4501}
temp	float	$tmp2629	 %read{4501,4501} %write{4498,4498}
temp	float	$tmp2630	 %read{4501,4501} %write{4499,4499}
temp	float	$tmp2631	 %read{4501,4501} %write{4500,4500}
temp	point	$tmp2632	 %read{4506,4506} %write{4505,4505}
temp	int	$tmp2633	 %read{4510,4510} %write{4509,4509}
temp	int	$tmp2634	 %read{4513,4513} %write{4512,4512}
temp	int	$tmp2635	 %read{4516,4516} %write{4515,4515}
temp	float	$tmp2636	 %read{4521,4521} %write{4518,4518}
temp	float	$tmp2637	 %read{4518,4518} %write{4517,4517}
temp	float	$tmp2638	 %read{4521,4521} %write{4520,4520}
temp	float	$tmp2639	 %read{4520,4520} %write{4519,4519}
temp	float	$tmp2640	 %read{4524,4524} %write{4521,4521}
temp	float	$tmp2641	 %read{4524,4524} %write{4523,4523}
temp	float	$tmp2642	 %read{4523,4523} %write{4522,4522}
temp	int	$tmp2643	 %read{4526,4526} %write{4525,4525}
temp	float	$tmp2644	 %read{4534,4534} %write{4528,4528}
temp	float	$tmp2645	 %read{4528,4528} %write{4527,4527}
temp	float	$tmp2646	 %read{4534,4534} %write{4533,4533}
temp	float	$tmp2647	 %read{4533,4533} %write{4530,4530}
temp	float	$tmp2648	 %read{4530,4530} %write{4529,4529}
temp	float	$tmp2649	 %read{4533,4533} %write{4532,4532}
temp	float	$tmp2650	 %read{4532,4532} %write{4531,4531}
temp	int	$tmp2651	 %read{4536,4536} %write{4535,4535}
temp	float	$tmp2652	 %read{4543,4543} %write{4539,4539}
temp	float	$tmp2653	 %read{4539,4539} %write{4538,4538}
temp	float	$tmp2654	 %read{4538,4538} %write{4537,4537}
temp	float	$tmp2655	 %read{4543,4543} %write{4542,4542}
temp	float	$tmp2656	 %read{4542,4542} %write{4541,4541}
temp	float	$tmp2657	 %read{4541,4541} %write{4540,4540}
temp	float	$tmp2658	 %read{4547,4547} %write{4543,4543}
temp	float	$tmp2659	 %read{4547,4547} %write{4546,4546}
temp	float	$tmp2660	 %read{4546,4546} %write{4545,4545}
temp	float	$tmp2661	 %read{4545,4545} %write{4544,4544}
temp	int	$tmp2662	 %read{4549,4549} %write{4548,4548}
temp	float	$tmp2663	 %read{4554,4554} %write{4553,4553}
temp	float	$tmp2664	 %read{4553,4553} %write{4552,4552}
temp	vector	$tmp2665	 %read{4552,4552} %write{4550,4550}
temp	vector	$tmp2666	 %read{4552,4552} %write{4551,4551}
temp	int	$tmp2667	 %read{4556,4556} %write{4555,4555}
temp	float	$tmp2668	 %read{4563,4563} %write{4559,4559}
temp	float	$tmp2669	 %read{4559,4559} %write{4558,4558}
temp	float	$tmp2670	 %read{4558,4558} %write{4557,4557}
temp	float	$tmp2671	 %read{4563,4563} %write{4562,4562}
temp	float	$tmp2672	 %read{4562,4562} %write{4561,4561}
temp	float	$tmp2673	 %read{4561,4561} %write{4560,4560}
temp	float	$tmp2674	 %read{4567,4567} %write{4563,4563}
temp	float	$tmp2675	 %read{4567,4567} %write{4566,4566}
temp	float	$tmp2676	 %read{4566,4566} %write{4565,4565}
temp	float	$tmp2677	 %read{4565,4565} %write{4564,4564}
temp	float	$tmp2678	 %read{4569,4569} %write{4567,4567}
temp	float	$tmp2679	 %read{4569,4569} %write{4568,4568}
temp	point	$tmp2680	 %read{4575,4575} %write{4574,4574}
temp	float	$tmp2681	 %read{4574,4574} %write{4571,4571}
temp	float	$tmp2682	 %read{4574,4574} %write{4572,4572}
temp	float	$tmp2683	 %read{4574,4574} %write{4573,4573}
temp	float	$tmp2684	 %read{4577,4577} %write{4576,4576}
temp	int	$tmp2685	 %read{4578,4578} %write{4577,4577}
temp	float	$tmp2686	 %read{4580,4580} %write{4579,4579}
temp	float	$tmp2687	 %read{4582,4582} %write{4581,4581}
temp	float	$tmp2688	 %read{4584,4584} %write{4583,4583}
temp	point	$tmp2689	 %read{4587,4587} %write{4586,4586}
temp	point	$tmp2690	 %read{4589,4589} %write{4588,4588}
temp	point	$tmp2691	 %read{4591,4591} %write{4590,4590}
temp	float	$tmp2692	 %read{4594,4594} %write{4593,4593}
temp	int	$tmp2693	 %read{4595,4595} %write{4594,4594}
temp	float	$tmp2694	 %read{4597,4597} %write{4596,4596}
temp	float	$tmp2695	 %read{4599,4599} %write{4598,4598}
temp	point	$tmp2696	 %read{4602,4602} %write{4601,4601}
temp	point	$tmp2697	 %read{4604,4604} %write{4603,4603}
temp	float	$tmp2698	 %read{4607,4607} %write{4606,4606}
temp	int	$tmp2699	 %read{4608,4608} %write{4607,4607}
temp	float	$tmp2700	 %read{4610,4610} %write{4609,4609}
temp	point	$tmp2701	 %read{4613,4613} %write{4612,4612}
temp	float	$tmp2702	 %read{4616,4616} %write{4615,4615}
temp	int	$tmp2703	 %read{4617,4617} %write{4616,4616}
temp	int	$tmp2704	 %read{2147483647,-1} %write{4620,4620}
temp	int	$tmp2705	 %read{2147483647,-1} %write{4622,4622}
temp	int	$tmp2706	 %read{2147483647,-1} %write{4624,4624}
temp	float	$tmp2707	 %read{4628,4628} %write{4627,4627}
temp	int	$tmp2708	 %read{4630,4630} %write{4629,4629}
temp	float	$tmp2709	 %read{4800,4800} %write{4799,4799}
temp	float	$tmp2710	 %read{4637,4637} %write{4636,4636}
temp	float	$tmp2711	 %read{4636,4636} %write{4635,4635}
temp	float	$tmp2712	 %read{4640,4640} %write{4639,4639}
temp	float	$tmp2713	 %read{4639,4639} %write{4638,4638}
temp	float	$tmp2714	 %read{4643,4643} %write{4642,4642}
temp	float	$tmp2715	 %read{4642,4642} %write{4641,4641}
temp	int	$tmp2716	 %read{4651,4651} %write{4650,4650}
temp	int	$tmp2717	 %read{4648,4798} %write{4648,4798}
temp	int	$tmp2718	 %read{4655,4655} %write{4654,4654}
temp	int	$tmp2719	 %read{4652,4796} %write{4652,4796}
temp	int	$tmp2720	 %read{4659,4659} %write{4658,4658}
temp	int	$tmp2721	 %read{4656,4794} %write{4656,4794}
temp	float	$tmp2722	 %read{4663,4663} %write{4660,4660}
temp	float	$tmp2723	 %read{4663,4663} %write{4661,4661}
temp	float	$tmp2724	 %read{4663,4663} %write{4662,4662}
temp	color	$tmp2725	 %read{4677,4677} %write{4676,4676}
temp	point	$tmp2726	 %read{4670,4670} %write{4669,4669}
temp	float	$tmp2727	 %read{4669,4669} %write{4666,4666}
temp	float	$tmp2728	 %read{4669,4669} %write{4667,4667}
temp	float	$tmp2729	 %read{4669,4669} %write{4668,4668}
temp	point	$tmp2730	 %read{4675,4675} %write{4674,4674}
temp	float	$tmp2731	 %read{4674,4674} %write{4671,4671}
temp	float	$tmp2732	 %read{4674,4674} %write{4672,4672}
temp	float	$tmp2733	 %read{4674,4674} %write{4673,4673}
temp	point	$tmp2734	 %read{4679,4679} %write{4678,4678}
temp	int	$tmp2735	 %read{4683,4683} %write{4682,4682}
temp	int	$tmp2736	 %read{4686,4686} %write{4685,4685}
temp	int	$tmp2737	 %read{4689,4689} %write{4688,4688}
temp	float	$tmp2738	 %read{4694,4694} %write{4691,4691}
temp	float	$tmp2739	 %read{4691,4691} %write{4690,4690}
temp	float	$tmp2740	 %read{4694,4694} %write{4693,4693}
temp	float	$tmp2741	 %read{4693,4693} %write{4692,4692}
temp	float	$tmp2742	 %read{4697,4697} %write{4694,4694}
temp	float	$tmp2743	 %read{4697,4697} %write{4696,4696}
temp	float	$tmp2744	 %read{4696,4696} %write{4695,4695}
temp	int	$tmp2745	 %read{4699,4699} %write{4698,4698}
temp	float	$tmp2746	 %read{4707,4707} %write{4701,4701}
temp	float	$tmp2747	 %read{4701,4701} %write{4700,4700}
temp	float	$tmp2748	 %read{4707,4707} %write{4706,4706}
temp	float	$tmp2749	 %read{4706,4706} %write{4703,4703}
temp	float	$tmp2750	 %read{4703,4703} %write{4702,4702}
temp	float	$tmp2751	 %read{4706,4706} %write{4705,4705}
temp	float	$tmp2752	 %read{4705,4705} %write{4704,4704}
temp	int	$tmp2753	 %read{4709,4709} %write{4708,4708}
temp	float	$tmp2754	 %read{4716,4716} %write{4712,4712}
temp	float	$tmp2755	 %read{4712,4712} %write{4711,4711}
temp	float	$tmp2756	 %read{4711,4711} %write{4710,4710}
temp	float	$tmp2757	 %read{4716,4716} %write{4715,4715}
temp	float	$tmp2758	 %read{4715,4715} %write{4714,4714}
temp	float	$tmp2759	 %read{4714,4714} %write{4713,4713}
temp	float	$tmp2760	 %read{4720,4720} %write{4716,4716}
temp	float	$tmp2761	 %read{4720,4720} %write{4719,4719}
temp	float	$tmp2762	 %read{4719,4719} %write{4718,4718}
temp	float	$tmp2763	 %read{4718,4718} %write{4717,4717}
temp	int	$tmp2764	 %read{4722,4722} %write{4721,4721}
temp	float	$tmp2765	 %read{4727,4727} %write{4726,4726}
temp	float	$tmp2766	 %read{4726,4726} %write{4725,4725}
temp	vector	$tmp2767	 %read{4725,4725} %write{4723,4723}
temp	vector	$tmp2768	 %read{4725,4725} %write{4724,4724}
temp	int	$tmp2769	 %read{4729,4729} %write{4728,4728}
temp	float	$tmp2770	 %read{4736,4736} %write{4732,4732}
temp	float	$tmp2771	 %read{4732,4732} %write{4731,4731}
temp	float	$tmp2772	 %read{4731,4731} %write{4730,4730}
temp	float	$tmp2773	 %read{4736,4736} %write{4735,4735}
temp	float	$tmp2774	 %read{4735,4735} %write{4734,4734}
temp	float	$tmp2775	 %read{4734,4734} %write{4733,4733}
temp	float	$tmp2776	 %read{4740,4740} %write{4736,4736}
temp	float	$tmp2777	 %read{4740,4740} %write{4739,4739}
temp	float	$tmp2778	 %read{4739,4739} %write{4738,4738}
temp	float	$tmp2779	 %read{4738,4738} %write{4737,4737}
temp	float	$tmp2780	 %read{4742,4742} %write{4740,4740}
temp	float	$tmp2781	 %read{4742,4742} %write{4741,4741}
temp	point	$tmp2782	 %read{4748,4748} %write{4747,4747}
temp	float	$tmp2783	 %read{4747,4747} %write{4744,4744}
temp	float	$tmp2784	 %read{4747,4747} %write{4745,4745}
temp	float	$tmp2785	 %read{4747,4747} %write{4746,4746}
temp	float	$tmp2786	 %read{4750,4750} %write{4749,4749}
temp	int	$tmp2787	 %read{4751,4751} %write{4750,4750}
temp	float	$tmp2788	 %read{4753,4753} %write{4752,4752}
temp	float	$tmp2789	 %read{4755,4755} %write{4754,4754}
temp	float	$tmp2790	 %read{4757,4757} %write{4756,4756}
temp	point	$tmp2791	 %read{4760,4760} %write{4759,4759}
temp	point	$tmp2792	 %read{4762,4762} %write{4761,4761}
temp	point	$tmp2793	 %read{4764,4764} %write{4763,4763}
temp	float	$tmp2794	 %read{4767,4767} %write{4766,4766}
temp	int	$tmp2795	 %read{4768,4768} %write{4767,4767}
temp	float	$tmp2796	 %read{4770,4770} %write{4769,4769}
temp	float	$tmp2797	 %read{4772,4772} %write{4771,4771}
temp	point	$tmp2798	 %read{4775,4775} %write{4774,4774}
temp	point	$tmp2799	 %read{4777,4777} %write{4776,4776}
temp	float	$tmp2800	 %read{4780,4780} %write{4779,4779}
temp	int	$tmp2801	 %read{4781,4781} %write{4780,4780}
temp	float	$tmp2802	 %read{4783,4783} %write{4782,4782}
temp	point	$tmp2803	 %read{4786,4786} %write{4785,4785}
temp	float	$tmp2804	 %read{4789,4789} %write{4788,4788}
temp	int	$tmp2805	 %read{4790,4790} %write{4789,4789}
temp	int	$tmp2806	 %read{2147483647,-1} %write{4793,4793}
temp	int	$tmp2807	 %read{2147483647,-1} %write{4795,4795}
temp	int	$tmp2808	 %read{2147483647,-1} %write{4797,4797}
temp	float	$tmp2809	 %read{4801,4801} %write{4800,4800}
temp	int	$tmp2810	 %read{4803,4803} %write{4802,4802}
temp	float	$tmp2811	 %read{4973,4973} %write{4972,4972}
temp	float	$tmp2812	 %read{4810,4810} %write{4809,4809}
temp	float	$tmp2813	 %read{4809,4809} %write{4808,4808}
temp	float	$tmp2814	 %read{4813,4813} %write{4812,4812}
temp	float	$tmp2815	 %read{4812,4812} %write{4811,4811}
temp	float	$tmp2816	 %read{4816,4816} %write{4815,4815}
temp	float	$tmp2817	 %read{4815,4815} %write{4814,4814}
temp	int	$tmp2818	 %read{4824,4824} %write{4823,4823}
temp	int	$tmp2819	 %read{4821,4971} %write{4821,4971}
temp	int	$tmp2820	 %read{4828,4828} %write{4827,4827}
temp	int	$tmp2821	 %read{4825,4969} %write{4825,4969}
temp	int	$tmp2822	 %read{4832,4832} %write{4831,4831}
temp	int	$tmp2823	 %read{4829,4967} %write{4829,4967}
temp	float	$tmp2824	 %read{4836,4836} %write{4833,4833}
temp	float	$tmp2825	 %read{4836,4836} %write{4834,4834}
temp	float	$tmp2826	 %read{4836,4836} %write{4835,4835}
temp	color	$tmp2827	 %read{4850,4850} %write{4849,4849}
temp	point	$tmp2828	 %read{4843,4843} %write{4842,4842}
temp	float	$tmp2829	 %read{4842,4842} %write{4839,4839}
temp	float	$tmp2830	 %read{4842,4842} %write{4840,4840}
temp	float	$tmp2831	 %read{4842,4842} %write{4841,4841}
temp	point	$tmp2832	 %read{4848,4848} %write{4847,4847}
temp	float	$tmp2833	 %read{4847,4847} %write{4844,4844}
temp	float	$tmp2834	 %read{4847,4847} %write{4845,4845}
temp	float	$tmp2835	 %read{4847,4847} %write{4846,4846}
temp	point	$tmp2836	 %read{4852,4852} %write{4851,4851}
temp	int	$tmp2837	 %read{4856,4856} %write{4855,4855}
temp	int	$tmp2838	 %read{4859,4859} %write{4858,4858}
temp	int	$tmp2839	 %read{4862,4862} %write{4861,4861}
temp	float	$tmp2840	 %read{4867,4867} %write{4864,4864}
temp	float	$tmp2841	 %read{4864,4864} %write{4863,4863}
temp	float	$tmp2842	 %read{4867,4867} %write{4866,4866}
temp	float	$tmp2843	 %read{4866,4866} %write{4865,4865}
temp	float	$tmp2844	 %read{4870,4870} %write{4867,4867}
temp	float	$tmp2845	 %read{4870,4870} %write{4869,4869}
temp	float	$tmp2846	 %read{4869,4869} %write{4868,4868}
temp	int	$tmp2847	 %read{4872,4872} %write{4871,4871}
temp	float	$tmp2848	 %read{4880,4880} %write{4874,4874}
temp	float	$tmp2849	 %read{4874,4874} %write{4873,4873}
temp	float	$tmp2850	 %read{4880,4880} %write{4879,4879}
temp	float	$tmp2851	 %read{4879,4879} %write{4876,4876}
temp	float	$tmp2852	 %read{4876,4876} %write{4875,4875}
temp	float	$tmp2853	 %read{4879,4879} %write{4878,4878}
temp	float	$tmp2854	 %read{4878,4878} %write{4877,4877}
temp	int	$tmp2855	 %read{4882,4882} %write{4881,4881}
temp	float	$tmp2856	 %read{4889,4889} %write{4885,4885}
temp	float	$tmp2857	 %read{4885,4885} %write{4884,4884}
temp	float	$tmp2858	 %read{4884,4884} %write{4883,4883}
temp	float	$tmp2859	 %read{4889,4889} %write{4888,4888}
temp	float	$tmp2860	 %read{4888,4888} %write{4887,4887}
temp	float	$tmp2861	 %read{4887,4887} %write{4886,4886}
temp	float	$tmp2862	 %read{4893,4893} %write{4889,4889}
temp	float	$tmp2863	 %read{4893,4893} %write{4892,4892}
temp	float	$tmp2864	 %read{4892,4892} %write{4891,4891}
temp	float	$tmp2865	 %read{4891,4891} %write{4890,4890}
temp	int	$tmp2866	 %read{4895,4895} %write{4894,4894}
temp	float	$tmp2867	 %read{4900,4900} %write{4899,4899}
temp	float	$tmp2868	 %read{4899,4899} %write{4898,4898}
temp	vector	$tmp2869	 %read{4898,4898} %write{4896,4896}
temp	vector	$tmp2870	 %read{4898,4898} %write{4897,4897}
temp	int	$tmp2871	 %read{4902,4902} %write{4901,4901}
temp	float	$tmp2872	 %read{4909,4909} %write{4905,4905}
temp	float	$tmp2873	 %read{4905,4905} %write{4904,4904}
temp	float	$tmp2874	 %read{4904,4904} %write{4903,4903}
temp	float	$tmp2875	 %read{4909,4909} %write{4908,4908}
temp	float	$tmp2876	 %read{4908,4908} %write{4907,4907}
temp	float	$tmp2877	 %read{4907,4907} %write{4906,4906}
temp	float	$tmp2878	 %read{4913,4913} %write{4909,4909}
temp	float	$tmp2879	 %read{4913,4913} %write{4912,4912}
temp	float	$tmp2880	 %read{4912,4912} %write{4911,4911}
temp	float	$tmp2881	 %read{4911,4911} %write{4910,4910}
temp	float	$tmp2882	 %read{4915,4915} %write{4913,4913}
temp	float	$tmp2883	 %read{4915,4915} %write{4914,4914}
temp	point	$tmp2884	 %read{4921,4921} %write{4920,4920}
temp	float	$tmp2885	 %read{4920,4920} %write{4917,4917}
temp	float	$tmp2886	 %read{4920,4920} %write{4918,4918}
temp	float	$tmp2887	 %read{4920,4920} %write{4919,4919}
temp	float	$tmp2888	 %read{4923,4923} %write{4922,4922}
temp	int	$tmp2889	 %read{4924,4924} %write{4923,4923}
temp	float	$tmp2890	 %read{4926,4926} %write{4925,4925}
temp	float	$tmp2891	 %read{4928,4928} %write{4927,4927}
temp	float	$tmp2892	 %read{4930,4930} %write{4929,4929}
temp	point	$tmp2893	 %read{4933,4933} %write{4932,4932}
temp	point	$tmp2894	 %read{4935,4935} %write{4934,4934}
temp	point	$tmp2895	 %read{4937,4937} %write{4936,4936}
temp	float	$tmp2896	 %read{4940,4940} %write{4939,4939}
temp	int	$tmp2897	 %read{4941,4941} %write{4940,4940}
temp	float	$tmp2898	 %read{4943,4943} %write{4942,4942}
temp	float	$tmp2899	 %read{4945,4945} %write{4944,4944}
temp	point	$tmp2900	 %read{4948,4948} %write{4947,4947}
temp	point	$tmp2901	 %read{4950,4950} %write{4949,4949}
temp	float	$tmp2902	 %read{4953,4953} %write{4952,4952}
temp	int	$tmp2903	 %read{4954,4954} %write{4953,4953}
temp	float	$tmp2904	 %read{4956,4956} %write{4955,4955}
temp	point	$tmp2905	 %read{4959,4959} %write{4958,4958}
temp	float	$tmp2906	 %read{4962,4962} %write{4961,4961}
temp	int	$tmp2907	 %read{4963,4963} %write{4962,4962}
temp	int	$tmp2908	 %read{2147483647,-1} %write{4966,4966}
temp	int	$tmp2909	 %read{2147483647,-1} %write{4968,4968}
temp	int	$tmp2910	 %read{2147483647,-1} %write{4970,4970}
temp	float	$tmp2911	 %read{4974,4974} %write{4973,4973}
temp	int	$tmp2912	 %read{4976,4976} %write{4975,4975}
temp	float	$tmp2913	 %read{5148,5148} %write{5147,5147}
temp	float	$tmp2914	 %read{4983,4983} %write{4982,4982}
temp	float	$tmp2915	 %read{4982,4982} %write{4981,4981}
temp	float	$tmp2916	 %read{4986,4986} %write{4985,4985}
temp	float	$tmp2917	 %read{4985,4985} %write{4984,4984}
temp	float	$tmp2918	 %read{4989,4989} %write{4988,4988}
temp	float	$tmp2919	 %read{4988,4988} %write{4987,4987}
temp	int	$tmp2920	 %read{4997,4997} %write{4996,4996}
temp	int	$tmp2921	 %read{4994,5144} %write{4994,5144}
temp	int	$tmp2922	 %read{5001,5001} %write{5000,5000}
temp	int	$tmp2923	 %read{4998,5142} %write{4998,5142}
temp	int	$tmp2924	 %read{5005,5005} %write{5004,5004}
temp	int	$tmp2925	 %read{5002,5140} %write{5002,5140}
temp	float	$tmp2926	 %read{5009,5009} %write{5006,5006}
temp	float	$tmp2927	 %read{5009,5009} %write{5007,5007}
temp	float	$tmp2928	 %read{5009,5009} %write{5008,5008}
temp	color	$tmp2929	 %read{5023,5023} %write{5022,5022}
temp	point	$tmp2930	 %read{5016,5016} %write{5015,5015}
temp	float	$tmp2931	 %read{5015,5015} %write{5012,5012}
temp	float	$tmp2932	 %read{5015,5015} %write{5013,5013}
temp	float	$tmp2933	 %read{5015,5015} %write{5014,5014}
temp	point	$tmp2934	 %read{5021,5021} %write{5020,5020}
temp	float	$tmp2935	 %read{5020,5020} %write{5017,5017}
temp	float	$tmp2936	 %read{5020,5020} %write{5018,5018}
temp	float	$tmp2937	 %read{5020,5020} %write{5019,5019}
temp	point	$tmp2938	 %read{5025,5025} %write{5024,5024}
temp	int	$tmp2939	 %read{5029,5029} %write{5028,5028}
temp	int	$tmp2940	 %read{5032,5032} %write{5031,5031}
temp	int	$tmp2941	 %read{5035,5035} %write{5034,5034}
temp	float	$tmp2942	 %read{5040,5040} %write{5037,5037}
temp	float	$tmp2943	 %read{5037,5037} %write{5036,5036}
temp	float	$tmp2944	 %read{5040,5040} %write{5039,5039}
temp	float	$tmp2945	 %read{5039,5039} %write{5038,5038}
temp	float	$tmp2946	 %read{5043,5043} %write{5040,5040}
temp	float	$tmp2947	 %read{5043,5043} %write{5042,5042}
temp	float	$tmp2948	 %read{5042,5042} %write{5041,5041}
temp	int	$tmp2949	 %read{5045,5045} %write{5044,5044}
temp	float	$tmp2950	 %read{5053,5053} %write{5047,5047}
temp	float	$tmp2951	 %read{5047,5047} %write{5046,5046}
temp	float	$tmp2952	 %read{5053,5053} %write{5052,5052}
temp	float	$tmp2953	 %read{5052,5052} %write{5049,5049}
temp	float	$tmp2954	 %read{5049,5049} %write{5048,5048}
temp	float	$tmp2955	 %read{5052,5052} %write{5051,5051}
temp	float	$tmp2956	 %read{5051,5051} %write{5050,5050}
temp	int	$tmp2957	 %read{5055,5055} %write{5054,5054}
temp	float	$tmp2958	 %read{5062,5062} %write{5058,5058}
temp	float	$tmp2959	 %read{5058,5058} %write{5057,5057}
temp	float	$tmp2960	 %read{5057,5057} %write{5056,5056}
temp	float	$tmp2961	 %read{5062,5062} %write{5061,5061}
temp	float	$tmp2962	 %read{5061,5061} %write{5060,5060}
temp	float	$tmp2963	 %read{5060,5060} %write{5059,5059}
temp	float	$tmp2964	 %read{5066,5066} %write{5062,5062}
temp	float	$tmp2965	 %read{5066,5066} %write{5065,5065}
temp	float	$tmp2966	 %read{5065,5065} %write{5064,5064}
temp	float	$tmp2967	 %read{5064,5064} %write{5063,5063}
temp	int	$tmp2968	 %read{5068,5068} %write{5067,5067}
temp	float	$tmp2969	 %read{5073,5073} %write{5072,5072}
temp	float	$tmp2970	 %read{5072,5072} %write{5071,5071}
temp	vector	$tmp2971	 %read{5071,5071} %write{5069,5069}
temp	vector	$tmp2972	 %read{5071,5071} %write{5070,5070}
temp	int	$tmp2973	 %read{5075,5075} %write{5074,5074}
temp	float	$tmp2974	 %read{5082,5082} %write{5078,5078}
temp	float	$tmp2975	 %read{5078,5078} %write{5077,5077}
temp	float	$tmp2976	 %read{5077,5077} %write{5076,5076}
temp	float	$tmp2977	 %read{5082,5082} %write{5081,5081}
temp	float	$tmp2978	 %read{5081,5081} %write{5080,5080}
temp	float	$tmp2979	 %read{5080,5080} %write{5079,5079}
temp	float	$tmp2980	 %read{5086,5086} %write{5082,5082}
temp	float	$tmp2981	 %read{5086,5086} %write{5085,5085}
temp	float	$tmp2982	 %read{5085,5085} %write{5084,5084}
temp	float	$tmp2983	 %read{5084,5084} %write{5083,5083}
temp	float	$tmp2984	 %read{5088,5088} %write{5086,5086}
temp	float	$tmp2985	 %read{5088,5088} %write{5087,5087}
temp	point	$tmp2986	 %read{5094,5094} %write{5093,5093}
temp	float	$tmp2987	 %read{5093,5093} %write{5090,5090}
temp	float	$tmp2988	 %read{5093,5093} %write{5091,5091}
temp	float	$tmp2989	 %read{5093,5093} %write{5092,5092}
temp	float	$tmp2990	 %read{5096,5096} %write{5095,5095}
temp	int	$tmp2991	 %read{5097,5097} %write{5096,5096}
temp	float	$tmp2992	 %read{5099,5099} %write{5098,5098}
temp	float	$tmp2993	 %read{5101,5101} %write{5100,5100}
temp	float	$tmp2994	 %read{5103,5103} %write{5102,5102}
temp	point	$tmp2995	 %read{5106,5106} %write{5105,5105}
temp	point	$tmp2996	 %read{5108,5108} %write{5107,5107}
temp	point	$tmp2997	 %read{5110,5110} %write{5109,5109}
temp	float	$tmp2998	 %read{5113,5113} %write{5112,5112}
temp	int	$tmp2999	 %read{5114,5114} %write{5113,5113}
temp	float	$tmp3000	 %read{5116,5116} %write{5115,5115}
temp	float	$tmp3001	 %read{5118,5118} %write{5117,5117}
temp	point	$tmp3002	 %read{5121,5121} %write{5120,5120}
temp	point	$tmp3003	 %read{5123,5123} %write{5122,5122}
temp	float	$tmp3004	 %read{5126,5126} %write{5125,5125}
temp	int	$tmp3005	 %read{5127,5127} %write{5126,5126}
temp	float	$tmp3006	 %read{5129,5129} %write{5128,5128}
temp	point	$tmp3007	 %read{5132,5132} %write{5131,5131}
temp	float	$tmp3008	 %read{5135,5135} %write{5134,5134}
temp	int	$tmp3009	 %read{5136,5136} %write{5135,5135}
temp	int	$tmp3010	 %read{2147483647,-1} %write{5139,5139}
temp	int	$tmp3011	 %read{2147483647,-1} %write{5141,5141}
temp	int	$tmp3012	 %read{2147483647,-1} %write{5143,5143}
temp	float	$tmp3013	 %read{5147,5147} %write{5145,5145}
temp	float	$tmp3014	 %read{5147,5147} %write{5146,5146}
temp	float	$tmp3015	 %read{5149,5149} %write{5148,5148}
temp	int	$tmp3016	 %read{5151,5151} %write{5150,5150}
temp	float	$tmp3017	 %read{5330,5330} %write{5327,5328}
temp	float	$tmp3018	 %read{5324,5324} %write{5323,5323}
temp	float	$tmp3019	 %read{5159,5159} %write{5158,5158}
temp	float	$tmp3020	 %read{5158,5158} %write{5157,5157}
temp	float	$tmp3021	 %read{5162,5162} %write{5161,5161}
temp	float	$tmp3022	 %read{5161,5161} %write{5160,5160}
temp	float	$tmp3023	 %read{5165,5165} %write{5164,5164}
temp	float	$tmp3024	 %read{5164,5164} %write{5163,5163}
temp	int	$tmp3025	 %read{5173,5173} %write{5172,5172}
temp	int	$tmp3026	 %read{5170,5320} %write{5170,5320}
temp	int	$tmp3027	 %read{5177,5177} %write{5176,5176}
temp	int	$tmp3028	 %read{5174,5318} %write{5174,5318}
temp	int	$tmp3029	 %read{5181,5181} %write{5180,5180}
temp	int	$tmp3030	 %read{5178,5316} %write{5178,5316}
temp	float	$tmp3031	 %read{5185,5185} %write{5182,5182}
temp	float	$tmp3032	 %read{5185,5185} %write{5183,5183}
temp	float	$tmp3033	 %read{5185,5185} %write{5184,5184}
temp	color	$tmp3034	 %read{5199,5199} %write{5198,5198}
temp	point	$tmp3035	 %read{5192,5192} %write{5191,5191}
temp	float	$tmp3036	 %read{5191,5191} %write{5188,5188}
temp	float	$tmp3037	 %read{5191,5191} %write{5189,5189}
temp	float	$tmp3038	 %read{5191,5191} %write{5190,5190}
temp	point	$tmp3039	 %read{5197,5197} %write{5196,5196}
temp	float	$tmp3040	 %read{5196,5196} %write{5193,5193}
temp	float	$tmp3041	 %read{5196,5196} %write{5194,5194}
temp	float	$tmp3042	 %read{5196,5196} %write{5195,5195}
temp	point	$tmp3043	 %read{5201,5201} %write{5200,5200}
temp	int	$tmp3044	 %read{5205,5205} %write{5204,5204}
temp	int	$tmp3045	 %read{5208,5208} %write{5207,5207}
temp	int	$tmp3046	 %read{5211,5211} %write{5210,5210}
temp	float	$tmp3047	 %read{5216,5216} %write{5213,5213}
temp	float	$tmp3048	 %read{5213,5213} %write{5212,5212}
temp	float	$tmp3049	 %read{5216,5216} %write{5215,5215}
temp	float	$tmp3050	 %read{5215,5215} %write{5214,5214}
temp	float	$tmp3051	 %read{5219,5219} %write{5216,5216}
temp	float	$tmp3052	 %read{5219,5219} %write{5218,5218}
temp	float	$tmp3053	 %read{5218,5218} %write{5217,5217}
temp	int	$tmp3054	 %read{5221,5221} %write{5220,5220}
temp	float	$tmp3055	 %read{5229,5229} %write{5223,5223}
temp	float	$tmp3056	 %read{5223,5223} %write{5222,5222}
temp	float	$tmp3057	 %read{5229,5229} %write{5228,5228}
temp	float	$tmp3058	 %read{5228,5228} %write{5225,5225}
temp	float	$tmp3059	 %read{5225,5225} %write{5224,5224}
temp	float	$tmp3060	 %read{5228,5228} %write{5227,5227}
temp	float	$tmp3061	 %read{5227,5227} %write{5226,5226}
temp	int	$tmp3062	 %read{5231,5231} %write{5230,5230}
temp	float	$tmp3063	 %read{5238,5238} %write{5234,5234}
temp	float	$tmp3064	 %read{5234,5234} %write{5233,5233}
temp	float	$tmp3065	 %read{5233,5233} %write{5232,5232}
temp	float	$tmp3066	 %read{5238,5238} %write{5237,5237}
temp	float	$tmp3067	 %read{5237,5237} %write{5236,5236}
temp	float	$tmp3068	 %read{5236,5236} %write{5235,5235}
temp	float	$tmp3069	 %read{5242,5242} %write{5238,5238}
temp	float	$tmp3070	 %read{5242,5242} %write{5241,5241}
temp	float	$tmp3071	 %read{5241,5241} %write{5240,5240}
temp	float	$tmp3072	 %read{5240,5240} %write{5239,5239}
temp	int	$tmp3073	 %read{5244,5244} %write{5243,5243}
temp	float	$tmp3074	 %read{5249,5249} %write{5248,5248}
temp	float	$tmp3075	 %read{5248,5248} %write{5247,5247}
temp	vector	$tmp3076	 %read{5247,5247} %write{5245,5245}
temp	vector	$tmp3077	 %read{5247,5247} %write{5246,5246}
temp	int	$tmp3078	 %read{5251,5251} %write{5250,5250}
temp	float	$tmp3079	 %read{5258,5258} %write{5254,5254}
temp	float	$tmp3080	 %read{5254,5254} %write{5253,5253}
temp	float	$tmp3081	 %read{5253,5253} %write{5252,5252}
temp	float	$tmp3082	 %read{5258,5258} %write{5257,5257}
temp	float	$tmp3083	 %read{5257,5257} %write{5256,5256}
temp	float	$tmp3084	 %read{5256,5256} %write{5255,5255}
temp	float	$tmp3085	 %read{5262,5262} %write{5258,5258}
temp	float	$tmp3086	 %read{5262,5262} %write{5261,5261}
temp	float	$tmp3087	 %read{5261,5261} %write{5260,5260}
temp	float	$tmp3088	 %read{5260,5260} %write{5259,5259}
temp	float	$tmp3089	 %read{5264,5264} %write{5262,5262}
temp	float	$tmp3090	 %read{5264,5264} %write{5263,5263}
temp	point	$tmp3091	 %read{5270,5270} %write{5269,5269}
temp	float	$tmp3092	 %read{5269,5269} %write{5266,5266}
temp	float	$tmp3093	 %read{5269,5269} %write{5267,5267}
temp	float	$tmp3094	 %read{5269,5269} %write{5268,5268}
temp	float	$tmp3095	 %read{5272,5272} %write{5271,5271}
temp	int	$tmp3096	 %read{5273,5273} %write{5272,5272}
temp	float	$tmp3097	 %read{5275,5275} %write{5274,5274}
temp	float	$tmp3098	 %read{5277,5277} %write{5276,5276}
temp	float	$tmp3099	 %read{5279,5279} %write{5278,5278}
temp	point	$tmp3100	 %read{5282,5282} %write{5281,5281}
temp	point	$tmp3101	 %read{5284,5284} %write{5283,5283}
temp	point	$tmp3102	 %read{5286,5286} %write{5285,5285}
temp	float	$tmp3103	 %read{5289,5289} %write{5288,5288}
temp	int	$tmp3104	 %read{5290,5290} %write{5289,5289}
temp	float	$tmp3105	 %read{5292,5292} %write{5291,5291}
temp	float	$tmp3106	 %read{5294,5294} %write{5293,5293}
temp	point	$tmp3107	 %read{5297,5297} %write{5296,5296}
temp	point	$tmp3108	 %read{5299,5299} %write{5298,5298}
temp	float	$tmp3109	 %read{5302,5302} %write{5301,5301}
temp	int	$tmp3110	 %read{5303,5303} %write{5302,5302}
temp	float	$tmp3111	 %read{5305,5305} %write{5304,5304}
temp	point	$tmp3112	 %read{5308,5308} %write{5307,5307}
temp	float	$tmp3113	 %read{5311,5311} %write{5310,5310}
temp	int	$tmp3114	 %read{5312,5312} %write{5311,5311}
temp	int	$tmp3115	 %read{2147483647,-1} %write{5315,5315}
temp	int	$tmp3116	 %read{2147483647,-1} %write{5317,5317}
temp	int	$tmp3117	 %read{2147483647,-1} %write{5319,5319}
temp	float	$tmp3118	 %read{5323,5323} %write{5321,5321}
temp	float	$tmp3119	 %read{5323,5323} %write{5322,5322}
temp	int	$tmp3120	 %read{5326,5326} %write{5325,5325}
temp	float	$tmp3121	 %read{5331,5331} %write{5330,5330}
temp	int	$tmp3122	 %read{5333,5333} %write{5332,5332}
temp	float	$tmp3123	 %read{5338,5338} %write{5337,5337}
temp	float	$tmp3124	 %read{5339,5339} %write{5338,5338}
temp	float	$tmp3125	 %read{5341,5341} %write{5340,5340}
temp	int	$tmp3126	 %read{5343,5343} %write{5342,5342}
temp	float	$tmp3127	 %read{5348,5348} %write{5343,5343}
temp	int	$tmp3128	 %read{5345,5345} %write{5344,5344}
temp	int	$tmp3129	 %read{5346,5346} %write{5345,5345}
temp	int	$tmp3130	 %read{5347,5347} %write{5346,5346}
temp	float	$tmp3131	 %read{5348,5348} %write{5347,5347}
temp	float	$tmp3132	 %read{5349,5349} %write{5348,5348}
temp	int	$tmp3133	 %read{5351,5351} %write{5350,5350}
temp	int	$tmp3134	 %read{5352,5352} %write{5351,5351}
temp	float	$tmp3135	 %read{5357,5357} %write{5352,5352}
temp	int	$tmp3136	 %read{5354,5354} %write{5353,5353}
temp	int	$tmp3137	 %read{5355,5355} %write{5354,5354}
temp	int	$tmp3138	 %read{5356,5356} %write{5355,5355}
temp	float	$tmp3139	 %read{5357,5357} %write{5356,5356}
temp	float	$tmp3140	 %read{5358,5358} %write{5357,5357}
temp	float	$tmp3141	 %read{5360,5360} %write{5359,5359}
temp	float	$tmp3142	 %read{5362,5362} %write{5360,5360}
temp	float	$tmp3143	 %read{5362,5362} %write{5361,5361}
temp	int	$tmp3144	 %read{5365,5365} %write{5364,5364}
temp	float	$tmp3145	 %read{5370,5370} %write{5365,5365}
temp	int	$tmp3146	 %read{5367,5367} %write{5366,5366}
temp	int	$tmp3147	 %read{5368,5368} %write{5367,5367}
temp	int	$tmp3148	 %read{5369,5369} %write{5368,5368}
temp	float	$tmp3149	 %read{5370,5370} %write{5369,5369}
temp	float	$tmp3150	 %read{5371,5371} %write{5370,5370}
temp	float	$tmp3151	 %read{7571,9744} %write{7547,9690}
temp	point	$tmp3152	 %read{5386,6462} %write{5377,6457}
temp	float	$tmp3153	 %read{5377,5377} %write{5374,5374}
temp	float	$tmp3154	 %read{5377,5377} %write{5375,5375}
temp	float	$tmp3155	 %read{5377,5377} %write{5376,5376}
temp	float	$tmp3156	 %read{5384,5384} %write{5383,5383}
temp	int	$tmp3157	 %read{5386,6457} %write{5386,6457}
temp	point	$tmp3158	 %read{5394,6446} %write{5389,6432}
temp	int	$tmp3159	 %read{5393,5393} %write{5392,5392}
temp	int	$tmp3160	 %read{5396,5396} %write{5395,5395}
temp	float	$tmp3161	 %read{5566,5566} %write{5565,5565}
temp	float	$tmp3162	 %read{5403,5403} %write{5402,5402}
temp	float	$tmp3163	 %read{5402,5402} %write{5401,5401}
temp	float	$tmp3164	 %read{5406,5406} %write{5405,5405}
temp	float	$tmp3165	 %read{5405,5405} %write{5404,5404}
temp	float	$tmp3166	 %read{5409,5409} %write{5408,5408}
temp	float	$tmp3167	 %read{5408,5408} %write{5407,5407}
temp	int	$tmp3168	 %read{5417,5417} %write{5416,5416}
temp	int	$tmp3169	 %read{5414,5564} %write{5414,5564}
temp	int	$tmp3170	 %read{5421,5421} %write{5420,5420}
temp	int	$tmp3171	 %read{5418,5562} %write{5418,5562}
temp	int	$tmp3172	 %read{5425,5425} %write{5424,5424}
temp	int	$tmp3173	 %read{5422,5560} %write{5422,5560}
temp	float	$tmp3174	 %read{5429,5429} %write{5426,5426}
temp	float	$tmp3175	 %read{5429,5429} %write{5427,5427}
temp	float	$tmp3176	 %read{5429,5429} %write{5428,5428}
temp	color	$tmp3177	 %read{5443,5443} %write{5442,5442}
temp	point	$tmp3178	 %read{5436,5436} %write{5435,5435}
temp	float	$tmp3179	 %read{5435,5435} %write{5432,5432}
temp	float	$tmp3180	 %read{5435,5435} %write{5433,5433}
temp	float	$tmp3181	 %read{5435,5435} %write{5434,5434}
temp	point	$tmp3182	 %read{5441,5441} %write{5440,5440}
temp	float	$tmp3183	 %read{5440,5440} %write{5437,5437}
temp	float	$tmp3184	 %read{5440,5440} %write{5438,5438}
temp	float	$tmp3185	 %read{5440,5440} %write{5439,5439}
temp	point	$tmp3186	 %read{5445,5445} %write{5444,5444}
temp	int	$tmp3187	 %read{5449,5449} %write{5448,5448}
temp	int	$tmp3188	 %read{5452,5452} %write{5451,5451}
temp	int	$tmp3189	 %read{5455,5455} %write{5454,5454}
temp	float	$tmp3190	 %read{5460,5460} %write{5457,5457}
temp	float	$tmp3191	 %read{5457,5457} %write{5456,5456}
temp	float	$tmp3192	 %read{5460,5460} %write{5459,5459}
temp	float	$tmp3193	 %read{5459,5459} %write{5458,5458}
temp	float	$tmp3194	 %read{5463,5463} %write{5460,5460}
temp	float	$tmp3195	 %read{5463,5463} %write{5462,5462}
temp	float	$tmp3196	 %read{5462,5462} %write{5461,5461}
temp	int	$tmp3197	 %read{5465,5465} %write{5464,5464}
temp	float	$tmp3198	 %read{5473,5473} %write{5467,5467}
temp	float	$tmp3199	 %read{5467,5467} %write{5466,5466}
temp	float	$tmp3200	 %read{5473,5473} %write{5472,5472}
temp	float	$tmp3201	 %read{5472,5472} %write{5469,5469}
temp	float	$tmp3202	 %read{5469,5469} %write{5468,5468}
temp	float	$tmp3203	 %read{5472,5472} %write{5471,5471}
temp	float	$tmp3204	 %read{5471,5471} %write{5470,5470}
temp	int	$tmp3205	 %read{5475,5475} %write{5474,5474}
temp	float	$tmp3206	 %read{5482,5482} %write{5478,5478}
temp	float	$tmp3207	 %read{5478,5478} %write{5477,5477}
temp	float	$tmp3208	 %read{5477,5477} %write{5476,5476}
temp	float	$tmp3209	 %read{5482,5482} %write{5481,5481}
temp	float	$tmp3210	 %read{5481,5481} %write{5480,5480}
temp	float	$tmp3211	 %read{5480,5480} %write{5479,5479}
temp	float	$tmp3212	 %read{5486,5486} %write{5482,5482}
temp	float	$tmp3213	 %read{5486,5486} %write{5485,5485}
temp	float	$tmp3214	 %read{5485,5485} %write{5484,5484}
temp	float	$tmp3215	 %read{5484,5484} %write{5483,5483}
temp	int	$tmp3216	 %read{5488,5488} %write{5487,5487}
temp	float	$tmp3217	 %read{5493,5493} %write{5492,5492}
temp	float	$tmp3218	 %read{5492,5492} %write{5491,5491}
temp	vector	$tmp3219	 %read{5491,5491} %write{5489,5489}
temp	vector	$tmp3220	 %read{5491,5491} %write{5490,5490}
temp	int	$tmp3221	 %read{5495,5495} %write{5494,5494}
temp	float	$tmp3222	 %read{5502,5502} %write{5498,5498}
temp	float	$tmp3223	 %read{5498,5498} %write{5497,5497}
temp	float	$tmp3224	 %read{5497,5497} %write{5496,5496}
temp	float	$tmp3225	 %read{5502,5502} %write{5501,5501}
temp	float	$tmp3226	 %read{5501,5501} %write{5500,5500}
temp	float	$tmp3227	 %read{5500,5500} %write{5499,5499}
temp	float	$tmp3228	 %read{5506,5506} %write{5502,5502}
temp	float	$tmp3229	 %read{5506,5506} %write{5505,5505}
temp	float	$tmp3230	 %read{5505,5505} %write{5504,5504}
temp	float	$tmp3231	 %read{5504,5504} %write{5503,5503}
temp	float	$tmp3232	 %read{5508,5508} %write{5506,5506}
temp	float	$tmp3233	 %read{5508,5508} %write{5507,5507}
temp	point	$tmp3234	 %read{5514,5514} %write{5513,5513}
temp	float	$tmp3235	 %read{5513,5513} %write{5510,5510}
temp	float	$tmp3236	 %read{5513,5513} %write{5511,5511}
temp	float	$tmp3237	 %read{5513,5513} %write{5512,5512}
temp	float	$tmp3238	 %read{5516,5516} %write{5515,5515}
temp	int	$tmp3239	 %read{5517,5517} %write{5516,5516}
temp	float	$tmp3240	 %read{5519,5519} %write{5518,5518}
temp	float	$tmp3241	 %read{5521,5521} %write{5520,5520}
temp	float	$tmp3242	 %read{5523,5523} %write{5522,5522}
temp	point	$tmp3243	 %read{5526,5526} %write{5525,5525}
temp	point	$tmp3244	 %read{5528,5528} %write{5527,5527}
temp	point	$tmp3245	 %read{5530,5530} %write{5529,5529}
temp	float	$tmp3246	 %read{5533,5533} %write{5532,5532}
temp	int	$tmp3247	 %read{5534,5534} %write{5533,5533}
temp	float	$tmp3248	 %read{5536,5536} %write{5535,5535}
temp	float	$tmp3249	 %read{5538,5538} %write{5537,5537}
temp	point	$tmp3250	 %read{5541,5541} %write{5540,5540}
temp	point	$tmp3251	 %read{5543,5543} %write{5542,5542}
temp	float	$tmp3252	 %read{5546,5546} %write{5545,5545}
temp	int	$tmp3253	 %read{5547,5547} %write{5546,5546}
temp	float	$tmp3254	 %read{5549,5549} %write{5548,5548}
temp	point	$tmp3255	 %read{5552,5552} %write{5551,5551}
temp	float	$tmp3256	 %read{5555,5555} %write{5554,5554}
temp	int	$tmp3257	 %read{5556,5556} %write{5555,5555}
temp	int	$tmp3258	 %read{2147483647,-1} %write{5559,5559}
temp	int	$tmp3259	 %read{2147483647,-1} %write{5561,5561}
temp	int	$tmp3260	 %read{2147483647,-1} %write{5563,5563}
temp	float	$tmp3261	 %read{5567,5567} %write{5566,5566}
temp	int	$tmp3262	 %read{5569,5569} %write{5568,5568}
temp	float	$tmp3263	 %read{5739,5739} %write{5738,5738}
temp	float	$tmp3264	 %read{5576,5576} %write{5575,5575}
temp	float	$tmp3265	 %read{5575,5575} %write{5574,5574}
temp	float	$tmp3266	 %read{5579,5579} %write{5578,5578}
temp	float	$tmp3267	 %read{5578,5578} %write{5577,5577}
temp	float	$tmp3268	 %read{5582,5582} %write{5581,5581}
temp	float	$tmp3269	 %read{5581,5581} %write{5580,5580}
temp	int	$tmp3270	 %read{5590,5590} %write{5589,5589}
temp	int	$tmp3271	 %read{5587,5737} %write{5587,5737}
temp	int	$tmp3272	 %read{5594,5594} %write{5593,5593}
temp	int	$tmp3273	 %read{5591,5735} %write{5591,5735}
temp	int	$tmp3274	 %read{5598,5598} %write{5597,5597}
temp	int	$tmp3275	 %read{5595,5733} %write{5595,5733}
temp	float	$tmp3276	 %read{5602,5602} %write{5599,5599}
temp	float	$tmp3277	 %read{5602,5602} %write{5600,5600}
temp	float	$tmp3278	 %read{5602,5602} %write{5601,5601}
temp	color	$tmp3279	 %read{5616,5616} %write{5615,5615}
temp	point	$tmp3280	 %read{5609,5609} %write{5608,5608}
temp	float	$tmp3281	 %read{5608,5608} %write{5605,5605}
temp	float	$tmp3282	 %read{5608,5608} %write{5606,5606}
temp	float	$tmp3283	 %read{5608,5608} %write{5607,5607}
temp	point	$tmp3284	 %read{5614,5614} %write{5613,5613}
temp	float	$tmp3285	 %read{5613,5613} %write{5610,5610}
temp	float	$tmp3286	 %read{5613,5613} %write{5611,5611}
temp	float	$tmp3287	 %read{5613,5613} %write{5612,5612}
temp	point	$tmp3288	 %read{5618,5618} %write{5617,5617}
temp	int	$tmp3289	 %read{5622,5622} %write{5621,5621}
temp	int	$tmp3290	 %read{5625,5625} %write{5624,5624}
temp	int	$tmp3291	 %read{5628,5628} %write{5627,5627}
temp	float	$tmp3292	 %read{5633,5633} %write{5630,5630}
temp	float	$tmp3293	 %read{5630,5630} %write{5629,5629}
temp	float	$tmp3294	 %read{5633,5633} %write{5632,5632}
temp	float	$tmp3295	 %read{5632,5632} %write{5631,5631}
temp	float	$tmp3296	 %read{5636,5636} %write{5633,5633}
temp	float	$tmp3297	 %read{5636,5636} %write{5635,5635}
temp	float	$tmp3298	 %read{5635,5635} %write{5634,5634}
temp	int	$tmp3299	 %read{5638,5638} %write{5637,5637}
temp	float	$tmp3300	 %read{5646,5646} %write{5640,5640}
temp	float	$tmp3301	 %read{5640,5640} %write{5639,5639}
temp	float	$tmp3302	 %read{5646,5646} %write{5645,5645}
temp	float	$tmp3303	 %read{5645,5645} %write{5642,5642}
temp	float	$tmp3304	 %read{5642,5642} %write{5641,5641}
temp	float	$tmp3305	 %read{5645,5645} %write{5644,5644}
temp	float	$tmp3306	 %read{5644,5644} %write{5643,5643}
temp	int	$tmp3307	 %read{5648,5648} %write{5647,5647}
temp	float	$tmp3308	 %read{5655,5655} %write{5651,5651}
temp	float	$tmp3309	 %read{5651,5651} %write{5650,5650}
temp	float	$tmp3310	 %read{5650,5650} %write{5649,5649}
temp	float	$tmp3311	 %read{5655,5655} %write{5654,5654}
temp	float	$tmp3312	 %read{5654,5654} %write{5653,5653}
temp	float	$tmp3313	 %read{5653,5653} %write{5652,5652}
temp	float	$tmp3314	 %read{5659,5659} %write{5655,5655}
temp	float	$tmp3315	 %read{5659,5659} %write{5658,5658}
temp	float	$tmp3316	 %read{5658,5658} %write{5657,5657}
temp	float	$tmp3317	 %read{5657,5657} %write{5656,5656}
temp	int	$tmp3318	 %read{5661,5661} %write{5660,5660}
temp	float	$tmp3319	 %read{5666,5666} %write{5665,5665}
temp	float	$tmp3320	 %read{5665,5665} %write{5664,5664}
temp	vector	$tmp3321	 %read{5664,5664} %write{5662,5662}
temp	vector	$tmp3322	 %read{5664,5664} %write{5663,5663}
temp	int	$tmp3323	 %read{5668,5668} %write{5667,5667}
temp	float	$tmp3324	 %read{5675,5675} %write{5671,5671}
temp	float	$tmp3325	 %read{5671,5671} %write{5670,5670}
temp	float	$tmp3326	 %read{5670,5670} %write{5669,5669}
temp	float	$tmp3327	 %read{5675,5675} %write{5674,5674}
temp	float	$tmp3328	 %read{5674,5674} %write{5673,5673}
temp	float	$tmp3329	 %read{5673,5673} %write{5672,5672}
temp	float	$tmp3330	 %read{5679,5679} %write{5675,5675}
temp	float	$tmp3331	 %read{5679,5679} %write{5678,5678}
temp	float	$tmp3332	 %read{5678,5678} %write{5677,5677}
temp	float	$tmp3333	 %read{5677,5677} %write{5676,5676}
temp	float	$tmp3334	 %read{5681,5681} %write{5679,5679}
temp	float	$tmp3335	 %read{5681,5681} %write{5680,5680}
temp	point	$tmp3336	 %read{5687,5687} %write{5686,5686}
temp	float	$tmp3337	 %read{5686,5686} %write{5683,5683}
temp	float	$tmp3338	 %read{5686,5686} %write{5684,5684}
temp	float	$tmp3339	 %read{5686,5686} %write{5685,5685}
temp	float	$tmp3340	 %read{5689,5689} %write{5688,5688}
temp	int	$tmp3341	 %read{5690,5690} %write{5689,5689}
temp	float	$tmp3342	 %read{5692,5692} %write{5691,5691}
temp	float	$tmp3343	 %read{5694,5694} %write{5693,5693}
temp	float	$tmp3344	 %read{5696,5696} %write{5695,5695}
temp	point	$tmp3345	 %read{5699,5699} %write{5698,5698}
temp	point	$tmp3346	 %read{5701,5701} %write{5700,5700}
temp	point	$tmp3347	 %read{5703,5703} %write{5702,5702}
temp	float	$tmp3348	 %read{5706,5706} %write{5705,5705}
temp	int	$tmp3349	 %read{5707,5707} %write{5706,5706}
temp	float	$tmp3350	 %read{5709,5709} %write{5708,5708}
temp	float	$tmp3351	 %read{5711,5711} %write{5710,5710}
temp	point	$tmp3352	 %read{5714,5714} %write{5713,5713}
temp	point	$tmp3353	 %read{5716,5716} %write{5715,5715}
temp	float	$tmp3354	 %read{5719,5719} %write{5718,5718}
temp	int	$tmp3355	 %read{5720,5720} %write{5719,5719}
temp	float	$tmp3356	 %read{5722,5722} %write{5721,5721}
temp	point	$tmp3357	 %read{5725,5725} %write{5724,5724}
temp	float	$tmp3358	 %read{5728,5728} %write{5727,5727}
temp	int	$tmp3359	 %read{5729,5729} %write{5728,5728}
temp	int	$tmp3360	 %read{2147483647,-1} %write{5732,5732}
temp	int	$tmp3361	 %read{2147483647,-1} %write{5734,5734}
temp	int	$tmp3362	 %read{2147483647,-1} %write{5736,5736}
temp	float	$tmp3363	 %read{5740,5740} %write{5739,5739}
temp	int	$tmp3364	 %read{5742,5742} %write{5741,5741}
temp	float	$tmp3365	 %read{5912,5912} %write{5911,5911}
temp	float	$tmp3366	 %read{5749,5749} %write{5748,5748}
temp	float	$tmp3367	 %read{5748,5748} %write{5747,5747}
temp	float	$tmp3368	 %read{5752,5752} %write{5751,5751}
temp	float	$tmp3369	 %read{5751,5751} %write{5750,5750}
temp	float	$tmp3370	 %read{5755,5755} %write{5754,5754}
temp	float	$tmp3371	 %read{5754,5754} %write{5753,5753}
temp	int	$tmp3372	 %read{5763,5763} %write{5762,5762}
temp	int	$tmp3373	 %read{5760,5910} %write{5760,5910}
temp	int	$tmp3374	 %read{5767,5767} %write{5766,5766}
temp	int	$tmp3375	 %read{5764,5908} %write{5764,5908}
temp	int	$tmp3376	 %read{5771,5771} %write{5770,5770}
temp	int	$tmp3377	 %read{5768,5906} %write{5768,5906}
temp	float	$tmp3378	 %read{5775,5775} %write{5772,5772}
temp	float	$tmp3379	 %read{5775,5775} %write{5773,5773}
temp	float	$tmp3380	 %read{5775,5775} %write{5774,5774}
temp	color	$tmp3381	 %read{5789,5789} %write{5788,5788}
temp	point	$tmp3382	 %read{5782,5782} %write{5781,5781}
temp	float	$tmp3383	 %read{5781,5781} %write{5778,5778}
temp	float	$tmp3384	 %read{5781,5781} %write{5779,5779}
temp	float	$tmp3385	 %read{5781,5781} %write{5780,5780}
temp	point	$tmp3386	 %read{5787,5787} %write{5786,5786}
temp	float	$tmp3387	 %read{5786,5786} %write{5783,5783}
temp	float	$tmp3388	 %read{5786,5786} %write{5784,5784}
temp	float	$tmp3389	 %read{5786,5786} %write{5785,5785}
temp	point	$tmp3390	 %read{5791,5791} %write{5790,5790}
temp	int	$tmp3391	 %read{5795,5795} %write{5794,5794}
temp	int	$tmp3392	 %read{5798,5798} %write{5797,5797}
temp	int	$tmp3393	 %read{5801,5801} %write{5800,5800}
temp	float	$tmp3394	 %read{5806,5806} %write{5803,5803}
temp	float	$tmp3395	 %read{5803,5803} %write{5802,5802}
temp	float	$tmp3396	 %read{5806,5806} %write{5805,5805}
temp	float	$tmp3397	 %read{5805,5805} %write{5804,5804}
temp	float	$tmp3398	 %read{5809,5809} %write{5806,5806}
temp	float	$tmp3399	 %read{5809,5809} %write{5808,5808}
temp	float	$tmp3400	 %read{5808,5808} %write{5807,5807}
temp	int	$tmp3401	 %read{5811,5811} %write{5810,5810}
temp	float	$tmp3402	 %read{5819,5819} %write{5813,5813}
temp	float	$tmp3403	 %read{5813,5813} %write{5812,5812}
temp	float	$tmp3404	 %read{5819,5819} %write{5818,5818}
temp	float	$tmp3405	 %read{5818,5818} %write{5815,5815}
temp	float	$tmp3406	 %read{5815,5815} %write{5814,5814}
temp	float	$tmp3407	 %read{5818,5818} %write{5817,5817}
temp	float	$tmp3408	 %read{5817,5817} %write{5816,5816}
temp	int	$tmp3409	 %read{5821,5821} %write{5820,5820}
temp	float	$tmp3410	 %read{5828,5828} %write{5824,5824}
temp	float	$tmp3411	 %read{5824,5824} %write{5823,5823}
temp	float	$tmp3412	 %read{5823,5823} %write{5822,5822}
temp	float	$tmp3413	 %read{5828,5828} %write{5827,5827}
temp	float	$tmp3414	 %read{5827,5827} %write{5826,5826}
temp	float	$tmp3415	 %read{5826,5826} %write{5825,5825}
temp	float	$tmp3416	 %read{5832,5832} %write{5828,5828}
temp	float	$tmp3417	 %read{5832,5832} %write{5831,5831}
temp	float	$tmp3418	 %read{5831,5831} %write{5830,5830}
temp	float	$tmp3419	 %read{5830,5830} %write{5829,5829}
temp	int	$tmp3420	 %read{5834,5834} %write{5833,5833}
temp	float	$tmp3421	 %read{5839,5839} %write{5838,5838}
temp	float	$tmp3422	 %read{5838,5838} %write{5837,5837}
temp	vector	$tmp3423	 %read{5837,5837} %write{5835,5835}
temp	vector	$tmp3424	 %read{5837,5837} %write{5836,5836}
temp	int	$tmp3425	 %read{5841,5841} %write{5840,5840}
temp	float	$tmp3426	 %read{5848,5848} %write{5844,5844}
temp	float	$tmp3427	 %read{5844,5844} %write{5843,5843}
temp	float	$tmp3428	 %read{5843,5843} %write{5842,5842}
temp	float	$tmp3429	 %read{5848,5848} %write{5847,5847}
temp	float	$tmp3430	 %read{5847,5847} %write{5846,5846}
temp	float	$tmp3431	 %read{5846,5846} %write{5845,5845}
temp	float	$tmp3432	 %read{5852,5852} %write{5848,5848}
temp	float	$tmp3433	 %read{5852,5852} %write{5851,5851}
temp	float	$tmp3434	 %read{5851,5851} %write{5850,5850}
temp	float	$tmp3435	 %read{5850,5850} %write{5849,5849}
temp	float	$tmp3436	 %read{5854,5854} %write{5852,5852}
temp	float	$tmp3437	 %read{5854,5854} %write{5853,5853}
temp	point	$tmp3438	 %read{5860,5860} %write{5859,5859}
temp	float	$tmp3439	 %read{5859,5859} %write{5856,5856}
temp	float	$tmp3440	 %read{5859,5859} %write{5857,5857}
temp	float	$tmp3441	 %read{5859,5859} %write{5858,5858}
temp	float	$tmp3442	 %read{5862,5862} %write{5861,5861}
temp	int	$tmp3443	 %read{5863,5863} %write{5862,5862}
temp	float	$tmp3444	 %read{5865,5865} %write{5864,5864}
temp	float	$tmp3445	 %read{5867,5867} %write{5866,5866}
temp	float	$tmp3446	 %read{5869,5869} %write{5868,5868}
temp	point	$tmp3447	 %read{5872,5872} %write{5871,5871}
temp	point	$tmp3448	 %read{5874,5874} %write{5873,5873}
temp	point	$tmp3449	 %read{5876,5876} %write{5875,5875}
temp	float	$tmp3450	 %read{5879,5879} %write{5878,5878}
temp	int	$tmp3451	 %read{5880,5880} %write{5879,5879}
temp	float	$tmp3452	 %read{5882,5882} %write{5881,5881}
temp	float	$tmp3453	 %read{5884,5884} %write{5883,5883}
temp	point	$tmp3454	 %read{5887,5887} %write{5886,5886}
temp	point	$tmp3455	 %read{5889,5889} %write{5888,5888}
temp	float	$tmp3456	 %read{5892,5892} %write{5891,5891}
temp	int	$tmp3457	 %read{5893,5893} %write{5892,5892}
temp	float	$tmp3458	 %read{5895,5895} %write{5894,5894}
temp	point	$tmp3459	 %read{5898,5898} %write{5897,5897}
temp	float	$tmp3460	 %read{5901,5901} %write{5900,5900}
temp	int	$tmp3461	 %read{5902,5902} %write{5901,5901}
temp	int	$tmp3462	 %read{2147483647,-1} %write{5905,5905}
temp	int	$tmp3463	 %read{2147483647,-1} %write{5907,5907}
temp	int	$tmp3464	 %read{2147483647,-1} %write{5909,5909}
temp	float	$tmp3465	 %read{5913,5913} %write{5912,5912}
temp	int	$tmp3466	 %read{5915,5915} %write{5914,5914}
temp	float	$tmp3467	 %read{6085,6085} %write{6084,6084}
temp	float	$tmp3468	 %read{5922,5922} %write{5921,5921}
temp	float	$tmp3469	 %read{5921,5921} %write{5920,5920}
temp	float	$tmp3470	 %read{5925,5925} %write{5924,5924}
temp	float	$tmp3471	 %read{5924,5924} %write{5923,5923}
temp	float	$tmp3472	 %read{5928,5928} %write{5927,5927}
temp	float	$tmp3473	 %read{5927,5927} %write{5926,5926}
temp	int	$tmp3474	 %read{5936,5936} %write{5935,5935}
temp	int	$tmp3475	 %read{5933,6083} %write{5933,6083}
temp	int	$tmp3476	 %read{5940,5940} %write{5939,5939}
temp	int	$tmp3477	 %read{5937,6081} %write{5937,6081}
temp	int	$tmp3478	 %read{5944,5944} %write{5943,5943}
temp	int	$tmp3479	 %read{5941,6079} %write{5941,6079}
temp	float	$tmp3480	 %read{5948,5948} %write{5945,5945}
temp	float	$tmp3481	 %read{5948,5948} %write{5946,5946}
temp	float	$tmp3482	 %read{5948,5948} %write{5947,5947}
temp	color	$tmp3483	 %read{5962,5962} %write{5961,5961}
temp	point	$tmp3484	 %read{5955,5955} %write{5954,5954}
temp	float	$tmp3485	 %read{5954,5954} %write{5951,5951}
temp	float	$tmp3486	 %read{5954,5954} %write{5952,5952}
temp	float	$tmp3487	 %read{5954,5954} %write{5953,5953}
temp	point	$tmp3488	 %read{5960,5960} %write{5959,5959}
temp	float	$tmp3489	 %read{5959,5959} %write{5956,5956}
temp	float	$tmp3490	 %read{5959,5959} %write{5957,5957}
temp	float	$tmp3491	 %read{5959,5959} %write{5958,5958}
temp	point	$tmp3492	 %read{5964,5964} %write{5963,5963}
temp	int	$tmp3493	 %read{5968,5968} %write{5967,5967}
temp	int	$tmp3494	 %read{5971,5971} %write{5970,5970}
temp	int	$tmp3495	 %read{5974,5974} %write{5973,5973}
temp	float	$tmp3496	 %read{5979,5979} %write{5976,5976}
temp	float	$tmp3497	 %read{5976,5976} %write{5975,5975}
temp	float	$tmp3498	 %read{5979,5979} %write{5978,5978}
temp	float	$tmp3499	 %read{5978,5978} %write{5977,5977}
temp	float	$tmp3500	 %read{5982,5982} %write{5979,5979}
temp	float	$tmp3501	 %read{5982,5982} %write{5981,5981}
temp	float	$tmp3502	 %read{5981,5981} %write{5980,5980}
temp	int	$tmp3503	 %read{5984,5984} %write{5983,5983}
temp	float	$tmp3504	 %read{5992,5992} %write{5986,5986}
temp	float	$tmp3505	 %read{5986,5986} %write{5985,5985}
temp	float	$tmp3506	 %read{5992,5992} %write{5991,5991}
temp	float	$tmp3507	 %read{5991,5991} %write{5988,5988}
temp	float	$tmp3508	 %read{5988,5988} %write{5987,5987}
temp	float	$tmp3509	 %read{5991,5991} %write{5990,5990}
temp	float	$tmp3510	 %read{5990,5990} %write{5989,5989}
temp	int	$tmp3511	 %read{5994,5994} %write{5993,5993}
temp	float	$tmp3512	 %read{6001,6001} %write{5997,5997}
temp	float	$tmp3513	 %read{5997,5997} %write{5996,5996}
temp	float	$tmp3514	 %read{5996,5996} %write{5995,5995}
temp	float	$tmp3515	 %read{6001,6001} %write{6000,6000}
temp	float	$tmp3516	 %read{6000,6000} %write{5999,5999}
temp	float	$tmp3517	 %read{5999,5999} %write{5998,5998}
temp	float	$tmp3518	 %read{6005,6005} %write{6001,6001}
temp	float	$tmp3519	 %read{6005,6005} %write{6004,6004}
temp	float	$tmp3520	 %read{6004,6004} %write{6003,6003}
temp	float	$tmp3521	 %read{6003,6003} %write{6002,6002}
temp	int	$tmp3522	 %read{6007,6007} %write{6006,6006}
temp	float	$tmp3523	 %read{6012,6012} %write{6011,6011}
temp	float	$tmp3524	 %read{6011,6011} %write{6010,6010}
temp	vector	$tmp3525	 %read{6010,6010} %write{6008,6008}
temp	vector	$tmp3526	 %read{6010,6010} %write{6009,6009}
temp	int	$tmp3527	 %read{6014,6014} %write{6013,6013}
temp	float	$tmp3528	 %read{6021,6021} %write{6017,6017}
temp	float	$tmp3529	 %read{6017,6017} %write{6016,6016}
temp	float	$tmp3530	 %read{6016,6016} %write{6015,6015}
temp	float	$tmp3531	 %read{6021,6021} %write{6020,6020}
temp	float	$tmp3532	 %read{6020,6020} %write{6019,6019}
temp	float	$tmp3533	 %read{6019,6019} %write{6018,6018}
temp	float	$tmp3534	 %read{6025,6025} %write{6021,6021}
temp	float	$tmp3535	 %read{6025,6025} %write{6024,6024}
temp	float	$tmp3536	 %read{6024,6024} %write{6023,6023}
temp	float	$tmp3537	 %read{6023,6023} %write{6022,6022}
temp	float	$tmp3538	 %read{6027,6027} %write{6025,6025}
temp	float	$tmp3539	 %read{6027,6027} %write{6026,6026}
temp	point	$tmp3540	 %read{6033,6033} %write{6032,6032}
temp	float	$tmp3541	 %read{6032,6032} %write{6029,6029}
temp	float	$tmp3542	 %read{6032,6032} %write{6030,6030}
temp	float	$tmp3543	 %read{6032,6032} %write{6031,6031}
temp	float	$tmp3544	 %read{6035,6035} %write{6034,6034}
temp	int	$tmp3545	 %read{6036,6036} %write{6035,6035}
temp	float	$tmp3546	 %read{6038,6038} %write{6037,6037}
temp	float	$tmp3547	 %read{6040,6040} %write{6039,6039}
temp	float	$tmp3548	 %read{6042,6042} %write{6041,6041}
temp	point	$tmp3549	 %read{6045,6045} %write{6044,6044}
temp	point	$tmp3550	 %read{6047,6047} %write{6046,6046}
temp	point	$tmp3551	 %read{6049,6049} %write{6048,6048}
temp	float	$tmp3552	 %read{6052,6052} %write{6051,6051}
temp	int	$tmp3553	 %read{6053,6053} %write{6052,6052}
temp	float	$tmp3554	 %read{6055,6055} %write{6054,6054}
temp	float	$tmp3555	 %read{6057,6057} %write{6056,6056}
temp	point	$tmp3556	 %read{6060,6060} %write{6059,6059}
temp	point	$tmp3557	 %read{6062,6062} %write{6061,6061}
temp	float	$tmp3558	 %read{6065,6065} %write{6064,6064}
temp	int	$tmp3559	 %read{6066,6066} %write{6065,6065}
temp	float	$tmp3560	 %read{6068,6068} %write{6067,6067}
temp	point	$tmp3561	 %read{6071,6071} %write{6070,6070}
temp	float	$tmp3562	 %read{6074,6074} %write{6073,6073}
temp	int	$tmp3563	 %read{6075,6075} %write{6074,6074}
temp	int	$tmp3564	 %read{2147483647,-1} %write{6078,6078}
temp	int	$tmp3565	 %read{2147483647,-1} %write{6080,6080}
temp	int	$tmp3566	 %read{2147483647,-1} %write{6082,6082}
temp	float	$tmp3567	 %read{6086,6086} %write{6085,6085}
temp	int	$tmp3568	 %read{6088,6088} %write{6087,6087}
temp	float	$tmp3569	 %read{6260,6260} %write{6259,6259}
temp	float	$tmp3570	 %read{6095,6095} %write{6094,6094}
temp	float	$tmp3571	 %read{6094,6094} %write{6093,6093}
temp	float	$tmp3572	 %read{6098,6098} %write{6097,6097}
temp	float	$tmp3573	 %read{6097,6097} %write{6096,6096}
temp	float	$tmp3574	 %read{6101,6101} %write{6100,6100}
temp	float	$tmp3575	 %read{6100,6100} %write{6099,6099}
temp	int	$tmp3576	 %read{6109,6109} %write{6108,6108}
temp	int	$tmp3577	 %read{6106,6256} %write{6106,6256}
temp	int	$tmp3578	 %read{6113,6113} %write{6112,6112}
temp	int	$tmp3579	 %read{6110,6254} %write{6110,6254}
temp	int	$tmp3580	 %read{6117,6117} %write{6116,6116}
temp	int	$tmp3581	 %read{6114,6252} %write{6114,6252}
temp	float	$tmp3582	 %read{6121,6121} %write{6118,6118}
temp	float	$tmp3583	 %read{6121,6121} %write{6119,6119}
temp	float	$tmp3584	 %read{6121,6121} %write{6120,6120}
temp	color	$tmp3585	 %read{6135,6135} %write{6134,6134}
temp	point	$tmp3586	 %read{6128,6128} %write{6127,6127}
temp	float	$tmp3587	 %read{6127,6127} %write{6124,6124}
temp	float	$tmp3588	 %read{6127,6127} %write{6125,6125}
temp	float	$tmp3589	 %read{6127,6127} %write{6126,6126}
temp	point	$tmp3590	 %read{6133,6133} %write{6132,6132}
temp	float	$tmp3591	 %read{6132,6132} %write{6129,6129}
temp	float	$tmp3592	 %read{6132,6132} %write{6130,6130}
temp	float	$tmp3593	 %read{6132,6132} %write{6131,6131}
temp	point	$tmp3594	 %read{6137,6137} %write{6136,6136}
temp	int	$tmp3595	 %read{6141,6141} %write{6140,6140}
temp	int	$tmp3596	 %read{6144,6144} %write{6143,6143}
temp	int	$tmp3597	 %read{6147,6147} %write{6146,6146}
temp	float	$tmp3598	 %read{6152,6152} %write{6149,6149}
temp	float	$tmp3599	 %read{6149,6149} %write{6148,6148}
temp	float	$tmp3600	 %read{6152,6152} %write{6151,6151}
temp	float	$tmp3601	 %read{6151,6151} %write{6150,6150}
temp	float	$tmp3602	 %read{6155,6155} %write{6152,6152}
temp	float	$tmp3603	 %read{6155,6155} %write{6154,6154}
temp	float	$tmp3604	 %read{6154,6154} %write{6153,6153}
temp	int	$tmp3605	 %read{6157,6157} %write{6156,6156}
temp	float	$tmp3606	 %read{6165,6165} %write{6159,6159}
temp	float	$tmp3607	 %read{6159,6159} %write{6158,6158}
temp	float	$tmp3608	 %read{6165,6165} %write{6164,6164}
temp	float	$tmp3609	 %read{6164,6164} %write{6161,6161}
temp	float	$tmp3610	 %read{6161,6161} %write{6160,6160}
temp	float	$tmp3611	 %read{6164,6164} %write{6163,6163}
temp	float	$tmp3612	 %read{6163,6163} %write{6162,6162}
temp	int	$tmp3613	 %read{6167,6167} %write{6166,6166}
temp	float	$tmp3614	 %read{6174,6174} %write{6170,6170}
temp	float	$tmp3615	 %read{6170,6170} %write{6169,6169}
temp	float	$tmp3616	 %read{6169,6169} %write{6168,6168}
temp	float	$tmp3617	 %read{6174,6174} %write{6173,6173}
temp	float	$tmp3618	 %read{6173,6173} %write{6172,6172}
temp	float	$tmp3619	 %read{6172,6172} %write{6171,6171}
temp	float	$tmp3620	 %read{6178,6178} %write{6174,6174}
temp	float	$tmp3621	 %read{6178,6178} %write{6177,6177}
temp	float	$tmp3622	 %read{6177,6177} %write{6176,6176}
temp	float	$tmp3623	 %read{6176,6176} %write{6175,6175}
temp	int	$tmp3624	 %read{6180,6180} %write{6179,6179}
temp	float	$tmp3625	 %read{6185,6185} %write{6184,6184}
temp	float	$tmp3626	 %read{6184,6184} %write{6183,6183}
temp	vector	$tmp3627	 %read{6183,6183} %write{6181,6181}
temp	vector	$tmp3628	 %read{6183,6183} %write{6182,6182}
temp	int	$tmp3629	 %read{6187,6187} %write{6186,6186}
temp	float	$tmp3630	 %read{6194,6194} %write{6190,6190}
temp	float	$tmp3631	 %read{6190,6190} %write{6189,6189}
temp	float	$tmp3632	 %read{6189,6189} %write{6188,6188}
temp	float	$tmp3633	 %read{6194,6194} %write{6193,6193}
temp	float	$tmp3634	 %read{6193,6193} %write{6192,6192}
temp	float	$tmp3635	 %read{6192,6192} %write{6191,6191}
temp	float	$tmp3636	 %read{6198,6198} %write{6194,6194}
temp	float	$tmp3637	 %read{6198,6198} %write{6197,6197}
temp	float	$tmp3638	 %read{6197,6197} %write{6196,6196}
temp	float	$tmp3639	 %read{6196,6196} %write{6195,6195}
temp	float	$tmp3640	 %read{6200,6200} %write{6198,6198}
temp	float	$tmp3641	 %read{6200,6200} %write{6199,6199}
temp	point	$tmp3642	 %read{6206,6206} %write{6205,6205}
temp	float	$tmp3643	 %read{6205,6205} %write{6202,6202}
temp	float	$tmp3644	 %read{6205,6205} %write{6203,6203}
temp	float	$tmp3645	 %read{6205,6205} %write{6204,6204}
temp	float	$tmp3646	 %read{6208,6208} %write{6207,6207}
temp	int	$tmp3647	 %read{6209,6209} %write{6208,6208}
temp	float	$tmp3648	 %read{6211,6211} %write{6210,6210}
temp	float	$tmp3649	 %read{6213,6213} %write{6212,6212}
temp	float	$tmp3650	 %read{6215,6215} %write{6214,6214}
temp	point	$tmp3651	 %read{6218,6218} %write{6217,6217}
temp	point	$tmp3652	 %read{6220,6220} %write{6219,6219}
temp	point	$tmp3653	 %read{6222,6222} %write{6221,6221}
temp	float	$tmp3654	 %read{6225,6225} %write{6224,6224}
temp	int	$tmp3655	 %read{6226,6226} %write{6225,6225}
temp	float	$tmp3656	 %read{6228,6228} %write{6227,6227}
temp	float	$tmp3657	 %read{6230,6230} %write{6229,6229}
temp	point	$tmp3658	 %read{6233,6233} %write{6232,6232}
temp	point	$tmp3659	 %read{6235,6235} %write{6234,6234}
temp	float	$tmp3660	 %read{6238,6238} %write{6237,6237}
temp	int	$tmp3661	 %read{6239,6239} %write{6238,6238}
temp	float	$tmp3662	 %read{6241,6241} %write{6240,6240}
temp	point	$tmp3663	 %read{6244,6244} %write{6243,6243}
temp	float	$tmp3664	 %read{6247,6247} %write{6246,6246}
temp	int	$tmp3665	 %read{6248,6248} %write{6247,6247}
temp	int	$tmp3666	 %read{2147483647,-1} %write{6251,6251}
temp	int	$tmp3667	 %read{2147483647,-1} %write{6253,6253}
temp	int	$tmp3668	 %read{2147483647,-1} %write{6255,6255}
temp	float	$tmp3669	 %read{6259,6259} %write{6257,6257}
temp	float	$tmp3670	 %read{6259,6259} %write{6258,6258}
temp	float	$tmp3671	 %read{6261,6261} %write{6260,6260}
temp	int	$tmp3672	 %read{6263,6263} %write{6262,6262}
temp	float	$tmp3673	 %read{6442,6442} %write{6439,6440}
temp	float	$tmp3674	 %read{6436,6436} %write{6435,6435}
temp	float	$tmp3675	 %read{6271,6271} %write{6270,6270}
temp	float	$tmp3676	 %read{6270,6270} %write{6269,6269}
temp	float	$tmp3677	 %read{6274,6274} %write{6273,6273}
temp	float	$tmp3678	 %read{6273,6273} %write{6272,6272}
temp	float	$tmp3679	 %read{6277,6277} %write{6276,6276}
temp	float	$tmp3680	 %read{6276,6276} %write{6275,6275}
temp	int	$tmp3681	 %read{6285,6285} %write{6284,6284}
temp	int	$tmp3682	 %read{6282,6432} %write{6282,6432}
temp	int	$tmp3683	 %read{6289,6289} %write{6288,6288}
temp	int	$tmp3684	 %read{6286,6430} %write{6286,6430}
temp	int	$tmp3685	 %read{6293,6293} %write{6292,6292}
temp	int	$tmp3686	 %read{6290,6428} %write{6290,6428}
temp	float	$tmp3687	 %read{6297,6297} %write{6294,6294}
temp	float	$tmp3688	 %read{6297,6297} %write{6295,6295}
temp	float	$tmp3689	 %read{6297,6297} %write{6296,6296}
temp	color	$tmp3690	 %read{6311,6311} %write{6310,6310}
temp	point	$tmp3691	 %read{6304,6304} %write{6303,6303}
temp	float	$tmp3692	 %read{6303,6303} %write{6300,6300}
temp	float	$tmp3693	 %read{6303,6303} %write{6301,6301}
temp	float	$tmp3694	 %read{6303,6303} %write{6302,6302}
temp	point	$tmp3695	 %read{6309,6309} %write{6308,6308}
temp	float	$tmp3696	 %read{6308,6308} %write{6305,6305}
temp	float	$tmp3697	 %read{6308,6308} %write{6306,6306}
temp	float	$tmp3698	 %read{6308,6308} %write{6307,6307}
temp	point	$tmp3699	 %read{6313,6313} %write{6312,6312}
temp	int	$tmp3700	 %read{6317,6317} %write{6316,6316}
temp	int	$tmp3701	 %read{6320,6320} %write{6319,6319}
temp	int	$tmp3702	 %read{6323,6323} %write{6322,6322}
temp	float	$tmp3703	 %read{6328,6328} %write{6325,6325}
temp	float	$tmp3704	 %read{6325,6325} %write{6324,6324}
temp	float	$tmp3705	 %read{6328,6328} %write{6327,6327}
temp	float	$tmp3706	 %read{6327,6327} %write{6326,6326}
temp	float	$tmp3707	 %read{6331,6331} %write{6328,6328}
temp	float	$tmp3708	 %read{6331,6331} %write{6330,6330}
temp	float	$tmp3709	 %read{6330,6330} %write{6329,6329}
temp	int	$tmp3710	 %read{6333,6333} %write{6332,6332}
temp	float	$tmp3711	 %read{6341,6341} %write{6335,6335}
temp	float	$tmp3712	 %read{6335,6335} %write{6334,6334}
temp	float	$tmp3713	 %read{6341,6341} %write{6340,6340}
temp	float	$tmp3714	 %read{6340,6340} %write{6337,6337}
temp	float	$tmp3715	 %read{6337,6337} %write{6336,6336}
temp	float	$tmp3716	 %read{6340,6340} %write{6339,6339}
temp	float	$tmp3717	 %read{6339,6339} %write{6338,6338}
temp	int	$tmp3718	 %read{6343,6343} %write{6342,6342}
temp	float	$tmp3719	 %read{6350,6350} %write{6346,6346}
temp	float	$tmp3720	 %read{6346,6346} %write{6345,6345}
temp	float	$tmp3721	 %read{6345,6345} %write{6344,6344}
temp	float	$tmp3722	 %read{6350,6350} %write{6349,6349}
temp	float	$tmp3723	 %read{6349,6349} %write{6348,6348}
temp	float	$tmp3724	 %read{6348,6348} %write{6347,6347}
temp	float	$tmp3725	 %read{6354,6354} %write{6350,6350}
temp	float	$tmp3726	 %read{6354,6354} %write{6353,6353}
temp	float	$tmp3727	 %read{6353,6353} %write{6352,6352}
temp	float	$tmp3728	 %read{6352,6352} %write{6351,6351}
temp	int	$tmp3729	 %read{6356,6356} %write{6355,6355}
temp	float	$tmp3730	 %read{6361,6361} %write{6360,6360}
temp	float	$tmp3731	 %read{6360,6360} %write{6359,6359}
temp	vector	$tmp3732	 %read{6359,6359} %write{6357,6357}
temp	vector	$tmp3733	 %read{6359,6359} %write{6358,6358}
temp	int	$tmp3734	 %read{6363,6363} %write{6362,6362}
temp	float	$tmp3735	 %read{6370,6370} %write{6366,6366}
temp	float	$tmp3736	 %read{6366,6366} %write{6365,6365}
temp	float	$tmp3737	 %read{6365,6365} %write{6364,6364}
temp	float	$tmp3738	 %read{6370,6370} %write{6369,6369}
temp	float	$tmp3739	 %read{6369,6369} %write{6368,6368}
temp	float	$tmp3740	 %read{6368,6368} %write{6367,6367}
temp	float	$tmp3741	 %read{6374,6374} %write{6370,6370}
temp	float	$tmp3742	 %read{6374,6374} %write{6373,6373}
temp	float	$tmp3743	 %read{6373,6373} %write{6372,6372}
temp	float	$tmp3744	 %read{6372,6372} %write{6371,6371}
temp	float	$tmp3745	 %read{6376,6376} %write{6374,6374}
temp	float	$tmp3746	 %read{6376,6376} %write{6375,6375}
temp	point	$tmp3747	 %read{6382,6382} %write{6381,6381}
temp	float	$tmp3748	 %read{6381,6381} %write{6378,6378}
temp	float	$tmp3749	 %read{6381,6381} %write{6379,6379}
temp	float	$tmp3750	 %read{6381,6381} %write{6380,6380}
temp	float	$tmp3751	 %read{6384,6384} %write{6383,6383}
temp	int	$tmp3752	 %read{6385,6385} %write{6384,6384}
temp	float	$tmp3753	 %read{6387,6387} %write{6386,6386}
temp	float	$tmp3754	 %read{6389,6389} %write{6388,6388}
temp	float	$tmp3755	 %read{6391,6391} %write{6390,6390}
temp	point	$tmp3756	 %read{6394,6394} %write{6393,6393}
temp	point	$tmp3757	 %read{6396,6396} %write{6395,6395}
temp	point	$tmp3758	 %read{6398,6398} %write{6397,6397}
temp	float	$tmp3759	 %read{6401,6401} %write{6400,6400}
temp	int	$tmp3760	 %read{6402,6402} %write{6401,6401}
temp	float	$tmp3761	 %read{6404,6404} %write{6403,6403}
temp	float	$tmp3762	 %read{6406,6406} %write{6405,6405}
temp	point	$tmp3763	 %read{6409,6409} %write{6408,6408}
temp	point	$tmp3764	 %read{6411,6411} %write{6410,6410}
temp	float	$tmp3765	 %read{6414,6414} %write{6413,6413}
temp	int	$tmp3766	 %read{6415,6415} %write{6414,6414}
temp	float	$tmp3767	 %read{6417,6417} %write{6416,6416}
temp	point	$tmp3768	 %read{6420,6420} %write{6419,6419}
temp	float	$tmp3769	 %read{6423,6423} %write{6422,6422}
temp	int	$tmp3770	 %read{6424,6424} %write{6423,6423}
temp	int	$tmp3771	 %read{2147483647,-1} %write{6427,6427}
temp	int	$tmp3772	 %read{2147483647,-1} %write{6429,6429}
temp	int	$tmp3773	 %read{2147483647,-1} %write{6431,6431}
temp	float	$tmp3774	 %read{6435,6435} %write{6433,6433}
temp	float	$tmp3775	 %read{6435,6435} %write{6434,6434}
temp	int	$tmp3776	 %read{6438,6438} %write{6437,6437}
temp	float	$tmp3777	 %read{6443,6443} %write{6442,6442}
temp	int	$tmp3778	 %read{6445,6445} %write{6444,6444}
temp	float	$tmp3779	 %read{6450,6450} %write{6449,6449}
temp	float	$tmp3780	 %read{6451,6451} %write{6450,6450}
temp	float	$tmp3781	 %read{6453,6453} %write{6452,6452}
temp	int	$tmp3782	 %read{2147483647,-1} %write{6456,6456}
temp	float	$tmp3783	 %read{6459,6459} %write{6458,6458}
temp	int	$tmp3784	 %read{6461,6461} %write{6460,6460}
temp	point	$tmp3785	 %read{6467,7519} %write{6462,7505}
temp	int	$tmp3786	 %read{6466,6466} %write{6465,6465}
temp	int	$tmp3787	 %read{6469,6469} %write{6468,6468}
temp	float	$tmp3788	 %read{6639,6639} %write{6638,6638}
temp	float	$tmp3789	 %read{6476,6476} %write{6475,6475}
temp	float	$tmp3790	 %read{6475,6475} %write{6474,6474}
temp	float	$tmp3791	 %read{6479,6479} %write{6478,6478}
temp	float	$tmp3792	 %read{6478,6478} %write{6477,6477}
temp	float	$tmp3793	 %read{6482,6482} %write{6481,6481}
temp	float	$tmp3794	 %read{6481,6481} %write{6480,6480}
temp	int	$tmp3795	 %read{6490,6490} %write{6489,6489}
temp	int	$tmp3796	 %read{6487,6637} %write{6487,6637}
temp	int	$tmp3797	 %read{6494,6494} %write{6493,6493}
temp	int	$tmp3798	 %read{6491,6635} %write{6491,6635}
temp	int	$tmp3799	 %read{6498,6498} %write{6497,6497}
temp	int	$tmp3800	 %read{6495,6633} %write{6495,6633}
temp	float	$tmp3801	 %read{6502,6502} %write{6499,6499}
temp	float	$tmp3802	 %read{6502,6502} %write{6500,6500}
temp	float	$tmp3803	 %read{6502,6502} %write{6501,6501}
temp	color	$tmp3804	 %read{6516,6516} %write{6515,6515}
temp	point	$tmp3805	 %read{6509,6509} %write{6508,6508}
temp	float	$tmp3806	 %read{6508,6508} %write{6505,6505}
temp	float	$tmp3807	 %read{6508,6508} %write{6506,6506}
temp	float	$tmp3808	 %read{6508,6508} %write{6507,6507}
temp	point	$tmp3809	 %read{6514,6514} %write{6513,6513}
temp	float	$tmp3810	 %read{6513,6513} %write{6510,6510}
temp	float	$tmp3811	 %read{6513,6513} %write{6511,6511}
temp	float	$tmp3812	 %read{6513,6513} %write{6512,6512}
temp	point	$tmp3813	 %read{6518,6518} %write{6517,6517}
temp	int	$tmp3814	 %read{6522,6522} %write{6521,6521}
temp	int	$tmp3815	 %read{6525,6525} %write{6524,6524}
temp	int	$tmp3816	 %read{6528,6528} %write{6527,6527}
temp	float	$tmp3817	 %read{6533,6533} %write{6530,6530}
temp	float	$tmp3818	 %read{6530,6530} %write{6529,6529}
temp	float	$tmp3819	 %read{6533,6533} %write{6532,6532}
temp	float	$tmp3820	 %read{6532,6532} %write{6531,6531}
temp	float	$tmp3821	 %read{6536,6536} %write{6533,6533}
temp	float	$tmp3822	 %read{6536,6536} %write{6535,6535}
temp	float	$tmp3823	 %read{6535,6535} %write{6534,6534}
temp	int	$tmp3824	 %read{6538,6538} %write{6537,6537}
temp	float	$tmp3825	 %read{6546,6546} %write{6540,6540}
temp	float	$tmp3826	 %read{6540,6540} %write{6539,6539}
temp	float	$tmp3827	 %read{6546,6546} %write{6545,6545}
temp	float	$tmp3828	 %read{6545,6545} %write{6542,6542}
temp	float	$tmp3829	 %read{6542,6542} %write{6541,6541}
temp	float	$tmp3830	 %read{6545,6545} %write{6544,6544}
temp	float	$tmp3831	 %read{6544,6544} %write{6543,6543}
temp	int	$tmp3832	 %read{6548,6548} %write{6547,6547}
temp	float	$tmp3833	 %read{6555,6555} %write{6551,6551}
temp	float	$tmp3834	 %read{6551,6551} %write{6550,6550}
temp	float	$tmp3835	 %read{6550,6550} %write{6549,6549}
temp	float	$tmp3836	 %read{6555,6555} %write{6554,6554}
temp	float	$tmp3837	 %read{6554,6554} %write{6553,6553}
temp	float	$tmp3838	 %read{6553,6553} %write{6552,6552}
temp	float	$tmp3839	 %read{6559,6559} %write{6555,6555}
temp	float	$tmp3840	 %read{6559,6559} %write{6558,6558}
temp	float	$tmp3841	 %read{6558,6558} %write{6557,6557}
temp	float	$tmp3842	 %read{6557,6557} %write{6556,6556}
temp	int	$tmp3843	 %read{6561,6561} %write{6560,6560}
temp	float	$tmp3844	 %read{6566,6566} %write{6565,6565}
temp	float	$tmp3845	 %read{6565,6565} %write{6564,6564}
temp	vector	$tmp3846	 %read{6564,6564} %write{6562,6562}
temp	vector	$tmp3847	 %read{6564,6564} %write{6563,6563}
temp	int	$tmp3848	 %read{6568,6568} %write{6567,6567}
temp	float	$tmp3849	 %read{6575,6575} %write{6571,6571}
temp	float	$tmp3850	 %read{6571,6571} %write{6570,6570}
temp	float	$tmp3851	 %read{6570,6570} %write{6569,6569}
temp	float	$tmp3852	 %read{6575,6575} %write{6574,6574}
temp	float	$tmp3853	 %read{6574,6574} %write{6573,6573}
temp	float	$tmp3854	 %read{6573,6573} %write{6572,6572}
temp	float	$tmp3855	 %read{6579,6579} %write{6575,6575}
temp	float	$tmp3856	 %read{6579,6579} %write{6578,6578}
temp	float	$tmp3857	 %read{6578,6578} %write{6577,6577}
temp	float	$tmp3858	 %read{6577,6577} %write{6576,6576}
temp	float	$tmp3859	 %read{6581,6581} %write{6579,6579}
temp	float	$tmp3860	 %read{6581,6581} %write{6580,6580}
temp	point	$tmp3861	 %read{6587,6587} %write{6586,6586}
temp	float	$tmp3862	 %read{6586,6586} %write{6583,6583}
temp	float	$tmp3863	 %read{6586,6586} %write{6584,6584}
temp	float	$tmp3864	 %read{6586,6586} %write{6585,6585}
temp	float	$tmp3865	 %read{6589,6589} %write{6588,6588}
temp	int	$tmp3866	 %read{6590,6590} %write{6589,6589}
temp	float	$tmp3867	 %read{6592,6592} %write{6591,6591}
temp	float	$tmp3868	 %read{6594,6594} %write{6593,6593}
temp	float	$tmp3869	 %read{6596,6596} %write{6595,6595}
temp	point	$tmp3870	 %read{6599,6599} %write{6598,6598}
temp	point	$tmp3871	 %read{6601,6601} %write{6600,6600}
temp	point	$tmp3872	 %read{6603,6603} %write{6602,6602}
temp	float	$tmp3873	 %read{6606,6606} %write{6605,6605}
temp	int	$tmp3874	 %read{6607,6607} %write{6606,6606}
temp	float	$tmp3875	 %read{6609,6609} %write{6608,6608}
temp	float	$tmp3876	 %read{6611,6611} %write{6610,6610}
temp	point	$tmp3877	 %read{6614,6614} %write{6613,6613}
temp	point	$tmp3878	 %read{6616,6616} %write{6615,6615}
temp	float	$tmp3879	 %read{6619,6619} %write{6618,6618}
temp	int	$tmp3880	 %read{6620,6620} %write{6619,6619}
temp	float	$tmp3881	 %read{6622,6622} %write{6621,6621}
temp	point	$tmp3882	 %read{6625,6625} %write{6624,6624}
temp	float	$tmp3883	 %read{6628,6628} %write{6627,6627}
temp	int	$tmp3884	 %read{6629,6629} %write{6628,6628}
temp	int	$tmp3885	 %read{2147483647,-1} %write{6632,6632}
temp	int	$tmp3886	 %read{2147483647,-1} %write{6634,6634}
temp	int	$tmp3887	 %read{2147483647,-1} %write{6636,6636}
temp	float	$tmp3888	 %read{6640,6640} %write{6639,6639}
temp	int	$tmp3889	 %read{6642,6642} %write{6641,6641}
temp	float	$tmp3890	 %read{6812,6812} %write{6811,6811}
temp	float	$tmp3891	 %read{6649,6649} %write{6648,6648}
temp	float	$tmp3892	 %read{6648,6648} %write{6647,6647}
temp	float	$tmp3893	 %read{6652,6652} %write{6651,6651}
temp	float	$tmp3894	 %read{6651,6651} %write{6650,6650}
temp	float	$tmp3895	 %read{6655,6655} %write{6654,6654}
temp	float	$tmp3896	 %read{6654,6654} %write{6653,6653}
temp	int	$tmp3897	 %read{6663,6663} %write{6662,6662}
temp	int	$tmp3898	 %read{6660,6810} %write{6660,6810}
temp	int	$tmp3899	 %read{6667,6667} %write{6666,6666}
temp	int	$tmp3900	 %read{6664,6808} %write{6664,6808}
temp	int	$tmp3901	 %read{6671,6671} %write{6670,6670}
temp	int	$tmp3902	 %read{6668,6806} %write{6668,6806}
temp	float	$tmp3903	 %read{6675,6675} %write{6672,6672}
temp	float	$tmp3904	 %read{6675,6675} %write{6673,6673}
temp	float	$tmp3905	 %read{6675,6675} %write{6674,6674}
temp	color	$tmp3906	 %read{6689,6689} %write{6688,6688}
temp	point	$tmp3907	 %read{6682,6682} %write{6681,6681}
temp	float	$tmp3908	 %read{6681,6681} %write{6678,6678}
temp	float	$tmp3909	 %read{6681,6681} %write{6679,6679}
temp	float	$tmp3910	 %read{6681,6681} %write{6680,6680}
temp	point	$tmp3911	 %read{6687,6687} %write{6686,6686}
temp	float	$tmp3912	 %read{6686,6686} %write{6683,6683}
temp	float	$tmp3913	 %read{6686,6686} %write{6684,6684}
temp	float	$tmp3914	 %read{6686,6686} %write{6685,6685}
temp	point	$tmp3915	 %read{6691,6691} %write{6690,6690}
temp	int	$tmp3916	 %read{6695,6695} %write{6694,6694}
temp	int	$tmp3917	 %read{6698,6698} %write{6697,6697}
temp	int	$tmp3918	 %read{6701,6701} %write{6700,6700}
temp	float	$tmp3919	 %read{6706,6706} %write{6703,6703}
temp	float	$tmp3920	 %read{6703,6703} %write{6702,6702}
temp	float	$tmp3921	 %read{6706,6706} %write{6705,6705}
temp	float	$tmp3922	 %read{6705,6705} %write{6704,6704}
temp	float	$tmp3923	 %read{6709,6709} %write{6706,6706}
temp	float	$tmp3924	 %read{6709,6709} %write{6708,6708}
temp	float	$tmp3925	 %read{6708,6708} %write{6707,6707}
temp	int	$tmp3926	 %read{6711,6711} %write{6710,6710}
temp	float	$tmp3927	 %read{6719,6719} %write{6713,6713}
temp	float	$tmp3928	 %read{6713,6713} %write{6712,6712}
temp	float	$tmp3929	 %read{6719,6719} %write{6718,6718}
temp	float	$tmp3930	 %read{6718,6718} %write{6715,6715}
temp	float	$tmp3931	 %read{6715,6715} %write{6714,6714}
temp	float	$tmp3932	 %read{6718,6718} %write{6717,6717}
temp	float	$tmp3933	 %read{6717,6717} %write{6716,6716}
temp	int	$tmp3934	 %read{6721,6721} %write{6720,6720}
temp	float	$tmp3935	 %read{6728,6728} %write{6724,6724}
temp	float	$tmp3936	 %read{6724,6724} %write{6723,6723}
temp	float	$tmp3937	 %read{6723,6723} %write{6722,6722}
temp	float	$tmp3938	 %read{6728,6728} %write{6727,6727}
temp	float	$tmp3939	 %read{6727,6727} %write{6726,6726}
temp	float	$tmp3940	 %read{6726,6726} %write{6725,6725}
temp	float	$tmp3941	 %read{6732,6732} %write{6728,6728}
temp	float	$tmp3942	 %read{6732,6732} %write{6731,6731}
temp	float	$tmp3943	 %read{6731,6731} %write{6730,6730}
temp	float	$tmp3944	 %read{6730,6730} %write{6729,6729}
temp	int	$tmp3945	 %read{6734,6734} %write{6733,6733}
temp	float	$tmp3946	 %read{6739,6739} %write{6738,6738}
temp	float	$tmp3947	 %read{6738,6738} %write{6737,6737}
temp	vector	$tmp3948	 %read{6737,6737} %write{6735,6735}
temp	vector	$tmp3949	 %read{6737,6737} %write{6736,6736}
temp	int	$tmp3950	 %read{6741,6741} %write{6740,6740}
temp	float	$tmp3951	 %read{6748,6748} %write{6744,6744}
temp	float	$tmp3952	 %read{6744,6744} %write{6743,6743}
temp	float	$tmp3953	 %read{6743,6743} %write{6742,6742}
temp	float	$tmp3954	 %read{6748,6748} %write{6747,6747}
temp	float	$tmp3955	 %read{6747,6747} %write{6746,6746}
temp	float	$tmp3956	 %read{6746,6746} %write{6745,6745}
temp	float	$tmp3957	 %read{6752,6752} %write{6748,6748}
temp	float	$tmp3958	 %read{6752,6752} %write{6751,6751}
temp	float	$tmp3959	 %read{6751,6751} %write{6750,6750}
temp	float	$tmp3960	 %read{6750,6750} %write{6749,6749}
temp	float	$tmp3961	 %read{6754,6754} %write{6752,6752}
temp	float	$tmp3962	 %read{6754,6754} %write{6753,6753}
temp	point	$tmp3963	 %read{6760,6760} %write{6759,6759}
temp	float	$tmp3964	 %read{6759,6759} %write{6756,6756}
temp	float	$tmp3965	 %read{6759,6759} %write{6757,6757}
temp	float	$tmp3966	 %read{6759,6759} %write{6758,6758}
temp	float	$tmp3967	 %read{6762,6762} %write{6761,6761}
temp	int	$tmp3968	 %read{6763,6763} %write{6762,6762}
temp	float	$tmp3969	 %read{6765,6765} %write{6764,6764}
temp	float	$tmp3970	 %read{6767,6767} %write{6766,6766}
temp	float	$tmp3971	 %read{6769,6769} %write{6768,6768}
temp	point	$tmp3972	 %read{6772,6772} %write{6771,6771}
temp	point	$tmp3973	 %read{6774,6774} %write{6773,6773}
temp	point	$tmp3974	 %read{6776,6776} %write{6775,6775}
temp	float	$tmp3975	 %read{6779,6779} %write{6778,6778}
temp	int	$tmp3976	 %read{6780,6780} %write{6779,6779}
temp	float	$tmp3977	 %read{6782,6782} %write{6781,6781}
temp	float	$tmp3978	 %read{6784,6784} %write{6783,6783}
temp	point	$tmp3979	 %read{6787,6787} %write{6786,6786}
temp	point	$tmp3980	 %read{6789,6789} %write{6788,6788}
temp	float	$tmp3981	 %read{6792,6792} %write{6791,6791}
temp	int	$tmp3982	 %read{6793,6793} %write{6792,6792}
temp	float	$tmp3983	 %read{6795,6795} %write{6794,6794}
temp	point	$tmp3984	 %read{6798,6798} %write{6797,6797}
temp	float	$tmp3985	 %read{6801,6801} %write{6800,6800}
temp	int	$tmp3986	 %read{6802,6802} %write{6801,6801}
temp	int	$tmp3987	 %read{2147483647,-1} %write{6805,6805}
temp	int	$tmp3988	 %read{2147483647,-1} %write{6807,6807}
temp	int	$tmp3989	 %read{2147483647,-1} %write{6809,6809}
temp	float	$tmp3990	 %read{6813,6813} %write{6812,6812}
temp	int	$tmp3991	 %read{6815,6815} %write{6814,6814}
temp	float	$tmp3992	 %read{6985,6985} %write{6984,6984}
temp	float	$tmp3993	 %read{6822,6822} %write{6821,6821}
temp	float	$tmp3994	 %read{6821,6821} %write{6820,6820}
temp	float	$tmp3995	 %read{6825,6825} %write{6824,6824}
temp	float	$tmp3996	 %read{6824,6824} %write{6823,6823}
temp	float	$tmp3997	 %read{6828,6828} %write{6827,6827}
temp	float	$tmp3998	 %read{6827,6827} %write{6826,6826}
temp	int	$tmp3999	 %read{6836,6836} %write{6835,6835}
temp	int	$tmp4000	 %read{6833,6983} %write{6833,6983}
temp	int	$tmp4001	 %read{6840,6840} %write{6839,6839}
temp	int	$tmp4002	 %read{6837,6981} %write{6837,6981}
temp	int	$tmp4003	 %read{6844,6844} %write{6843,6843}
temp	int	$tmp4004	 %read{6841,6979} %write{6841,6979}
temp	float	$tmp4005	 %read{6848,6848} %write{6845,6845}
temp	float	$tmp4006	 %read{6848,6848} %write{6846,6846}
temp	float	$tmp4007	 %read{6848,6848} %write{6847,6847}
temp	color	$tmp4008	 %read{6862,6862} %write{6861,6861}
temp	point	$tmp4009	 %read{6855,6855} %write{6854,6854}
temp	float	$tmp4010	 %read{6854,6854} %write{6851,6851}
temp	float	$tmp4011	 %read{6854,6854} %write{6852,6852}
temp	float	$tmp4012	 %read{6854,6854} %write{6853,6853}
temp	point	$tmp4013	 %read{6860,6860} %write{6859,6859}
temp	float	$tmp4014	 %read{6859,6859} %write{6856,6856}
temp	float	$tmp4015	 %read{6859,6859} %write{6857,6857}
temp	float	$tmp4016	 %read{6859,6859} %write{6858,6858}
temp	point	$tmp4017	 %read{6864,6864} %write{6863,6863}
temp	int	$tmp4018	 %read{6868,6868} %write{6867,6867}
temp	int	$tmp4019	 %read{6871,6871} %write{6870,6870}
temp	int	$tmp4020	 %read{6874,6874} %write{6873,6873}
temp	float	$tmp4021	 %read{6879,6879} %write{6876,6876}
temp	float	$tmp4022	 %read{6876,6876} %write{6875,6875}
temp	float	$tmp4023	 %read{6879,6879} %write{6878,6878}
temp	float	$tmp4024	 %read{6878,6878} %write{6877,6877}
temp	float	$tmp4025	 %read{6882,6882} %write{6879,6879}
temp	float	$tmp4026	 %read{6882,6882} %write{6881,6881}
temp	float	$tmp4027	 %read{6881,6881} %write{6880,6880}
temp	int	$tmp4028	 %read{6884,6884} %write{6883,6883}
temp	float	$tmp4029	 %read{6892,6892} %write{6886,6886}
temp	float	$tmp4030	 %read{6886,6886} %write{6885,6885}
temp	float	$tmp4031	 %read{6892,6892} %write{6891,6891}
temp	float	$tmp4032	 %read{6891,6891} %write{6888,6888}
temp	float	$tmp4033	 %read{6888,6888} %write{6887,6887}
temp	float	$tmp4034	 %read{6891,6891} %write{6890,6890}
temp	float	$tmp4035	 %read{6890,6890} %write{6889,6889}
temp	int	$tmp4036	 %read{6894,6894} %write{6893,6893}
temp	float	$tmp4037	 %read{6901,6901} %write{6897,6897}
temp	float	$tmp4038	 %read{6897,6897} %write{6896,6896}
temp	float	$tmp4039	 %read{6896,6896} %write{6895,6895}
temp	float	$tmp4040	 %read{6901,6901} %write{6900,6900}
temp	float	$tmp4041	 %read{6900,6900} %write{6899,6899}
temp	float	$tmp4042	 %read{6899,6899} %write{6898,6898}
temp	float	$tmp4043	 %read{6905,6905} %write{6901,6901}
temp	float	$tmp4044	 %read{6905,6905} %write{6904,6904}
temp	float	$tmp4045	 %read{6904,6904} %write{6903,6903}
temp	float	$tmp4046	 %read{6903,6903} %write{6902,6902}
temp	int	$tmp4047	 %read{6907,6907} %write{6906,6906}
temp	float	$tmp4048	 %read{6912,6912} %write{6911,6911}
temp	float	$tmp4049	 %read{6911,6911} %write{6910,6910}
temp	vector	$tmp4050	 %read{6910,6910} %write{6908,6908}
temp	vector	$tmp4051	 %read{6910,6910} %write{6909,6909}
temp	int	$tmp4052	 %read{6914,6914} %write{6913,6913}
temp	float	$tmp4053	 %read{6921,6921} %write{6917,6917}
temp	float	$tmp4054	 %read{6917,6917} %write{6916,6916}
temp	float	$tmp4055	 %read{6916,6916} %write{6915,6915}
temp	float	$tmp4056	 %read{6921,6921} %write{6920,6920}
temp	float	$tmp4057	 %read{6920,6920} %write{6919,6919}
temp	float	$tmp4058	 %read{6919,6919} %write{6918,6918}
temp	float	$tmp4059	 %read{6925,6925} %write{6921,6921}
temp	float	$tmp4060	 %read{6925,6925} %write{6924,6924}
temp	float	$tmp4061	 %read{6924,6924} %write{6923,6923}
temp	float	$tmp4062	 %read{6923,6923} %write{6922,6922}
temp	float	$tmp4063	 %read{6927,6927} %write{6925,6925}
temp	float	$tmp4064	 %read{6927,6927} %write{6926,6926}
temp	point	$tmp4065	 %read{6933,6933} %write{6932,6932}
temp	float	$tmp4066	 %read{6932,6932} %write{6929,6929}
temp	float	$tmp4067	 %read{6932,6932} %write{6930,6930}
temp	float	$tmp4068	 %read{6932,6932} %write{6931,6931}
temp	float	$tmp4069	 %read{6935,6935} %write{6934,6934}
temp	int	$tmp4070	 %read{6936,6936} %write{6935,6935}
temp	float	$tmp4071	 %read{6938,6938} %write{6937,6937}
temp	float	$tmp4072	 %read{6940,6940} %write{6939,6939}
temp	float	$tmp4073	 %read{6942,6942} %write{6941,6941}
temp	point	$tmp4074	 %read{6945,6945} %write{6944,6944}
temp	point	$tmp4075	 %read{6947,6947} %write{6946,6946}
temp	point	$tmp4076	 %read{6949,6949} %write{6948,6948}
temp	float	$tmp4077	 %read{6952,6952} %write{6951,6951}
temp	int	$tmp4078	 %read{6953,6953} %write{6952,6952}
temp	float	$tmp4079	 %read{6955,6955} %write{6954,6954}
temp	float	$tmp4080	 %read{6957,6957} %write{6956,6956}
temp	point	$tmp4081	 %read{6960,6960} %write{6959,6959}
temp	point	$tmp4082	 %read{6962,6962} %write{6961,6961}
temp	float	$tmp4083	 %read{6965,6965} %write{6964,6964}
temp	int	$tmp4084	 %read{6966,6966} %write{6965,6965}
temp	float	$tmp4085	 %read{6968,6968} %write{6967,6967}
temp	point	$tmp4086	 %read{6971,6971} %write{6970,6970}
temp	float	$tmp4087	 %read{6974,6974} %write{6973,6973}
temp	int	$tmp4088	 %read{6975,6975} %write{6974,6974}
temp	int	$tmp4089	 %read{2147483647,-1} %write{6978,6978}
temp	int	$tmp4090	 %read{2147483647,-1} %write{6980,6980}
temp	int	$tmp4091	 %read{2147483647,-1} %write{6982,6982}
temp	float	$tmp4092	 %read{6986,6986} %write{6985,6985}
temp	int	$tmp4093	 %read{6988,6988} %write{6987,6987}
temp	float	$tmp4094	 %read{7158,7158} %write{7157,7157}
temp	float	$tmp4095	 %read{6995,6995} %write{6994,6994}
temp	float	$tmp4096	 %read{6994,6994} %write{6993,6993}
temp	float	$tmp4097	 %read{6998,6998} %write{6997,6997}
temp	float	$tmp4098	 %read{6997,6997} %write{6996,6996}
temp	float	$tmp4099	 %read{7001,7001} %write{7000,7000}
temp	float	$tmp4100	 %read{7000,7000} %write{6999,6999}
temp	int	$tmp4101	 %read{7009,7009} %write{7008,7008}
temp	int	$tmp4102	 %read{7006,7156} %write{7006,7156}
temp	int	$tmp4103	 %read{7013,7013} %write{7012,7012}
temp	int	$tmp4104	 %read{7010,7154} %write{7010,7154}
temp	int	$tmp4105	 %read{7017,7017} %write{7016,7016}
temp	int	$tmp4106	 %read{7014,7152} %write{7014,7152}
temp	float	$tmp4107	 %read{7021,7021} %write{7018,7018}
temp	float	$tmp4108	 %read{7021,7021} %write{7019,7019}
temp	float	$tmp4109	 %read{7021,7021} %write{7020,7020}
temp	color	$tmp4110	 %read{7035,7035} %write{7034,7034}
temp	point	$tmp4111	 %read{7028,7028} %write{7027,7027}
temp	float	$tmp4112	 %read{7027,7027} %write{7024,7024}
temp	float	$tmp4113	 %read{7027,7027} %write{7025,7025}
temp	float	$tmp4114	 %read{7027,7027} %write{7026,7026}
temp	point	$tmp4115	 %read{7033,7033} %write{7032,7032}
temp	float	$tmp4116	 %read{7032,7032} %write{7029,7029}
temp	float	$tmp4117	 %read{7032,7032} %write{7030,7030}
temp	float	$tmp4118	 %read{7032,7032} %write{7031,7031}
temp	point	$tmp4119	 %read{7037,7037} %write{7036,7036}
temp	int	$tmp4120	 %read{7041,7041} %write{7040,7040}
temp	int	$tmp4121	 %read{7044,7044} %write{7043,7043}
temp	int	$tmp4122	 %read{7047,7047} %write{7046,7046}
temp	float	$tmp4123	 %read{7052,7052} %write{7049,7049}
temp	float	$tmp4124	 %read{7049,7049} %write{7048,7048}
temp	float	$tmp4125	 %read{7052,7052} %write{7051,7051}
temp	float	$tmp4126	 %read{7051,7051} %write{7050,7050}
temp	float	$tmp4127	 %read{7055,7055} %write{7052,7052}
temp	float	$tmp4128	 %read{7055,7055} %write{7054,7054}
temp	float	$tmp4129	 %read{7054,7054} %write{7053,7053}
temp	int	$tmp4130	 %read{7057,7057} %write{7056,7056}
temp	float	$tmp4131	 %read{7065,7065} %write{7059,7059}
temp	float	$tmp4132	 %read{7059,7059} %write{7058,7058}
temp	float	$tmp4133	 %read{7065,7065} %write{7064,7064}
temp	float	$tmp4134	 %read{7064,7064} %write{7061,7061}
temp	float	$tmp4135	 %read{7061,7061} %write{7060,7060}
temp	float	$tmp4136	 %read{7064,7064} %write{7063,7063}
temp	float	$tmp4137	 %read{7063,7063} %write{7062,7062}
temp	int	$tmp4138	 %read{7067,7067} %write{7066,7066}
temp	float	$tmp4139	 %read{7074,7074} %write{7070,7070}
temp	float	$tmp4140	 %read{7070,7070} %write{7069,7069}
temp	float	$tmp4141	 %read{7069,7069} %write{7068,7068}
temp	float	$tmp4142	 %read{7074,7074} %write{7073,7073}
temp	float	$tmp4143	 %read{7073,7073} %write{7072,7072}
temp	float	$tmp4144	 %read{7072,7072} %write{7071,7071}
temp	float	$tmp4145	 %read{7078,7078} %write{7074,7074}
temp	float	$tmp4146	 %read{7078,7078} %write{7077,7077}
temp	float	$tmp4147	 %read{7077,7077} %write{7076,7076}
temp	float	$tmp4148	 %read{7076,7076} %write{7075,7075}
temp	int	$tmp4149	 %read{7080,7080} %write{7079,7079}
temp	float	$tmp4150	 %read{7085,7085} %write{7084,7084}
temp	float	$tmp4151	 %read{7084,7084} %write{7083,7083}
temp	vector	$tmp4152	 %read{7083,7083} %write{7081,7081}
temp	vector	$tmp4153	 %read{7083,7083} %write{7082,7082}
temp	int	$tmp4154	 %read{7087,7087} %write{7086,7086}
temp	float	$tmp4155	 %read{7094,7094} %write{7090,7090}
temp	float	$tmp4156	 %read{7090,7090} %write{7089,7089}
temp	float	$tmp4157	 %read{7089,7089} %write{7088,7088}
temp	float	$tmp4158	 %read{7094,7094} %write{7093,7093}
temp	float	$tmp4159	 %read{7093,7093} %write{7092,7092}
temp	float	$tmp4160	 %read{7092,7092} %write{7091,7091}
temp	float	$tmp4161	 %read{7098,7098} %write{7094,7094}
temp	float	$tmp4162	 %read{7098,7098} %write{7097,7097}
temp	float	$tmp4163	 %read{7097,7097} %write{7096,7096}
temp	float	$tmp4164	 %read{7096,7096} %write{7095,7095}
temp	float	$tmp4165	 %read{7100,7100} %write{7098,7098}
temp	float	$tmp4166	 %read{7100,7100} %write{7099,7099}
temp	point	$tmp4167	 %read{7106,7106} %write{7105,7105}
temp	float	$tmp4168	 %read{7105,7105} %write{7102,7102}
temp	float	$tmp4169	 %read{7105,7105} %write{7103,7103}
temp	float	$tmp4170	 %read{7105,7105} %write{7104,7104}
temp	float	$tmp4171	 %read{7108,7108} %write{7107,7107}
temp	int	$tmp4172	 %read{7109,7109} %write{7108,7108}
temp	float	$tmp4173	 %read{7111,7111} %write{7110,7110}
temp	float	$tmp4174	 %read{7113,7113} %write{7112,7112}
temp	float	$tmp4175	 %read{7115,7115} %write{7114,7114}
temp	point	$tmp4176	 %read{7118,7118} %write{7117,7117}
temp	point	$tmp4177	 %read{7120,7120} %write{7119,7119}
temp	point	$tmp4178	 %read{7122,7122} %write{7121,7121}
temp	float	$tmp4179	 %read{7125,7125} %write{7124,7124}
temp	int	$tmp4180	 %read{7126,7126} %write{7125,7125}
temp	float	$tmp4181	 %read{7128,7128} %write{7127,7127}
temp	float	$tmp4182	 %read{7130,7130} %write{7129,7129}
temp	point	$tmp4183	 %read{7133,7133} %write{7132,7132}
temp	point	$tmp4184	 %read{7135,7135} %write{7134,7134}
temp	float	$tmp4185	 %read{7138,7138} %write{7137,7137}
temp	int	$tmp4186	 %read{7139,7139} %write{7138,7138}
temp	float	$tmp4187	 %read{7141,7141} %write{7140,7140}
temp	point	$tmp4188	 %read{7144,7144} %write{7143,7143}
temp	float	$tmp4189	 %read{7147,7147} %write{7146,7146}
temp	int	$tmp4190	 %read{7148,7148} %write{7147,7147}
temp	int	$tmp4191	 %read{2147483647,-1} %write{7151,7151}
temp	int	$tmp4192	 %read{2147483647,-1} %write{7153,7153}
temp	int	$tmp4193	 %read{2147483647,-1} %write{7155,7155}
temp	float	$tmp4194	 %read{7159,7159} %write{7158,7158}
temp	int	$tmp4195	 %read{7161,7161} %write{7160,7160}
temp	float	$tmp4196	 %read{7333,7333} %write{7332,7332}
temp	float	$tmp4197	 %read{7168,7168} %write{7167,7167}
temp	float	$tmp4198	 %read{7167,7167} %write{7166,7166}
temp	float	$tmp4199	 %read{7171,7171} %write{7170,7170}
temp	float	$tmp4200	 %read{7170,7170} %write{7169,7169}
temp	float	$tmp4201	 %read{7174,7174} %write{7173,7173}
temp	float	$tmp4202	 %read{7173,7173} %write{7172,7172}
temp	int	$tmp4203	 %read{7182,7182} %write{7181,7181}
temp	int	$tmp4204	 %read{7179,7329} %write{7179,7329}
temp	int	$tmp4205	 %read{7186,7186} %write{7185,7185}
temp	int	$tmp4206	 %read{7183,7327} %write{7183,7327}
temp	int	$tmp4207	 %read{7190,7190} %write{7189,7189}
temp	int	$tmp4208	 %read{7187,7325} %write{7187,7325}
temp	float	$tmp4209	 %read{7194,7194} %write{7191,7191}
temp	float	$tmp4210	 %read{7194,7194} %write{7192,7192}
temp	float	$tmp4211	 %read{7194,7194} %write{7193,7193}
temp	color	$tmp4212	 %read{7208,7208} %write{7207,7207}
temp	point	$tmp4213	 %read{7201,7201} %write{7200,7200}
temp	float	$tmp4214	 %read{7200,7200} %write{7197,7197}
temp	float	$tmp4215	 %read{7200,7200} %write{7198,7198}
temp	float	$tmp4216	 %read{7200,7200} %write{7199,7199}
temp	point	$tmp4217	 %read{7206,7206} %write{7205,7205}
temp	float	$tmp4218	 %read{7205,7205} %write{7202,7202}
temp	float	$tmp4219	 %read{7205,7205} %write{7203,7203}
temp	float	$tmp4220	 %read{7205,7205} %write{7204,7204}
temp	point	$tmp4221	 %read{7210,7210} %write{7209,7209}
temp	int	$tmp4222	 %read{7214,7214} %write{7213,7213}
temp	int	$tmp4223	 %read{7217,7217} %write{7216,7216}
temp	int	$tmp4224	 %read{7220,7220} %write{7219,7219}
temp	float	$tmp4225	 %read{7225,7225} %write{7222,7222}
temp	float	$tmp4226	 %read{7222,7222} %write{7221,7221}
temp	float	$tmp4227	 %read{7225,7225} %write{7224,7224}
temp	float	$tmp4228	 %read{7224,7224} %write{7223,7223}
temp	float	$tmp4229	 %read{7228,7228} %write{7225,7225}
temp	float	$tmp4230	 %read{7228,7228} %write{7227,7227}
temp	float	$tmp4231	 %read{7227,7227} %write{7226,7226}
temp	int	$tmp4232	 %read{7230,7230} %write{7229,7229}
temp	float	$tmp4233	 %read{7238,7238} %write{7232,7232}
temp	float	$tmp4234	 %read{7232,7232} %write{7231,7231}
temp	float	$tmp4235	 %read{7238,7238} %write{7237,7237}
temp	float	$tmp4236	 %read{7237,7237} %write{7234,7234}
temp	float	$tmp4237	 %read{7234,7234} %write{7233,7233}
temp	float	$tmp4238	 %read{7237,7237} %write{7236,7236}
temp	float	$tmp4239	 %read{7236,7236} %write{7235,7235}
temp	int	$tmp4240	 %read{7240,7240} %write{7239,7239}
temp	float	$tmp4241	 %read{7247,7247} %write{7243,7243}
temp	float	$tmp4242	 %read{7243,7243} %write{7242,7242}
temp	float	$tmp4243	 %read{7242,7242} %write{7241,7241}
temp	float	$tmp4244	 %read{7247,7247} %write{7246,7246}
temp	float	$tmp4245	 %read{7246,7246} %write{7245,7245}
temp	float	$tmp4246	 %read{7245,7245} %write{7244,7244}
temp	float	$tmp4247	 %read{7251,7251} %write{7247,7247}
temp	float	$tmp4248	 %read{7251,7251} %write{7250,7250}
temp	float	$tmp4249	 %read{7250,7250} %write{7249,7249}
temp	float	$tmp4250	 %read{7249,7249} %write{7248,7248}
temp	int	$tmp4251	 %read{7253,7253} %write{7252,7252}
temp	float	$tmp4252	 %read{7258,7258} %write{7257,7257}
temp	float	$tmp4253	 %read{7257,7257} %write{7256,7256}
temp	vector	$tmp4254	 %read{7256,7256} %write{7254,7254}
temp	vector	$tmp4255	 %read{7256,7256} %write{7255,7255}
temp	int	$tmp4256	 %read{7260,7260} %write{7259,7259}
temp	float	$tmp4257	 %read{7267,7267} %write{7263,7263}
temp	float	$tmp4258	 %read{7263,7263} %write{7262,7262}
temp	float	$tmp4259	 %read{7262,7262} %write{7261,7261}
temp	float	$tmp4260	 %read{7267,7267} %write{7266,7266}
temp	float	$tmp4261	 %read{7266,7266} %write{7265,7265}
temp	float	$tmp4262	 %read{7265,7265} %write{7264,7264}
temp	float	$tmp4263	 %read{7271,7271} %write{7267,7267}
temp	float	$tmp4264	 %read{7271,7271} %write{7270,7270}
temp	float	$tmp4265	 %read{7270,7270} %write{7269,7269}
temp	float	$tmp4266	 %read{7269,7269} %write{7268,7268}
temp	float	$tmp4267	 %read{7273,7273} %write{7271,7271}
temp	float	$tmp4268	 %read{7273,7273} %write{7272,7272}
temp	point	$tmp4269	 %read{7279,7279} %write{7278,7278}
temp	float	$tmp4270	 %read{7278,7278} %write{7275,7275}
temp	float	$tmp4271	 %read{7278,7278} %write{7276,7276}
temp	float	$tmp4272	 %read{7278,7278} %write{7277,7277}
temp	float	$tmp4273	 %read{7281,7281} %write{7280,7280}
temp	int	$tmp4274	 %read{7282,7282} %write{7281,7281}
temp	float	$tmp4275	 %read{7284,7284} %write{7283,7283}
temp	float	$tmp4276	 %read{7286,7286} %write{7285,7285}
temp	float	$tmp4277	 %read{7288,7288} %write{7287,7287}
temp	point	$tmp4278	 %read{7291,7291} %write{7290,7290}
temp	point	$tmp4279	 %read{7293,7293} %write{7292,7292}
temp	point	$tmp4280	 %read{7295,7295} %write{7294,7294}
temp	float	$tmp4281	 %read{7298,7298} %write{7297,7297}
temp	int	$tmp4282	 %read{7299,7299} %write{7298,7298}
temp	float	$tmp4283	 %read{7301,7301} %write{7300,7300}
temp	float	$tmp4284	 %read{7303,7303} %write{7302,7302}
temp	point	$tmp4285	 %read{7306,7306} %write{7305,7305}
temp	point	$tmp4286	 %read{7308,7308} %write{7307,7307}
temp	float	$tmp4287	 %read{7311,7311} %write{7310,7310}
temp	int	$tmp4288	 %read{7312,7312} %write{7311,7311}
temp	float	$tmp4289	 %read{7314,7314} %write{7313,7313}
temp	point	$tmp4290	 %read{7317,7317} %write{7316,7316}
temp	float	$tmp4291	 %read{7320,7320} %write{7319,7319}
temp	int	$tmp4292	 %read{7321,7321} %write{7320,7320}
temp	int	$tmp4293	 %read{2147483647,-1} %write{7324,7324}
temp	int	$tmp4294	 %read{2147483647,-1} %write{7326,7326}
temp	int	$tmp4295	 %read{2147483647,-1} %write{7328,7328}
temp	float	$tmp4296	 %read{7332,7332} %write{7330,7330}
temp	float	$tmp4297	 %read{7332,7332} %write{7331,7331}
temp	float	$tmp4298	 %read{7334,7334} %write{7333,7333}
temp	int	$tmp4299	 %read{7336,7336} %write{7335,7335}
temp	float	$tmp4300	 %read{7515,7515} %write{7512,7513}
temp	float	$tmp4301	 %read{7509,7509} %write{7508,7508}
temp	float	$tmp4302	 %read{7344,7344} %write{7343,7343}
temp	float	$tmp4303	 %read{7343,7343} %write{7342,7342}
temp	float	$tmp4304	 %read{7347,7347} %write{7346,7346}
temp	float	$tmp4305	 %read{7346,7346} %write{7345,7345}
temp	float	$tmp4306	 %read{7350,7350} %write{7349,7349}
temp	float	$tmp4307	 %read{7349,7349} %write{7348,7348}
temp	int	$tmp4308	 %read{7358,7358} %write{7357,7357}
temp	int	$tmp4309	 %read{7355,7505} %write{7355,7505}
temp	int	$tmp4310	 %read{7362,7362} %write{7361,7361}
temp	int	$tmp4311	 %read{7359,7503} %write{7359,7503}
temp	int	$tmp4312	 %read{7366,7366} %write{7365,7365}
temp	int	$tmp4313	 %read{7363,7501} %write{7363,7501}
temp	float	$tmp4314	 %read{7370,7370} %write{7367,7367}
temp	float	$tmp4315	 %read{7370,7370} %write{7368,7368}
temp	float	$tmp4316	 %read{7370,7370} %write{7369,7369}
temp	color	$tmp4317	 %read{7384,7384} %write{7383,7383}
temp	point	$tmp4318	 %read{7377,7377} %write{7376,7376}
temp	float	$tmp4319	 %read{7376,7376} %write{7373,7373}
temp	float	$tmp4320	 %read{7376,7376} %write{7374,7374}
temp	float	$tmp4321	 %read{7376,7376} %write{7375,7375}
temp	point	$tmp4322	 %read{7382,7382} %write{7381,7381}
temp	float	$tmp4323	 %read{7381,7381} %write{7378,7378}
temp	float	$tmp4324	 %read{7381,7381} %write{7379,7379}
temp	float	$tmp4325	 %read{7381,7381} %write{7380,7380}
temp	point	$tmp4326	 %read{7386,7386} %write{7385,7385}
temp	int	$tmp4327	 %read{7390,7390} %write{7389,7389}
temp	int	$tmp4328	 %read{7393,7393} %write{7392,7392}
temp	int	$tmp4329	 %read{7396,7396} %write{7395,7395}
temp	float	$tmp4330	 %read{7401,7401} %write{7398,7398}
temp	float	$tmp4331	 %read{7398,7398} %write{7397,7397}
temp	float	$tmp4332	 %read{7401,7401} %write{7400,7400}
temp	float	$tmp4333	 %read{7400,7400} %write{7399,7399}
temp	float	$tmp4334	 %read{7404,7404} %write{7401,7401}
temp	float	$tmp4335	 %read{7404,7404} %write{7403,7403}
temp	float	$tmp4336	 %read{7403,7403} %write{7402,7402}
temp	int	$tmp4337	 %read{7406,7406} %write{7405,7405}
temp	float	$tmp4338	 %read{7414,7414} %write{7408,7408}
temp	float	$tmp4339	 %read{7408,7408} %write{7407,7407}
temp	float	$tmp4340	 %read{7414,7414} %write{7413,7413}
temp	float	$tmp4341	 %read{7413,7413} %write{7410,7410}
temp	float	$tmp4342	 %read{7410,7410} %write{7409,7409}
temp	float	$tmp4343	 %read{7413,7413} %write{7412,7412}
temp	float	$tmp4344	 %read{7412,7412} %write{7411,7411}
temp	int	$tmp4345	 %read{7416,7416} %write{7415,7415}
temp	float	$tmp4346	 %read{7423,7423} %write{7419,7419}
temp	float	$tmp4347	 %read{7419,7419} %write{7418,7418}
temp	float	$tmp4348	 %read{7418,7418} %write{7417,7417}
temp	float	$tmp4349	 %read{7423,7423} %write{7422,7422}
temp	float	$tmp4350	 %read{7422,7422} %write{7421,7421}
temp	float	$tmp4351	 %read{7421,7421} %write{7420,7420}
temp	float	$tmp4352	 %read{7427,7427} %write{7423,7423}
temp	float	$tmp4353	 %read{7427,7427} %write{7426,7426}
temp	float	$tmp4354	 %read{7426,7426} %write{7425,7425}
temp	float	$tmp4355	 %read{7425,7425} %write{7424,7424}
temp	int	$tmp4356	 %read{7429,7429} %write{7428,7428}
temp	float	$tmp4357	 %read{7434,7434} %write{7433,7433}
temp	float	$tmp4358	 %read{7433,7433} %write{7432,7432}
temp	vector	$tmp4359	 %read{7432,7432} %write{7430,7430}
temp	vector	$tmp4360	 %read{7432,7432} %write{7431,7431}
temp	int	$tmp4361	 %read{7436,7436} %write{7435,7435}
temp	float	$tmp4362	 %read{7443,7443} %write{7439,7439}
temp	float	$tmp4363	 %read{7439,7439} %write{7438,7438}
temp	float	$tmp4364	 %read{7438,7438} %write{7437,7437}
temp	float	$tmp4365	 %read{7443,7443} %write{7442,7442}
temp	float	$tmp4366	 %read{7442,7442} %write{7441,7441}
temp	float	$tmp4367	 %read{7441,7441} %write{7440,7440}
temp	float	$tmp4368	 %read{7447,7447} %write{7443,7443}
temp	float	$tmp4369	 %read{7447,7447} %write{7446,7446}
temp	float	$tmp4370	 %read{7446,7446} %write{7445,7445}
temp	float	$tmp4371	 %read{7445,7445} %write{7444,7444}
temp	float	$tmp4372	 %read{7449,7449} %write{7447,7447}
temp	float	$tmp4373	 %read{7449,7449} %write{7448,7448}
temp	point	$tmp4374	 %read{7455,7455} %write{7454,7454}
temp	float	$tmp4375	 %read{7454,7454} %write{7451,7451}
temp	float	$tmp4376	 %read{7454,7454} %write{7452,7452}
temp	float	$tmp4377	 %read{7454,7454} %write{7453,7453}
temp	float	$tmp4378	 %read{7457,7457} %write{7456,7456}
temp	int	$tmp4379	 %read{7458,7458} %write{7457,7457}
temp	float	$tmp4380	 %read{7460,7460} %write{7459,7459}
temp	float	$tmp4381	 %read{7462,7462} %write{7461,7461}
temp	float	$tmp4382	 %read{7464,7464} %write{7463,7463}
temp	point	$tmp4383	 %read{7467,7467} %write{7466,7466}
temp	point	$tmp4384	 %read{7469,7469} %write{7468,7468}
temp	point	$tmp4385	 %read{7471,7471} %write{7470,7470}
temp	float	$tmp4386	 %read{7474,7474} %write{7473,7473}
temp	int	$tmp4387	 %read{7475,7475} %write{7474,7474}
temp	float	$tmp4388	 %read{7477,7477} %write{7476,7476}
temp	float	$tmp4389	 %read{7479,7479} %write{7478,7478}
temp	point	$tmp4390	 %read{7482,7482} %write{7481,7481}
temp	point	$tmp4391	 %read{7484,7484} %write{7483,7483}
temp	float	$tmp4392	 %read{7487,7487} %write{7486,7486}
temp	int	$tmp4393	 %read{7488,7488} %write{7487,7487}
temp	float	$tmp4394	 %read{7490,7490} %write{7489,7489}
temp	point	$tmp4395	 %read{7493,7493} %write{7492,7492}
temp	float	$tmp4396	 %read{7496,7496} %write{7495,7495}
temp	int	$tmp4397	 %read{7497,7497} %write{7496,7496}
temp	int	$tmp4398	 %read{2147483647,-1} %write{7500,7500}
temp	int	$tmp4399	 %read{2147483647,-1} %write{7502,7502}
temp	int	$tmp4400	 %read{2147483647,-1} %write{7504,7504}
temp	float	$tmp4401	 %read{7508,7508} %write{7506,7506}
temp	float	$tmp4402	 %read{7508,7508} %write{7507,7507}
temp	int	$tmp4403	 %read{7511,7511} %write{7510,7510}
temp	float	$tmp4404	 %read{7516,7516} %write{7515,7515}
temp	int	$tmp4405	 %read{7518,7518} %write{7517,7517}
temp	float	$tmp4406	 %read{7523,7523} %write{7522,7522}
temp	float	$tmp4407	 %read{7524,7524} %write{7523,7523}
temp	float	$tmp4408	 %read{7526,7526} %write{7525,7525}
temp	int	$tmp4409	 %read{7528,7528} %write{7527,7527}
temp	float	$tmp4410	 %read{7533,7533} %write{7528,7528}
temp	int	$tmp4411	 %read{7530,7530} %write{7529,7529}
temp	int	$tmp4412	 %read{7531,7531} %write{7530,7530}
temp	int	$tmp4413	 %read{7532,7532} %write{7531,7531}
temp	float	$tmp4414	 %read{7533,7533} %write{7532,7532}
temp	float	$tmp4415	 %read{7534,7534} %write{7533,7533}
temp	int	$tmp4416	 %read{7536,7536} %write{7535,7535}
temp	int	$tmp4417	 %read{7537,7537} %write{7536,7536}
temp	float	$tmp4418	 %read{7542,7542} %write{7537,7537}
temp	int	$tmp4419	 %read{7539,7539} %write{7538,7538}
temp	int	$tmp4420	 %read{7540,7540} %write{7539,7539}
temp	int	$tmp4421	 %read{7541,7541} %write{7540,7540}
temp	float	$tmp4422	 %read{7542,7542} %write{7541,7541}
temp	float	$tmp4423	 %read{7543,7543} %write{7542,7542}
temp	float	$tmp4424	 %read{7545,7545} %write{7544,7544}
temp	float	$tmp4425	 %read{7547,7547} %write{7545,7545}
temp	float	$tmp4426	 %read{7547,7547} %write{7546,7546}
temp	int	$tmp4427	 %read{7550,7550} %write{7549,7549}
temp	float	$tmp4428	 %read{7555,7555} %write{7550,7550}
temp	int	$tmp4429	 %read{7552,7552} %write{7551,7551}
temp	int	$tmp4430	 %read{7553,7553} %write{7552,7552}
temp	int	$tmp4431	 %read{7554,7554} %write{7553,7553}
temp	float	$tmp4432	 %read{7555,7555} %write{7554,7554}
temp	float	$tmp4433	 %read{7556,7556} %write{7555,7555}
temp	float	$tmp4434	 %read{9744,9744} %write{9732,9742}
temp	point	$tmp4435	 %read{7571,8647} %write{7562,8642}
temp	float	$tmp4436	 %read{7562,7562} %write{7559,7559}
temp	float	$tmp4437	 %read{7562,7562} %write{7560,7560}
temp	float	$tmp4438	 %read{7562,7562} %write{7561,7561}
temp	float	$tmp4439	 %read{7569,7569} %write{7568,7568}
temp	int	$tmp4440	 %read{7571,8642} %write{7571,8642}
temp	point	$tmp4441	 %read{7579,8631} %write{7574,8617}
temp	int	$tmp4442	 %read{7578,7578} %write{7577,7577}
temp	int	$tmp4443	 %read{7581,7581} %write{7580,7580}
temp	float	$tmp4444	 %read{7751,7751} %write{7750,7750}
temp	float	$tmp4445	 %read{7588,7588} %write{7587,7587}
temp	float	$tmp4446	 %read{7587,7587} %write{7586,7586}
temp	float	$tmp4447	 %read{7591,7591} %write{7590,7590}
temp	float	$tmp4448	 %read{7590,7590} %write{7589,7589}
temp	float	$tmp4449	 %read{7594,7594} %write{7593,7593}
temp	float	$tmp4450	 %read{7593,7593} %write{7592,7592}
temp	int	$tmp4451	 %read{7602,7602} %write{7601,7601}
temp	int	$tmp4452	 %read{7599,7749} %write{7599,7749}
temp	int	$tmp4453	 %read{7606,7606} %write{7605,7605}
temp	int	$tmp4454	 %read{7603,7747} %write{7603,7747}
temp	int	$tmp4455	 %read{7610,7610} %write{7609,7609}
temp	int	$tmp4456	 %read{7607,7745} %write{7607,7745}
temp	float	$tmp4457	 %read{7614,7614} %write{7611,7611}
temp	float	$tmp4458	 %read{7614,7614} %write{7612,7612}
temp	float	$tmp4459	 %read{7614,7614} %write{7613,7613}
temp	color	$tmp4460	 %read{7628,7628} %write{7627,7627}
temp	point	$tmp4461	 %read{7621,7621} %write{7620,7620}
temp	float	$tmp4462	 %read{7620,7620} %write{7617,7617}
temp	float	$tmp4463	 %read{7620,7620} %write{7618,7618}
temp	float	$tmp4464	 %read{7620,7620} %write{7619,7619}
temp	point	$tmp4465	 %read{7626,7626} %write{7625,7625}
temp	float	$tmp4466	 %read{7625,7625} %write{7622,7622}
temp	float	$tmp4467	 %read{7625,7625} %write{7623,7623}
temp	float	$tmp4468	 %read{7625,7625} %write{7624,7624}
temp	point	$tmp4469	 %read{7630,7630} %write{7629,7629}
temp	int	$tmp4470	 %read{7634,7634} %write{7633,7633}
temp	int	$tmp4471	 %read{7637,7637} %write{7636,7636}
temp	int	$tmp4472	 %read{7640,7640} %write{7639,7639}
temp	float	$tmp4473	 %read{7645,7645} %write{7642,7642}
temp	float	$tmp4474	 %read{7642,7642} %write{7641,7641}
temp	float	$tmp4475	 %read{7645,7645} %write{7644,7644}
temp	float	$tmp4476	 %read{7644,7644} %write{7643,7643}
temp	float	$tmp4477	 %read{7648,7648} %write{7645,7645}
temp	float	$tmp4478	 %read{7648,7648} %write{7647,7647}
temp	float	$tmp4479	 %read{7647,7647} %write{7646,7646}
temp	int	$tmp4480	 %read{7650,7650} %write{7649,7649}
temp	float	$tmp4481	 %read{7658,7658} %write{7652,7652}
temp	float	$tmp4482	 %read{7652,7652} %write{7651,7651}
temp	float	$tmp4483	 %read{7658,7658} %write{7657,7657}
temp	float	$tmp4484	 %read{7657,7657} %write{7654,7654}
temp	float	$tmp4485	 %read{7654,7654} %write{7653,7653}
temp	float	$tmp4486	 %read{7657,7657} %write{7656,7656}
temp	float	$tmp4487	 %read{7656,7656} %write{7655,7655}
temp	int	$tmp4488	 %read{7660,7660} %write{7659,7659}
temp	float	$tmp4489	 %read{7667,7667} %write{7663,7663}
temp	float	$tmp4490	 %read{7663,7663} %write{7662,7662}
temp	float	$tmp4491	 %read{7662,7662} %write{7661,7661}
temp	float	$tmp4492	 %read{7667,7667} %write{7666,7666}
temp	float	$tmp4493	 %read{7666,7666} %write{7665,7665}
temp	float	$tmp4494	 %read{7665,7665} %write{7664,7664}
temp	float	$tmp4495	 %read{7671,7671} %write{7667,7667}
temp	float	$tmp4496	 %read{7671,7671} %write{7670,7670}
temp	float	$tmp4497	 %read{7670,7670} %write{7669,7669}
temp	float	$tmp4498	 %read{7669,7669} %write{7668,7668}
temp	int	$tmp4499	 %read{7673,7673} %write{7672,7672}
temp	float	$tmp4500	 %read{7678,7678} %write{7677,7677}
temp	float	$tmp4501	 %read{7677,7677} %write{7676,7676}
temp	vector	$tmp4502	 %read{7676,7676} %write{7674,7674}
temp	vector	$tmp4503	 %read{7676,7676} %write{7675,7675}
temp	int	$tmp4504	 %read{7680,7680} %write{7679,7679}
temp	float	$tmp4505	 %read{7687,7687} %write{7683,7683}
temp	float	$tmp4506	 %read{7683,7683} %write{7682,7682}
temp	float	$tmp4507	 %read{7682,7682} %write{7681,7681}
temp	float	$tmp4508	 %read{7687,7687} %write{7686,7686}
temp	float	$tmp4509	 %read{7686,7686} %write{7685,7685}
temp	float	$tmp4510	 %read{7685,7685} %write{7684,7684}
temp	float	$tmp4511	 %read{7691,7691} %write{7687,7687}
temp	float	$tmp4512	 %read{7691,7691} %write{7690,7690}
temp	float	$tmp4513	 %read{7690,7690} %write{7689,7689}
temp	float	$tmp4514	 %read{7689,7689} %write{7688,7688}
temp	float	$tmp4515	 %read{7693,7693} %write{7691,7691}
temp	float	$tmp4516	 %read{7693,7693} %write{7692,7692}
temp	point	$tmp4517	 %read{7699,7699} %write{7698,7698}
temp	float	$tmp4518	 %read{7698,7698} %write{7695,7695}
temp	float	$tmp4519	 %read{7698,7698} %write{7696,7696}
temp	float	$tmp4520	 %read{7698,7698} %write{7697,7697}
temp	float	$tmp4521	 %read{7701,7701} %write{7700,7700}
temp	int	$tmp4522	 %read{7702,7702} %write{7701,7701}
temp	float	$tmp4523	 %read{7704,7704} %write{7703,7703}
temp	float	$tmp4524	 %read{7706,7706} %write{7705,7705}
temp	float	$tmp4525	 %read{7708,7708} %write{7707,7707}
temp	point	$tmp4526	 %read{7711,7711} %write{7710,7710}
temp	point	$tmp4527	 %read{7713,7713} %write{7712,7712}
temp	point	$tmp4528	 %read{7715,7715} %write{7714,7714}
temp	float	$tmp4529	 %read{7718,7718} %write{7717,7717}
temp	int	$tmp4530	 %read{7719,7719} %write{7718,7718}
temp	float	$tmp4531	 %read{7721,7721} %write{7720,7720}
temp	float	$tmp4532	 %read{7723,7723} %write{7722,7722}
temp	point	$tmp4533	 %read{7726,7726} %write{7725,7725}
temp	point	$tmp4534	 %read{7728,7728} %write{7727,7727}
temp	float	$tmp4535	 %read{7731,7731} %write{7730,7730}
temp	int	$tmp4536	 %read{7732,7732} %write{7731,7731}
temp	float	$tmp4537	 %read{7734,7734} %write{7733,7733}
temp	point	$tmp4538	 %read{7737,7737} %write{7736,7736}
temp	float	$tmp4539	 %read{7740,7740} %write{7739,7739}
temp	int	$tmp4540	 %read{7741,7741} %write{7740,7740}
temp	int	$tmp4541	 %read{2147483647,-1} %write{7744,7744}
temp	int	$tmp4542	 %read{2147483647,-1} %write{7746,7746}
temp	int	$tmp4543	 %read{2147483647,-1} %write{7748,7748}
temp	float	$tmp4544	 %read{7752,7752} %write{7751,7751}
temp	int	$tmp4545	 %read{7754,7754} %write{7753,7753}
temp	float	$tmp4546	 %read{7924,7924} %write{7923,7923}
temp	float	$tmp4547	 %read{7761,7761} %write{7760,7760}
temp	float	$tmp4548	 %read{7760,7760} %write{7759,7759}
temp	float	$tmp4549	 %read{7764,7764} %write{7763,7763}
temp	float	$tmp4550	 %read{7763,7763} %write{7762,7762}
temp	float	$tmp4551	 %read{7767,7767} %write{7766,7766}
temp	float	$tmp4552	 %read{7766,7766} %write{7765,7765}
temp	int	$tmp4553	 %read{7775,7775} %write{7774,7774}
temp	int	$tmp4554	 %read{7772,7922} %write{7772,7922}
temp	int	$tmp4555	 %read{7779,7779} %write{7778,7778}
temp	int	$tmp4556	 %read{7776,7920} %write{7776,7920}
temp	int	$tmp4557	 %read{7783,7783} %write{7782,7782}
temp	int	$tmp4558	 %read{7780,7918} %write{7780,7918}
temp	float	$tmp4559	 %read{7787,7787} %write{7784,7784}
temp	float	$tmp4560	 %read{7787,7787} %write{7785,7785}
temp	float	$tmp4561	 %read{7787,7787} %write{7786,7786}
temp	color	$tmp4562	 %read{7801,7801} %write{7800,7800}
temp	point	$tmp4563	 %read{7794,7794} %write{7793,7793}
temp	float	$tmp4564	 %read{7793,7793} %write{7790,7790}
temp	float	$tmp4565	 %read{7793,7793} %write{7791,7791}
temp	float	$tmp4566	 %read{7793,7793} %write{7792,7792}
temp	point	$tmp4567	 %read{7799,7799} %write{7798,7798}
temp	float	$tmp4568	 %read{7798,7798} %write{7795,7795}
temp	float	$tmp4569	 %read{7798,7798} %write{7796,7796}
temp	float	$tmp4570	 %read{7798,7798} %write{7797,7797}
temp	point	$tmp4571	 %read{7803,7803} %write{7802,7802}
temp	int	$tmp4572	 %read{7807,7807} %write{7806,7806}
temp	int	$tmp4573	 %read{7810,7810} %write{7809,7809}
temp	int	$tmp4574	 %read{7813,7813} %write{7812,7812}
temp	float	$tmp4575	 %read{7818,7818} %write{7815,7815}
temp	float	$tmp4576	 %read{7815,7815} %write{7814,7814}
temp	float	$tmp4577	 %read{7818,7818} %write{7817,7817}
temp	float	$tmp4578	 %read{7817,7817} %write{7816,7816}
temp	float	$tmp4579	 %read{7821,7821} %write{7818,7818}
temp	float	$tmp4580	 %read{7821,7821} %write{7820,7820}
temp	float	$tmp4581	 %read{7820,7820} %write{7819,7819}
temp	int	$tmp4582	 %read{7823,7823} %write{7822,7822}
temp	float	$tmp4583	 %read{7831,7831} %write{7825,7825}
temp	float	$tmp4584	 %read{7825,7825} %write{7824,7824}
temp	float	$tmp4585	 %read{7831,7831} %write{7830,7830}
temp	float	$tmp4586	 %read{7830,7830} %write{7827,7827}
temp	float	$tmp4587	 %read{7827,7827} %write{7826,7826}
temp	float	$tmp4588	 %read{7830,7830} %write{7829,7829}
temp	float	$tmp4589	 %read{7829,7829} %write{7828,7828}
temp	int	$tmp4590	 %read{7833,7833} %write{7832,7832}
temp	float	$tmp4591	 %read{7840,7840} %write{7836,7836}
temp	float	$tmp4592	 %read{7836,7836} %write{7835,7835}
temp	float	$tmp4593	 %read{7835,7835} %write{7834,7834}
temp	float	$tmp4594	 %read{7840,7840} %write{7839,7839}
temp	float	$tmp4595	 %read{7839,7839} %write{7838,7838}
temp	float	$tmp4596	 %read{7838,7838} %write{7837,7837}
temp	float	$tmp4597	 %read{7844,7844} %write{7840,7840}
temp	float	$tmp4598	 %read{7844,7844} %write{7843,7843}
temp	float	$tmp4599	 %read{7843,7843} %write{7842,7842}
temp	float	$tmp4600	 %read{7842,7842} %write{7841,7841}
temp	int	$tmp4601	 %read{7846,7846} %write{7845,7845}
temp	float	$tmp4602	 %read{7851,7851} %write{7850,7850}
temp	float	$tmp4603	 %read{7850,7850} %write{7849,7849}
temp	vector	$tmp4604	 %read{7849,7849} %write{7847,7847}
temp	vector	$tmp4605	 %read{7849,7849} %write{7848,7848}
temp	int	$tmp4606	 %read{7853,7853} %write{7852,7852}
temp	float	$tmp4607	 %read{7860,7860} %write{7856,7856}
temp	float	$tmp4608	 %read{7856,7856} %write{7855,7855}
temp	float	$tmp4609	 %read{7855,7855} %write{7854,7854}
temp	float	$tmp4610	 %read{7860,7860} %write{7859,7859}
temp	float	$tmp4611	 %read{7859,7859} %write{7858,7858}
temp	float	$tmp4612	 %read{7858,7858} %write{7857,7857}
temp	float	$tmp4613	 %read{7864,7864} %write{7860,7860}
temp	float	$tmp4614	 %read{7864,7864} %write{7863,7863}
temp	float	$tmp4615	 %read{7863,7863} %write{7862,7862}
temp	float	$tmp4616	 %read{7862,7862} %write{7861,7861}
temp	float	$tmp4617	 %read{7866,7866} %write{7864,7864}
temp	float	$tmp4618	 %read{7866,7866} %write{7865,7865}
temp	point	$tmp4619	 %read{7872,7872} %write{7871,7871}
temp	float	$tmp4620	 %read{7871,7871} %write{7868,7868}
temp	float	$tmp4621	 %read{7871,7871} %write{7869,7869}
temp	float	$tmp4622	 %read{7871,7871} %write{7870,7870}
temp	float	$tmp4623	 %read{7874,7874} %write{7873,7873}
temp	int	$tmp4624	 %read{7875,7875} %write{7874,7874}
temp	float	$tmp4625	 %read{7877,7877} %write{7876,7876}
temp	float	$tmp4626	 %read{7879,7879} %write{7878,7878}
temp	float	$tmp4627	 %read{7881,7881} %write{7880,7880}
temp	point	$tmp4628	 %read{7884,7884} %write{7883,7883}
temp	point	$tmp4629	 %read{7886,7886} %write{7885,7885}
temp	point	$tmp4630	 %read{7888,7888} %write{7887,7887}
temp	float	$tmp4631	 %read{7891,7891} %write{7890,7890}
temp	int	$tmp4632	 %read{7892,7892} %write{7891,7891}
temp	float	$tmp4633	 %read{7894,7894} %write{7893,7893}
temp	float	$tmp4634	 %read{7896,7896} %write{7895,7895}
temp	point	$tmp4635	 %read{7899,7899} %write{7898,7898}
temp	point	$tmp4636	 %read{7901,7901} %write{7900,7900}
temp	float	$tmp4637	 %read{7904,7904} %write{7903,7903}
temp	int	$tmp4638	 %read{7905,7905} %write{7904,7904}
temp	float	$tmp4639	 %read{7907,7907} %write{7906,7906}
temp	point	$tmp4640	 %read{7910,7910} %write{7909,7909}
temp	float	$tmp4641	 %read{7913,7913} %write{7912,7912}
temp	int	$tmp4642	 %read{7914,7914} %write{7913,7913}
temp	int	$tmp4643	 %read{2147483647,-1} %write{7917,7917}
temp	int	$tmp4644	 %read{2147483647,-1} %write{7919,7919}
temp	int	$tmp4645	 %read{2147483647,-1} %write{7921,7921}
temp	float	$tmp4646	 %read{7925,7925} %write{7924,7924}
temp	int	$tmp4647	 %read{7927,7927} %write{7926,7926}
temp	float	$tmp4648	 %read{8097,8097} %write{8096,8096}
temp	float	$tmp4649	 %read{7934,7934} %write{7933,7933}
temp	float	$tmp4650	 %read{7933,7933} %write{7932,7932}
temp	float	$tmp4651	 %read{7937,7937} %write{7936,7936}
temp	float	$tmp4652	 %read{7936,7936} %write{7935,7935}
temp	float	$tmp4653	 %read{7940,7940} %write{7939,7939}
temp	float	$tmp4654	 %read{7939,7939} %write{7938,7938}
temp	int	$tmp4655	 %read{7948,7948} %write{7947,7947}
temp	int	$tmp4656	 %read{7945,8095} %write{7945,8095}
temp	int	$tmp4657	 %read{7952,7952} %write{7951,7951}
temp	int	$tmp4658	 %read{7949,8093} %write{7949,8093}
temp	int	$tmp4659	 %read{7956,7956} %write{7955,7955}
temp	int	$tmp4660	 %read{7953,8091} %write{7953,8091}
temp	float	$tmp4661	 %read{7960,7960} %write{7957,7957}
temp	float	$tmp4662	 %read{7960,7960} %write{7958,7958}
temp	float	$tmp4663	 %read{7960,7960} %write{7959,7959}
temp	color	$tmp4664	 %read{7974,7974} %write{7973,7973}
temp	point	$tmp4665	 %read{7967,7967} %write{7966,7966}
temp	float	$tmp4666	 %read{7966,7966} %write{7963,7963}
temp	float	$tmp4667	 %read{7966,7966} %write{7964,7964}
temp	float	$tmp4668	 %read{7966,7966} %write{7965,7965}
temp	point	$tmp4669	 %read{7972,7972} %write{7971,7971}
temp	float	$tmp4670	 %read{7971,7971} %write{7968,7968}
temp	float	$tmp4671	 %read{7971,7971} %write{7969,7969}
temp	float	$tmp4672	 %read{7971,7971} %write{7970,7970}
temp	point	$tmp4673	 %read{7976,7976} %write{7975,7975}
temp	int	$tmp4674	 %read{7980,7980} %write{7979,7979}
temp	int	$tmp4675	 %read{7983,7983} %write{7982,7982}
temp	int	$tmp4676	 %read{7986,7986} %write{7985,7985}
temp	float	$tmp4677	 %read{7991,7991} %write{7988,7988}
temp	float	$tmp4678	 %read{7988,7988} %write{7987,7987}
temp	float	$tmp4679	 %read{7991,7991} %write{7990,7990}
temp	float	$tmp4680	 %read{7990,7990} %write{7989,7989}
temp	float	$tmp4681	 %read{7994,7994} %write{7991,7991}
temp	float	$tmp4682	 %read{7994,7994} %write{7993,7993}
temp	float	$tmp4683	 %read{7993,7993} %write{7992,7992}
temp	int	$tmp4684	 %read{7996,7996} %write{7995,7995}
temp	float	$tmp4685	 %read{8004,8004} %write{7998,7998}
temp	float	$tmp4686	 %read{7998,7998} %write{7997,7997}
temp	float	$tmp4687	 %read{8004,8004} %write{8003,8003}
temp	float	$tmp4688	 %read{8003,8003} %write{8000,8000}
temp	float	$tmp4689	 %read{8000,8000} %write{7999,7999}
temp	float	$tmp4690	 %read{8003,8003} %write{8002,8002}
temp	float	$tmp4691	 %read{8002,8002} %write{8001,8001}
temp	int	$tmp4692	 %read{8006,8006} %write{8005,8005}
temp	float	$tmp4693	 %read{8013,8013} %write{8009,8009}
temp	float	$tmp4694	 %read{8009,8009} %write{8008,8008}
temp	float	$tmp4695	 %read{8008,8008} %write{8007,8007}
temp	float	$tmp4696	 %read{8013,8013} %write{8012,8012}
temp	float	$tmp4697	 %read{8012,8012} %write{8011,8011}
temp	float	$tmp4698	 %read{8011,8011} %write{8010,8010}
temp	float	$tmp4699	 %read{8017,8017} %write{8013,8013}
temp	float	$tmp4700	 %read{8017,8017} %write{8016,8016}
temp	float	$tmp4701	 %read{8016,8016} %write{8015,8015}
temp	float	$tmp4702	 %read{8015,8015} %write{8014,8014}
temp	int	$tmp4703	 %read{8019,8019} %write{8018,8018}
temp	float	$tmp4704	 %read{8024,8024} %write{8023,8023}
temp	float	$tmp4705	 %read{8023,8023} %write{8022,8022}
temp	vector	$tmp4706	 %read{8022,8022} %write{8020,8020}
temp	vector	$tmp4707	 %read{8022,8022} %write{8021,8021}
temp	int	$tmp4708	 %read{8026,8026} %write{8025,8025}
temp	float	$tmp4709	 %read{8033,8033} %write{8029,8029}
temp	float	$tmp4710	 %read{8029,8029} %write{8028,8028}
temp	float	$tmp4711	 %read{8028,8028} %write{8027,8027}
temp	float	$tmp4712	 %read{8033,8033} %write{8032,8032}
temp	float	$tmp4713	 %read{8032,8032} %write{8031,8031}
temp	float	$tmp4714	 %read{8031,8031} %write{8030,8030}
temp	float	$tmp4715	 %read{8037,8037} %write{8033,8033}
temp	float	$tmp4716	 %read{8037,8037} %write{8036,8036}
temp	float	$tmp4717	 %read{8036,8036} %write{8035,8035}
temp	float	$tmp4718	 %read{8035,8035} %write{8034,8034}
temp	float	$tmp4719	 %read{8039,8039} %write{8037,8037}
temp	float	$tmp4720	 %read{8039,8039} %write{8038,8038}
temp	point	$tmp4721	 %read{8045,8045} %write{8044,8044}
temp	float	$tmp4722	 %read{8044,8044} %write{8041,8041}
temp	float	$tmp4723	 %read{8044,8044} %write{8042,8042}
temp	float	$tmp4724	 %read{8044,8044} %write{8043,8043}
temp	float	$tmp4725	 %read{8047,8047} %write{8046,8046}
temp	int	$tmp4726	 %read{8048,8048} %write{8047,8047}
temp	float	$tmp4727	 %read{8050,8050} %write{8049,8049}
temp	float	$tmp4728	 %read{8052,8052} %write{8051,8051}
temp	float	$tmp4729	 %read{8054,8054} %write{8053,8053}
temp	point	$tmp4730	 %read{8057,8057} %write{8056,8056}
temp	point	$tmp4731	 %read{8059,8059} %write{8058,8058}
temp	point	$tmp4732	 %read{8061,8061} %write{8060,8060}
temp	float	$tmp4733	 %read{8064,8064} %write{8063,8063}
temp	int	$tmp4734	 %read{8065,8065} %write{8064,8064}
temp	float	$tmp4735	 %read{8067,8067} %write{8066,8066}
temp	float	$tmp4736	 %read{8069,8069} %write{8068,8068}
temp	point	$tmp4737	 %read{8072,8072} %write{8071,8071}
temp	point	$tmp4738	 %read{8074,8074} %write{8073,8073}
temp	float	$tmp4739	 %read{8077,8077} %write{8076,8076}
temp	int	$tmp4740	 %read{8078,8078} %write{8077,8077}
temp	float	$tmp4741	 %read{8080,8080} %write{8079,8079}
temp	point	$tmp4742	 %read{8083,8083} %write{8082,8082}
temp	float	$tmp4743	 %read{8086,8086} %write{8085,8085}
temp	int	$tmp4744	 %read{8087,8087} %write{8086,8086}
temp	int	$tmp4745	 %read{2147483647,-1} %write{8090,8090}
temp	int	$tmp4746	 %read{2147483647,-1} %write{8092,8092}
temp	int	$tmp4747	 %read{2147483647,-1} %write{8094,8094}
temp	float	$tmp4748	 %read{8098,8098} %write{8097,8097}
temp	int	$tmp4749	 %read{8100,8100} %write{8099,8099}
temp	float	$tmp4750	 %read{8270,8270} %write{8269,8269}
temp	float	$tmp4751	 %read{8107,8107} %write{8106,8106}
temp	float	$tmp4752	 %read{8106,8106} %write{8105,8105}
temp	float	$tmp4753	 %read{8110,8110} %write{8109,8109}
temp	float	$tmp4754	 %read{8109,8109} %write{8108,8108}
temp	float	$tmp4755	 %read{8113,8113} %write{8112,8112}
temp	float	$tmp4756	 %read{8112,8112} %write{8111,8111}
temp	int	$tmp4757	 %read{8121,8121} %write{8120,8120}
temp	int	$tmp4758	 %read{8118,8268} %write{8118,8268}
temp	int	$tmp4759	 %read{8125,8125} %write{8124,8124}
temp	int	$tmp4760	 %read{8122,8266} %write{8122,8266}
temp	int	$tmp4761	 %read{8129,8129} %write{8128,8128}
temp	int	$tmp4762	 %read{8126,8264} %write{8126,8264}
temp	float	$tmp4763	 %read{8133,8133} %write{8130,8130}
temp	float	$tmp4764	 %read{8133,8133} %write{8131,8131}
temp	float	$tmp4765	 %read{8133,8133} %write{8132,8132}
temp	color	$tmp4766	 %read{8147,8147} %write{8146,8146}
temp	point	$tmp4767	 %read{8140,8140} %write{8139,8139}
temp	float	$tmp4768	 %read{8139,8139} %write{8136,8136}
temp	float	$tmp4769	 %read{8139,8139} %write{8137,8137}
temp	float	$tmp4770	 %read{8139,8139} %write{8138,8138}
temp	point	$tmp4771	 %read{8145,8145} %write{8144,8144}
temp	float	$tmp4772	 %read{8144,8144} %write{8141,8141}
temp	float	$tmp4773	 %read{8144,8144} %write{8142,8142}
temp	float	$tmp4774	 %read{8144,8144} %write{8143,8143}
temp	point	$tmp4775	 %read{8149,8149} %write{8148,8148}
temp	int	$tmp4776	 %read{8153,8153} %write{8152,8152}
temp	int	$tmp4777	 %read{8156,8156} %write{8155,8155}
temp	int	$tmp4778	 %read{8159,8159} %write{8158,8158}
temp	float	$tmp4779	 %read{8164,8164} %write{8161,8161}
temp	float	$tmp4780	 %read{8161,8161} %write{8160,8160}
temp	float	$tmp4781	 %read{8164,8164} %write{8163,8163}
temp	float	$tmp4782	 %read{8163,8163} %write{8162,8162}
temp	float	$tmp4783	 %read{8167,8167} %write{8164,8164}
temp	float	$tmp4784	 %read{8167,8167} %write{8166,8166}
temp	float	$tmp4785	 %read{8166,8166} %write{8165,8165}
temp	int	$tmp4786	 %read{8169,8169} %write{8168,8168}
temp	float	$tmp4787	 %read{8177,8177} %write{8171,8171}
temp	float	$tmp4788	 %read{8171,8171} %write{8170,8170}
temp	float	$tmp4789	 %read{8177,8177} %write{8176,8176}
temp	float	$tmp4790	 %read{8176,8176} %write{8173,8173}
temp	float	$tmp4791	 %read{8173,8173} %write{8172,8172}
temp	float	$tmp4792	 %read{8176,8176} %write{8175,8175}
temp	float	$tmp4793	 %read{8175,8175} %write{8174,8174}
temp	int	$tmp4794	 %read{8179,8179} %write{8178,8178}
temp	float	$tmp4795	 %read{8186,8186} %write{8182,8182}
temp	float	$tmp4796	 %read{8182,8182} %write{8181,8181}
temp	float	$tmp4797	 %read{8181,8181} %write{8180,8180}
temp	float	$tmp4798	 %read{8186,8186} %write{8185,8185}
temp	float	$tmp4799	 %read{8185,8185} %write{8184,8184}
temp	float	$tmp4800	 %read{8184,8184} %write{8183,8183}
temp	float	$tmp4801	 %read{8190,8190} %write{8186,8186}
temp	float	$tmp4802	 %read{8190,8190} %write{8189,8189}
temp	float	$tmp4803	 %read{8189,8189} %write{8188,8188}
temp	float	$tmp4804	 %read{8188,8188} %write{8187,8187}
temp	int	$tmp4805	 %read{8192,8192} %write{8191,8191}
temp	float	$tmp4806	 %read{8197,8197} %write{8196,8196}
temp	float	$tmp4807	 %read{8196,8196} %write{8195,8195}
temp	vector	$tmp4808	 %read{8195,8195} %write{8193,8193}
temp	vector	$tmp4809	 %read{8195,8195} %write{8194,8194}
temp	int	$tmp4810	 %read{8199,8199} %write{8198,8198}
temp	float	$tmp4811	 %read{8206,8206} %write{8202,8202}
temp	float	$tmp4812	 %read{8202,8202} %write{8201,8201}
temp	float	$tmp4813	 %read{8201,8201} %write{8200,8200}
temp	float	$tmp4814	 %read{8206,8206} %write{8205,8205}
temp	float	$tmp4815	 %read{8205,8205} %write{8204,8204}
temp	float	$tmp4816	 %read{8204,8204} %write{8203,8203}
temp	float	$tmp4817	 %read{8210,8210} %write{8206,8206}
temp	float	$tmp4818	 %read{8210,8210} %write{8209,8209}
temp	float	$tmp4819	 %read{8209,8209} %write{8208,8208}
temp	float	$tmp4820	 %read{8208,8208} %write{8207,8207}
temp	float	$tmp4821	 %read{8212,8212} %write{8210,8210}
temp	float	$tmp4822	 %read{8212,8212} %write{8211,8211}
temp	point	$tmp4823	 %read{8218,8218} %write{8217,8217}
temp	float	$tmp4824	 %read{8217,8217} %write{8214,8214}
temp	float	$tmp4825	 %read{8217,8217} %write{8215,8215}
temp	float	$tmp4826	 %read{8217,8217} %write{8216,8216}
temp	float	$tmp4827	 %read{8220,8220} %write{8219,8219}
temp	int	$tmp4828	 %read{8221,8221} %write{8220,8220}
temp	float	$tmp4829	 %read{8223,8223} %write{8222,8222}
temp	float	$tmp4830	 %read{8225,8225} %write{8224,8224}
temp	float	$tmp4831	 %read{8227,8227} %write{8226,8226}
temp	point	$tmp4832	 %read{8230,8230} %write{8229,8229}
temp	point	$tmp4833	 %read{8232,8232} %write{8231,8231}
temp	point	$tmp4834	 %read{8234,8234} %write{8233,8233}
temp	float	$tmp4835	 %read{8237,8237} %write{8236,8236}
temp	int	$tmp4836	 %read{8238,8238} %write{8237,8237}
temp	float	$tmp4837	 %read{8240,8240} %write{8239,8239}
temp	float	$tmp4838	 %read{8242,8242} %write{8241,8241}
temp	point	$tmp4839	 %read{8245,8245} %write{8244,8244}
temp	point	$tmp4840	 %read{8247,8247} %write{8246,8246}
temp	float	$tmp4841	 %read{8250,8250} %write{8249,8249}
temp	int	$tmp4842	 %read{8251,8251} %write{8250,8250}
temp	float	$tmp4843	 %read{8253,8253} %write{8252,8252}
temp	point	$tmp4844	 %read{8256,8256} %write{8255,8255}
temp	float	$tmp4845	 %read{8259,8259} %write{8258,8258}
temp	int	$tmp4846	 %read{8260,8260} %write{8259,8259}
temp	int	$tmp4847	 %read{2147483647,-1} %write{8263,8263}
temp	int	$tmp4848	 %read{2147483647,-1} %write{8265,8265}
temp	int	$tmp4849	 %read{2147483647,-1} %write{8267,8267}
temp	float	$tmp4850	 %read{8271,8271} %write{8270,8270}
temp	int	$tmp4851	 %read{8273,8273} %write{8272,8272}
temp	float	$tmp4852	 %read{8445,8445} %write{8444,8444}
temp	float	$tmp4853	 %read{8280,8280} %write{8279,8279}
temp	float	$tmp4854	 %read{8279,8279} %write{8278,8278}
temp	float	$tmp4855	 %read{8283,8283} %write{8282,8282}
temp	float	$tmp4856	 %read{8282,8282} %write{8281,8281}
temp	float	$tmp4857	 %read{8286,8286} %write{8285,8285}
temp	float	$tmp4858	 %read{8285,8285} %write{8284,8284}
temp	int	$tmp4859	 %read{8294,8294} %write{8293,8293}
temp	int	$tmp4860	 %read{8291,8441} %write{8291,8441}
temp	int	$tmp4861	 %read{8298,8298} %write{8297,8297}
temp	int	$tmp4862	 %read{8295,8439} %write{8295,8439}
temp	int	$tmp4863	 %read{8302,8302} %write{8301,8301}
temp	int	$tmp4864	 %read{8299,8437} %write{8299,8437}
temp	float	$tmp4865	 %read{8306,8306} %write{8303,8303}
temp	float	$tmp4866	 %read{8306,8306} %write{8304,8304}
temp	float	$tmp4867	 %read{8306,8306} %write{8305,8305}
temp	color	$tmp4868	 %read{8320,8320} %write{8319,8319}
temp	point	$tmp4869	 %read{8313,8313} %write{8312,8312}
temp	float	$tmp4870	 %read{8312,8312} %write{8309,8309}
temp	float	$tmp4871	 %read{8312,8312} %write{8310,8310}
temp	float	$tmp4872	 %read{8312,8312} %write{8311,8311}
temp	point	$tmp4873	 %read{8318,8318} %write{8317,8317}
temp	float	$tmp4874	 %read{8317,8317} %write{8314,8314}
temp	float	$tmp4875	 %read{8317,8317} %write{8315,8315}
temp	float	$tmp4876	 %read{8317,8317} %write{8316,8316}
temp	point	$tmp4877	 %read{8322,8322} %write{8321,8321}
temp	int	$tmp4878	 %read{8326,8326} %write{8325,8325}
temp	int	$tmp4879	 %read{8329,8329} %write{8328,8328}
temp	int	$tmp4880	 %read{8332,8332} %write{8331,8331}
temp	float	$tmp4881	 %read{8337,8337} %write{8334,8334}
temp	float	$tmp4882	 %read{8334,8334} %write{8333,8333}
temp	float	$tmp4883	 %read{8337,8337} %write{8336,8336}
temp	float	$tmp4884	 %read{8336,8336} %write{8335,8335}
temp	float	$tmp4885	 %read{8340,8340} %write{8337,8337}
temp	float	$tmp4886	 %read{8340,8340} %write{8339,8339}
temp	float	$tmp4887	 %read{8339,8339} %write{8338,8338}
temp	int	$tmp4888	 %read{8342,8342} %write{8341,8341}
temp	float	$tmp4889	 %read{8350,8350} %write{8344,8344}
temp	float	$tmp4890	 %read{8344,8344} %write{8343,8343}
temp	float	$tmp4891	 %read{8350,8350} %write{8349,8349}
temp	float	$tmp4892	 %read{8349,8349} %write{8346,8346}
temp	float	$tmp4893	 %read{8346,8346} %write{8345,8345}
temp	float	$tmp4894	 %read{8349,8349} %write{8348,8348}
temp	float	$tmp4895	 %read{8348,8348} %write{8347,8347}
temp	int	$tmp4896	 %read{8352,8352} %write{8351,8351}
temp	float	$tmp4897	 %read{8359,8359} %write{8355,8355}
temp	float	$tmp4898	 %read{8355,8355} %write{8354,8354}
temp	float	$tmp4899	 %read{8354,8354} %write{8353,8353}
temp	float	$tmp4900	 %read{8359,8359} %write{8358,8358}
temp	float	$tmp4901	 %read{8358,8358} %write{8357,8357}
temp	float	$tmp4902	 %read{8357,8357} %write{8356,8356}
temp	float	$tmp4903	 %read{8363,8363} %write{8359,8359}
temp	float	$tmp4904	 %read{8363,8363} %write{8362,8362}
temp	float	$tmp4905	 %read{8362,8362} %write{8361,8361}
temp	float	$tmp4906	 %read{8361,8361} %write{8360,8360}
temp	int	$tmp4907	 %read{8365,8365} %write{8364,8364}
temp	float	$tmp4908	 %read{8370,8370} %write{8369,8369}
temp	float	$tmp4909	 %read{8369,8369} %write{8368,8368}
temp	vector	$tmp4910	 %read{8368,8368} %write{8366,8366}
temp	vector	$tmp4911	 %read{8368,8368} %write{8367,8367}
temp	int	$tmp4912	 %read{8372,8372} %write{8371,8371}
temp	float	$tmp4913	 %read{8379,8379} %write{8375,8375}
temp	float	$tmp4914	 %read{8375,8375} %write{8374,8374}
temp	float	$tmp4915	 %read{8374,8374} %write{8373,8373}
temp	float	$tmp4916	 %read{8379,8379} %write{8378,8378}
temp	float	$tmp4917	 %read{8378,8378} %write{8377,8377}
temp	float	$tmp4918	 %read{8377,8377} %write{8376,8376}
temp	float	$tmp4919	 %read{8383,8383} %write{8379,8379}
temp	float	$tmp4920	 %read{8383,8383} %write{8382,8382}
temp	float	$tmp4921	 %read{8382,8382} %write{8381,8381}
temp	float	$tmp4922	 %read{8381,8381} %write{8380,8380}
temp	float	$tmp4923	 %read{8385,8385} %write{8383,8383}
temp	float	$tmp4924	 %read{8385,8385} %write{8384,8384}
temp	point	$tmp4925	 %read{8391,8391} %write{8390,8390}
temp	float	$tmp4926	 %read{8390,8390} %write{8387,8387}
temp	float	$tmp4927	 %read{8390,8390} %write{8388,8388}
temp	float	$tmp4928	 %read{8390,8390} %write{8389,8389}
temp	float	$tmp4929	 %read{8393,8393} %write{8392,8392}
temp	int	$tmp4930	 %read{8394,8394} %write{8393,8393}
temp	float	$tmp4931	 %read{8396,8396} %write{8395,8395}
temp	float	$tmp4932	 %read{8398,8398} %write{8397,8397}
temp	float	$tmp4933	 %read{8400,8400} %write{8399,8399}
temp	point	$tmp4934	 %read{8403,8403} %write{8402,8402}
temp	point	$tmp4935	 %read{8405,8405} %write{8404,8404}
temp	point	$tmp4936	 %read{8407,8407} %write{8406,8406}
temp	float	$tmp4937	 %read{8410,8410} %write{8409,8409}
temp	int	$tmp4938	 %read{8411,8411} %write{8410,8410}
temp	float	$tmp4939	 %read{8413,8413} %write{8412,8412}
temp	float	$tmp4940	 %read{8415,8415} %write{8414,8414}
temp	point	$tmp4941	 %read{8418,8418} %write{8417,8417}
temp	point	$tmp4942	 %read{8420,8420} %write{8419,8419}
temp	float	$tmp4943	 %read{8423,8423} %write{8422,8422}
temp	int	$tmp4944	 %read{8424,8424} %write{8423,8423}
temp	float	$tmp4945	 %read{8426,8426} %write{8425,8425}
temp	point	$tmp4946	 %read{8429,8429} %write{8428,8428}
temp	float	$tmp4947	 %read{8432,8432} %write{8431,8431}
temp	int	$tmp4948	 %read{8433,8433} %write{8432,8432}
temp	int	$tmp4949	 %read{2147483647,-1} %write{8436,8436}
temp	int	$tmp4950	 %read{2147483647,-1} %write{8438,8438}
temp	int	$tmp4951	 %read{2147483647,-1} %write{8440,8440}
temp	float	$tmp4952	 %read{8444,8444} %write{8442,8442}
temp	float	$tmp4953	 %read{8444,8444} %write{8443,8443}
temp	float	$tmp4954	 %read{8446,8446} %write{8445,8445}
temp	int	$tmp4955	 %read{8448,8448} %write{8447,8447}
temp	float	$tmp4956	 %read{8627,8627} %write{8624,8625}
temp	float	$tmp4957	 %read{8621,8621} %write{8620,8620}
temp	float	$tmp4958	 %read{8456,8456} %write{8455,8455}
temp	float	$tmp4959	 %read{8455,8455} %write{8454,8454}
temp	float	$tmp4960	 %read{8459,8459} %write{8458,8458}
temp	float	$tmp4961	 %read{8458,8458} %write{8457,8457}
temp	float	$tmp4962	 %read{8462,8462} %write{8461,8461}
temp	float	$tmp4963	 %read{8461,8461} %write{8460,8460}
temp	int	$tmp4964	 %read{8470,8470} %write{8469,8469}
temp	int	$tmp4965	 %read{8467,8617} %write{8467,8617}
temp	int	$tmp4966	 %read{8474,8474} %write{8473,8473}
temp	int	$tmp4967	 %read{8471,8615} %write{8471,8615}
temp	int	$tmp4968	 %read{8478,8478} %write{8477,8477}
temp	int	$tmp4969	 %read{8475,8613} %write{8475,8613}
temp	float	$tmp4970	 %read{8482,8482} %write{8479,8479}
temp	float	$tmp4971	 %read{8482,8482} %write{8480,8480}
temp	float	$tmp4972	 %read{8482,8482} %write{8481,8481}
temp	color	$tmp4973	 %read{8496,8496} %write{8495,8495}
temp	point	$tmp4974	 %read{8489,8489} %write{8488,8488}
temp	float	$tmp4975	 %read{8488,8488} %write{8485,8485}
temp	float	$tmp4976	 %read{8488,8488} %write{8486,8486}
temp	float	$tmp4977	 %read{8488,8488} %write{8487,8487}
temp	point	$tmp4978	 %read{8494,8494} %write{8493,8493}
temp	float	$tmp4979	 %read{8493,8493} %write{8490,8490}
temp	float	$tmp4980	 %read{8493,8493} %write{8491,8491}
temp	float	$tmp4981	 %read{8493,8493} %write{8492,8492}
temp	point	$tmp4982	 %read{8498,8498} %write{8497,8497}
temp	int	$tmp4983	 %read{8502,8502} %write{8501,8501}
temp	int	$tmp4984	 %read{8505,8505} %write{8504,8504}
temp	int	$tmp4985	 %read{8508,8508} %write{8507,8507}
temp	float	$tmp4986	 %read{8513,8513} %write{8510,8510}
temp	float	$tmp4987	 %read{8510,8510} %write{8509,8509}
temp	float	$tmp4988	 %read{8513,8513} %write{8512,8512}
temp	float	$tmp4989	 %read{8512,8512} %write{8511,8511}
temp	float	$tmp4990	 %read{8516,8516} %write{8513,8513}
temp	float	$tmp4991	 %read{8516,8516} %write{8515,8515}
temp	float	$tmp4992	 %read{8515,8515} %write{8514,8514}
temp	int	$tmp4993	 %read{8518,8518} %write{8517,8517}
temp	float	$tmp4994	 %read{8526,8526} %write{8520,8520}
temp	float	$tmp4995	 %read{8520,8520} %write{8519,8519}
temp	float	$tmp4996	 %read{8526,8526} %write{8525,8525}
temp	float	$tmp4997	 %read{8525,8525} %write{8522,8522}
temp	float	$tmp4998	 %read{8522,8522} %write{8521,8521}
temp	float	$tmp4999	 %read{8525,8525} %write{8524,8524}
temp	float	$tmp5000	 %read{8524,8524} %write{8523,8523}
temp	int	$tmp5001	 %read{8528,8528} %write{8527,8527}
temp	float	$tmp5002	 %read{8535,8535} %write{8531,8531}
temp	float	$tmp5003	 %read{8531,8531} %write{8530,8530}
temp	float	$tmp5004	 %read{8530,8530} %write{8529,8529}
temp	float	$tmp5005	 %read{8535,8535} %write{8534,8534}
temp	float	$tmp5006	 %read{8534,8534} %write{8533,8533}
temp	float	$tmp5007	 %read{8533,8533} %write{8532,8532}
temp	float	$tmp5008	 %read{8539,8539} %write{8535,8535}
temp	float	$tmp5009	 %read{8539,8539} %write{8538,8538}
temp	float	$tmp5010	 %read{8538,8538} %write{8537,8537}
temp	float	$tmp5011	 %read{8537,8537} %write{8536,8536}
temp	int	$tmp5012	 %read{8541,8541} %write{8540,8540}
temp	float	$tmp5013	 %read{8546,8546} %write{8545,8545}
temp	float	$tmp5014	 %read{8545,8545} %write{8544,8544}
temp	vector	$tmp5015	 %read{8544,8544} %write{8542,8542}
temp	vector	$tmp5016	 %read{8544,8544} %write{8543,8543}
temp	int	$tmp5017	 %read{8548,8548} %write{8547,8547}
temp	float	$tmp5018	 %read{8555,8555} %write{8551,8551}
temp	float	$tmp5019	 %read{8551,8551} %write{8550,8550}
temp	float	$tmp5020	 %read{8550,8550} %write{8549,8549}
temp	float	$tmp5021	 %read{8555,8555} %write{8554,8554}
temp	float	$tmp5022	 %read{8554,8554} %write{8553,8553}
temp	float	$tmp5023	 %read{8553,8553} %write{8552,8552}
temp	float	$tmp5024	 %read{8559,8559} %write{8555,8555}
temp	float	$tmp5025	 %read{8559,8559} %write{8558,8558}
temp	float	$tmp5026	 %read{8558,8558} %write{8557,8557}
temp	float	$tmp5027	 %read{8557,8557} %write{8556,8556}
temp	float	$tmp5028	 %read{8561,8561} %write{8559,8559}
temp	float	$tmp5029	 %read{8561,8561} %write{8560,8560}
temp	point	$tmp5030	 %read{8567,8567} %write{8566,8566}
temp	float	$tmp5031	 %read{8566,8566} %write{8563,8563}
temp	float	$tmp5032	 %read{8566,8566} %write{8564,8564}
temp	float	$tmp5033	 %read{8566,8566} %write{8565,8565}
temp	float	$tmp5034	 %read{8569,8569} %write{8568,8568}
temp	int	$tmp5035	 %read{8570,8570} %write{8569,8569}
temp	float	$tmp5036	 %read{8572,8572} %write{8571,8571}
temp	float	$tmp5037	 %read{8574,8574} %write{8573,8573}
temp	float	$tmp5038	 %read{8576,8576} %write{8575,8575}
temp	point	$tmp5039	 %read{8579,8579} %write{8578,8578}
temp	point	$tmp5040	 %read{8581,8581} %write{8580,8580}
temp	point	$tmp5041	 %read{8583,8583} %write{8582,8582}
temp	float	$tmp5042	 %read{8586,8586} %write{8585,8585}
temp	int	$tmp5043	 %read{8587,8587} %write{8586,8586}
temp	float	$tmp5044	 %read{8589,8589} %write{8588,8588}
temp	float	$tmp5045	 %read{8591,8591} %write{8590,8590}
temp	point	$tmp5046	 %read{8594,8594} %write{8593,8593}
temp	point	$tmp5047	 %read{8596,8596} %write{8595,8595}
temp	float	$tmp5048	 %read{8599,8599} %write{8598,8598}
temp	int	$tmp5049	 %read{8600,8600} %write{8599,8599}
temp	float	$tmp5050	 %read{8602,8602} %write{8601,8601}
temp	point	$tmp5051	 %read{8605,8605} %write{8604,8604}
temp	float	$tmp5052	 %read{8608,8608} %write{8607,8607}
temp	int	$tmp5053	 %read{8609,8609} %write{8608,8608}
temp	int	$tmp5054	 %read{2147483647,-1} %write{8612,8612}
temp	int	$tmp5055	 %read{2147483647,-1} %write{8614,8614}
temp	int	$tmp5056	 %read{2147483647,-1} %write{8616,8616}
temp	float	$tmp5057	 %read{8620,8620} %write{8618,8618}
temp	float	$tmp5058	 %read{8620,8620} %write{8619,8619}
temp	int	$tmp5059	 %read{8623,8623} %write{8622,8622}
temp	float	$tmp5060	 %read{8628,8628} %write{8627,8627}
temp	int	$tmp5061	 %read{8630,8630} %write{8629,8629}
temp	float	$tmp5062	 %read{8635,8635} %write{8634,8634}
temp	float	$tmp5063	 %read{8636,8636} %write{8635,8635}
temp	float	$tmp5064	 %read{8638,8638} %write{8637,8637}
temp	int	$tmp5065	 %read{2147483647,-1} %write{8641,8641}
temp	float	$tmp5066	 %read{8644,8644} %write{8643,8643}
temp	int	$tmp5067	 %read{8646,8646} %write{8645,8645}
temp	point	$tmp5068	 %read{8652,9704} %write{8647,9690}
temp	int	$tmp5069	 %read{8651,8651} %write{8650,8650}
temp	int	$tmp5070	 %read{8654,8654} %write{8653,8653}
temp	float	$tmp5071	 %read{8824,8824} %write{8823,8823}
temp	float	$tmp5072	 %read{8661,8661} %write{8660,8660}
temp	float	$tmp5073	 %read{8660,8660} %write{8659,8659}
temp	float	$tmp5074	 %read{8664,8664} %write{8663,8663}
temp	float	$tmp5075	 %read{8663,8663} %write{8662,8662}
temp	float	$tmp5076	 %read{8667,8667} %write{8666,8666}
temp	float	$tmp5077	 %read{8666,8666} %write{8665,8665}
temp	int	$tmp5078	 %read{8675,8675} %write{8674,8674}
temp	int	$tmp5079	 %read{8672,8822} %write{8672,8822}
temp	int	$tmp5080	 %read{8679,8679} %write{8678,8678}
temp	int	$tmp5081	 %read{8676,8820} %write{8676,8820}
temp	int	$tmp5082	 %read{8683,8683} %write{8682,8682}
temp	int	$tmp5083	 %read{8680,8818} %write{8680,8818}
temp	float	$tmp5084	 %read{8687,8687} %write{8684,8684}
temp	float	$tmp5085	 %read{8687,8687} %write{8685,8685}
temp	float	$tmp5086	 %read{8687,8687} %write{8686,8686}
temp	color	$tmp5087	 %read{8701,8701} %write{8700,8700}
temp	point	$tmp5088	 %read{8694,8694} %write{8693,8693}
temp	float	$tmp5089	 %read{8693,8693} %write{8690,8690}
temp	float	$tmp5090	 %read{8693,8693} %write{8691,8691}
temp	float	$tmp5091	 %read{8693,8693} %write{8692,8692}
temp	point	$tmp5092	 %read{8699,8699} %write{8698,8698}
temp	float	$tmp5093	 %read{8698,8698} %write{8695,8695}
temp	float	$tmp5094	 %read{8698,8698} %write{8696,8696}
temp	float	$tmp5095	 %read{8698,8698} %write{8697,8697}
temp	point	$tmp5096	 %read{8703,8703} %write{8702,8702}
temp	int	$tmp5097	 %read{8707,8707} %write{8706,8706}
temp	int	$tmp5098	 %read{8710,8710} %write{8709,8709}
temp	int	$tmp5099	 %read{8713,8713} %write{8712,8712}
temp	float	$tmp5100	 %read{8718,8718} %write{8715,8715}
temp	float	$tmp5101	 %read{8715,8715} %write{8714,8714}
temp	float	$tmp5102	 %read{8718,8718} %write{8717,8717}
temp	float	$tmp5103	 %read{8717,8717} %write{8716,8716}
temp	float	$tmp5104	 %read{8721,8721} %write{8718,8718}
temp	float	$tmp5105	 %read{8721,8721} %write{8720,8720}
temp	float	$tmp5106	 %read{8720,8720} %write{8719,8719}
temp	int	$tmp5107	 %read{8723,8723} %write{8722,8722}
temp	float	$tmp5108	 %read{8731,8731} %write{8725,8725}
temp	float	$tmp5109	 %read{8725,8725} %write{8724,8724}
temp	float	$tmp5110	 %read{8731,8731} %write{8730,8730}
temp	float	$tmp5111	 %read{8730,8730} %write{8727,8727}
temp	float	$tmp5112	 %read{8727,8727} %write{8726,8726}
temp	float	$tmp5113	 %read{8730,8730} %write{8729,8729}
temp	float	$tmp5114	 %read{8729,8729} %write{8728,8728}
temp	int	$tmp5115	 %read{8733,8733} %write{8732,8732}
temp	float	$tmp5116	 %read{8740,8740} %write{8736,8736}
temp	float	$tmp5117	 %read{8736,8736} %write{8735,8735}
temp	float	$tmp5118	 %read{8735,8735} %write{8734,8734}
temp	float	$tmp5119	 %read{8740,8740} %write{8739,8739}
temp	float	$tmp5120	 %read{8739,8739} %write{8738,8738}
temp	float	$tmp5121	 %read{8738,8738} %write{8737,8737}
temp	float	$tmp5122	 %read{8744,8744} %write{8740,8740}
temp	float	$tmp5123	 %read{8744,8744} %write{8743,8743}
temp	float	$tmp5124	 %read{8743,8743} %write{8742,8742}
temp	float	$tmp5125	 %read{8742,8742} %write{8741,8741}
temp	int	$tmp5126	 %read{8746,8746} %write{8745,8745}
temp	float	$tmp5127	 %read{8751,8751} %write{8750,8750}
temp	float	$tmp5128	 %read{8750,8750} %write{8749,8749}
temp	vector	$tmp5129	 %read{8749,8749} %write{8747,8747}
temp	vector	$tmp5130	 %read{8749,8749} %write{8748,8748}
temp	int	$tmp5131	 %read{8753,8753} %write{8752,8752}
temp	float	$tmp5132	 %read{8760,8760} %write{8756,8756}
temp	float	$tmp5133	 %read{8756,8756} %write{8755,8755}
temp	float	$tmp5134	 %read{8755,8755} %write{8754,8754}
temp	float	$tmp5135	 %read{8760,8760} %write{8759,8759}
temp	float	$tmp5136	 %read{8759,8759} %write{8758,8758}
temp	float	$tmp5137	 %read{8758,8758} %write{8757,8757}
temp	float	$tmp5138	 %read{8764,8764} %write{8760,8760}
temp	float	$tmp5139	 %read{8764,8764} %write{8763,8763}
temp	float	$tmp5140	 %read{8763,8763} %write{8762,8762}
temp	float	$tmp5141	 %read{8762,8762} %write{8761,8761}
temp	float	$tmp5142	 %read{8766,8766} %write{8764,8764}
temp	float	$tmp5143	 %read{8766,8766} %write{8765,8765}
temp	point	$tmp5144	 %read{8772,8772} %write{8771,8771}
temp	float	$tmp5145	 %read{8771,8771} %write{8768,8768}
temp	float	$tmp5146	 %read{8771,8771} %write{8769,8769}
temp	float	$tmp5147	 %read{8771,8771} %write{8770,8770}
temp	float	$tmp5148	 %read{8774,8774} %write{8773,8773}
temp	int	$tmp5149	 %read{8775,8775} %write{8774,8774}
temp	float	$tmp5150	 %read{8777,8777} %write{8776,8776}
temp	float	$tmp5151	 %read{8779,8779} %write{8778,8778}
temp	float	$tmp5152	 %read{8781,8781} %write{8780,8780}
temp	point	$tmp5153	 %read{8784,8784} %write{8783,8783}
temp	point	$tmp5154	 %read{8786,8786} %write{8785,8785}
temp	point	$tmp5155	 %read{8788,8788} %write{8787,8787}
temp	float	$tmp5156	 %read{8791,8791} %write{8790,8790}
temp	int	$tmp5157	 %read{8792,8792} %write{8791,8791}
temp	float	$tmp5158	 %read{8794,8794} %write{8793,8793}
temp	float	$tmp5159	 %read{8796,8796} %write{8795,8795}
temp	point	$tmp5160	 %read{8799,8799} %write{8798,8798}
temp	point	$tmp5161	 %read{8801,8801} %write{8800,8800}
temp	float	$tmp5162	 %read{8804,8804} %write{8803,8803}
temp	int	$tmp5163	 %read{8805,8805} %write{8804,8804}
temp	float	$tmp5164	 %read{8807,8807} %write{8806,8806}
temp	point	$tmp5165	 %read{8810,8810} %write{8809,8809}
temp	float	$tmp5166	 %read{8813,8813} %write{8812,8812}
temp	int	$tmp5167	 %read{8814,8814} %write{8813,8813}
temp	int	$tmp5168	 %read{2147483647,-1} %write{8817,8817}
temp	int	$tmp5169	 %read{2147483647,-1} %write{8819,8819}
temp	int	$tmp5170	 %read{2147483647,-1} %write{8821,8821}
temp	float	$tmp5171	 %read{8825,8825} %write{8824,8824}
temp	int	$tmp5172	 %read{8827,8827} %write{8826,8826}
temp	float	$tmp5173	 %read{8997,8997} %write{8996,8996}
temp	float	$tmp5174	 %read{8834,8834} %write{8833,8833}
temp	float	$tmp5175	 %read{8833,8833} %write{8832,8832}
temp	float	$tmp5176	 %read{8837,8837} %write{8836,8836}
temp	float	$tmp5177	 %read{8836,8836} %write{8835,8835}
temp	float	$tmp5178	 %read{8840,8840} %write{8839,8839}
temp	float	$tmp5179	 %read{8839,8839} %write{8838,8838}
temp	int	$tmp5180	 %read{8848,8848} %write{8847,8847}
temp	int	$tmp5181	 %read{8845,8995} %write{8845,8995}
temp	int	$tmp5182	 %read{8852,8852} %write{8851,8851}
temp	int	$tmp5183	 %read{8849,8993} %write{8849,8993}
temp	int	$tmp5184	 %read{8856,8856} %write{8855,8855}
temp	int	$tmp5185	 %read{8853,8991} %write{8853,8991}
temp	float	$tmp5186	 %read{8860,8860} %write{8857,8857}
temp	float	$tmp5187	 %read{8860,8860} %write{8858,8858}
temp	float	$tmp5188	 %read{8860,8860} %write{8859,8859}
temp	color	$tmp5189	 %read{8874,8874} %write{8873,8873}
temp	point	$tmp5190	 %read{8867,8867} %write{8866,8866}
temp	float	$tmp5191	 %read{8866,8866} %write{8863,8863}
temp	float	$tmp5192	 %read{8866,8866} %write{8864,8864}
temp	float	$tmp5193	 %read{8866,8866} %write{8865,8865}
temp	point	$tmp5194	 %read{8872,8872} %write{8871,8871}
temp	float	$tmp5195	 %read{8871,8871} %write{8868,8868}
temp	float	$tmp5196	 %read{8871,8871} %write{8869,8869}
temp	float	$tmp5197	 %read{8871,8871} %write{8870,8870}
temp	point	$tmp5198	 %read{8876,8876} %write{8875,8875}
temp	int	$tmp5199	 %read{8880,8880} %write{8879,8879}
temp	int	$tmp5200	 %read{8883,8883} %write{8882,8882}
temp	int	$tmp5201	 %read{8886,8886} %write{8885,8885}
temp	float	$tmp5202	 %read{8891,8891} %write{8888,8888}
temp	float	$tmp5203	 %read{8888,8888} %write{8887,8887}
temp	float	$tmp5204	 %read{8891,8891} %write{8890,8890}
temp	float	$tmp5205	 %read{8890,8890} %write{8889,8889}
temp	float	$tmp5206	 %read{8894,8894} %write{8891,8891}
temp	float	$tmp5207	 %read{8894,8894} %write{8893,8893}
temp	float	$tmp5208	 %read{8893,8893} %write{8892,8892}
temp	int	$tmp5209	 %read{8896,8896} %write{8895,8895}
temp	float	$tmp5210	 %read{8904,8904} %write{8898,8898}
temp	float	$tmp5211	 %read{8898,8898} %write{8897,8897}
temp	float	$tmp5212	 %read{8904,8904} %write{8903,8903}
temp	float	$tmp5213	 %read{8903,8903} %write{8900,8900}
temp	float	$tmp5214	 %read{8900,8900} %write{8899,8899}
temp	float	$tmp5215	 %read{8903,8903} %write{8902,8902}
temp	float	$tmp5216	 %read{8902,8902} %write{8901,8901}
temp	int	$tmp5217	 %read{8906,8906} %write{8905,8905}
temp	float	$tmp5218	 %read{8913,8913} %write{8909,8909}
temp	float	$tmp5219	 %read{8909,8909} %write{8908,8908}
temp	float	$tmp5220	 %read{8908,8908} %write{8907,8907}
temp	float	$tmp5221	 %read{8913,8913} %write{8912,8912}
temp	float	$tmp5222	 %read{8912,8912} %write{8911,8911}
temp	float	$tmp5223	 %read{8911,8911} %write{8910,8910}
temp	float	$tmp5224	 %read{8917,8917} %write{8913,8913}
temp	float	$tmp5225	 %read{8917,8917} %write{8916,8916}
temp	float	$tmp5226	 %read{8916,8916} %write{8915,8915}
temp	float	$tmp5227	 %read{8915,8915} %write{8914,8914}
temp	int	$tmp5228	 %read{8919,8919} %write{8918,8918}
temp	float	$tmp5229	 %read{8924,8924} %write{8923,8923}
temp	float	$tmp5230	 %read{8923,8923} %write{8922,8922}
temp	vector	$tmp5231	 %read{8922,8922} %write{8920,8920}
temp	vector	$tmp5232	 %read{8922,8922} %write{8921,8921}
temp	int	$tmp5233	 %read{8926,8926} %write{8925,8925}
temp	float	$tmp5234	 %read{8933,8933} %write{8929,8929}
temp	float	$tmp5235	 %read{8929,8929} %write{8928,8928}
temp	float	$tmp5236	 %read{8928,8928} %write{8927,8927}
temp	float	$tmp5237	 %read{8933,8933} %write{8932,8932}
temp	float	$tmp5238	 %read{8932,8932} %write{8931,8931}
temp	float	$tmp5239	 %read{8931,8931} %write{8930,8930}
temp	float	$tmp5240	 %read{8937,8937} %write{8933,8933}
temp	float	$tmp5241	 %read{8937,8937} %write{8936,8936}
temp	float	$tmp5242	 %read{8936,8936} %write{8935,8935}
temp	float	$tmp5243	 %read{8935,8935} %write{8934,8934}
temp	float	$tmp5244	 %read{8939,8939} %write{8937,8937}
temp	float	$tmp5245	 %read{8939,8939} %write{8938,8938}
temp	point	$tmp5246	 %read{8945,8945} %write{8944,8944}
temp	float	$tmp5247	 %read{8944,8944} %write{8941,8941}
temp	float	$tmp5248	 %read{8944,8944} %write{8942,8942}
temp	float	$tmp5249	 %read{8944,8944} %write{8943,8943}
temp	float	$tmp5250	 %read{8947,8947} %write{8946,8946}
temp	int	$tmp5251	 %read{8948,8948} %write{8947,8947}
temp	float	$tmp5252	 %read{8950,8950} %write{8949,8949}
temp	float	$tmp5253	 %read{8952,8952} %write{8951,8951}
temp	float	$tmp5254	 %read{8954,8954} %write{8953,8953}
temp	point	$tmp5255	 %read{8957,8957} %write{8956,8956}
temp	point	$tmp5256	 %read{8959,8959} %write{8958,8958}
temp	point	$tmp5257	 %read{8961,8961} %write{8960,8960}
temp	float	$tmp5258	 %read{8964,8964} %write{8963,8963}
temp	int	$tmp5259	 %read{8965,8965} %write{8964,8964}
temp	float	$tmp5260	 %read{8967,8967} %write{8966,8966}
temp	float	$tmp5261	 %read{8969,8969} %write{8968,8968}
temp	point	$tmp5262	 %read{8972,8972} %write{8971,8971}
temp	point	$tmp5263	 %read{8974,8974} %write{8973,8973}
temp	float	$tmp5264	 %read{8977,8977} %write{8976,8976}
temp	int	$tmp5265	 %read{8978,8978} %write{8977,8977}
temp	float	$tmp5266	 %read{8980,8980} %write{8979,8979}
temp	point	$tmp5267	 %read{8983,8983} %write{8982,8982}
temp	float	$tmp5268	 %read{8986,8986} %write{8985,8985}
temp	int	$tmp5269	 %read{8987,8987} %write{8986,8986}
temp	int	$tmp5270	 %read{2147483647,-1} %write{8990,8990}
temp	int	$tmp5271	 %read{2147483647,-1} %write{8992,8992}
temp	int	$tmp5272	 %read{2147483647,-1} %write{8994,8994}
temp	float	$tmp5273	 %read{8998,8998} %write{8997,8997}
temp	int	$tmp5274	 %read{9000,9000} %write{8999,8999}
temp	float	$tmp5275	 %read{9170,9170} %write{9169,9169}
temp	float	$tmp5276	 %read{9007,9007} %write{9006,9006}
temp	float	$tmp5277	 %read{9006,9006} %write{9005,9005}
temp	float	$tmp5278	 %read{9010,9010} %write{9009,9009}
temp	float	$tmp5279	 %read{9009,9009} %write{9008,9008}
temp	float	$tmp5280	 %read{9013,9013} %write{9012,9012}
temp	float	$tmp5281	 %read{9012,9012} %write{9011,9011}
temp	int	$tmp5282	 %read{9021,9021} %write{9020,9020}
temp	int	$tmp5283	 %read{9018,9168} %write{9018,9168}
temp	int	$tmp5284	 %read{9025,9025} %write{9024,9024}
temp	int	$tmp5285	 %read{9022,9166} %write{9022,9166}
temp	int	$tmp5286	 %read{9029,9029} %write{9028,9028}
temp	int	$tmp5287	 %read{9026,9164} %write{9026,9164}
temp	float	$tmp5288	 %read{9033,9033} %write{9030,9030}
temp	float	$tmp5289	 %read{9033,9033} %write{9031,9031}
temp	float	$tmp5290	 %read{9033,9033} %write{9032,9032}
temp	color	$tmp5291	 %read{9047,9047} %write{9046,9046}
temp	point	$tmp5292	 %read{9040,9040} %write{9039,9039}
temp	float	$tmp5293	 %read{9039,9039} %write{9036,9036}
temp	float	$tmp5294	 %read{9039,9039} %write{9037,9037}
temp	float	$tmp5295	 %read{9039,9039} %write{9038,9038}
temp	point	$tmp5296	 %read{9045,9045} %write{9044,9044}
temp	float	$tmp5297	 %read{9044,9044} %write{9041,9041}
temp	float	$tmp5298	 %read{9044,9044} %write{9042,9042}
temp	float	$tmp5299	 %read{9044,9044} %write{9043,9043}
temp	point	$tmp5300	 %read{9049,9049} %write{9048,9048}
temp	int	$tmp5301	 %read{9053,9053} %write{9052,9052}
temp	int	$tmp5302	 %read{9056,9056} %write{9055,9055}
temp	int	$tmp5303	 %read{9059,9059} %write{9058,9058}
temp	float	$tmp5304	 %read{9064,9064} %write{9061,9061}
temp	float	$tmp5305	 %read{9061,9061} %write{9060,9060}
temp	float	$tmp5306	 %read{9064,9064} %write{9063,9063}
temp	float	$tmp5307	 %read{9063,9063} %write{9062,9062}
temp	float	$tmp5308	 %read{9067,9067} %write{9064,9064}
temp	float	$tmp5309	 %read{9067,9067} %write{9066,9066}
temp	float	$tmp5310	 %read{9066,9066} %write{9065,9065}
temp	int	$tmp5311	 %read{9069,9069} %write{9068,9068}
temp	float	$tmp5312	 %read{9077,9077} %write{9071,9071}
temp	float	$tmp5313	 %read{9071,9071} %write{9070,9070}
temp	float	$tmp5314	 %read{9077,9077} %write{9076,9076}
temp	float	$tmp5315	 %read{9076,9076} %write{9073,9073}
temp	float	$tmp5316	 %read{9073,9073} %write{9072,9072}
temp	float	$tmp5317	 %read{9076,9076} %write{9075,9075}
temp	float	$tmp5318	 %read{9075,9075} %write{9074,9074}
temp	int	$tmp5319	 %read{9079,9079} %write{9078,9078}
temp	float	$tmp5320	 %read{9086,9086} %write{9082,9082}
temp	float	$tmp5321	 %read{9082,9082} %write{9081,9081}
temp	float	$tmp5322	 %read{9081,9081} %write{9080,9080}
temp	float	$tmp5323	 %read{9086,9086} %write{9085,9085}
temp	float	$tmp5324	 %read{9085,9085} %write{9084,9084}
temp	float	$tmp5325	 %read{9084,9084} %write{9083,9083}
temp	float	$tmp5326	 %read{9090,9090} %write{9086,9086}
temp	float	$tmp5327	 %read{9090,9090} %write{9089,9089}
temp	float	$tmp5328	 %read{9089,9089} %write{9088,9088}
temp	float	$tmp5329	 %read{9088,9088} %write{9087,9087}
temp	int	$tmp5330	 %read{9092,9092} %write{9091,9091}
temp	float	$tmp5331	 %read{9097,9097} %write{9096,9096}
temp	float	$tmp5332	 %read{9096,9096} %write{9095,9095}
temp	vector	$tmp5333	 %read{9095,9095} %write{9093,9093}
temp	vector	$tmp5334	 %read{9095,9095} %write{9094,9094}
temp	int	$tmp5335	 %read{9099,9099} %write{9098,9098}
temp	float	$tmp5336	 %read{9106,9106} %write{9102,9102}
temp	float	$tmp5337	 %read{9102,9102} %write{9101,9101}
temp	float	$tmp5338	 %read{9101,9101} %write{9100,9100}
temp	float	$tmp5339	 %read{9106,9106} %write{9105,9105}
temp	float	$tmp5340	 %read{9105,9105} %write{9104,9104}
temp	float	$tmp5341	 %read{9104,9104} %write{9103,9103}
temp	float	$tmp5342	 %read{9110,9110} %write{9106,9106}
temp	float	$tmp5343	 %read{9110,9110} %write{9109,9109}
temp	float	$tmp5344	 %read{9109,9109} %write{9108,9108}
temp	float	$tmp5345	 %read{9108,9108} %write{9107,9107}
temp	float	$tmp5346	 %read{9112,9112} %write{9110,9110}
temp	float	$tmp5347	 %read{9112,9112} %write{9111,9111}
temp	point	$tmp5348	 %read{9118,9118} %write{9117,9117}
temp	float	$tmp5349	 %read{9117,9117} %write{9114,9114}
temp	float	$tmp5350	 %read{9117,9117} %write{9115,9115}
temp	float	$tmp5351	 %read{9117,9117} %write{9116,9116}
temp	float	$tmp5352	 %read{9120,9120} %write{9119,9119}
temp	int	$tmp5353	 %read{9121,9121} %write{9120,9120}
temp	float	$tmp5354	 %read{9123,9123} %write{9122,9122}
temp	float	$tmp5355	 %read{9125,9125} %write{9124,9124}
temp	float	$tmp5356	 %read{9127,9127} %write{9126,9126}
temp	point	$tmp5357	 %read{9130,9130} %write{9129,9129}
temp	point	$tmp5358	 %read{9132,9132} %write{9131,9131}
temp	point	$tmp5359	 %read{9134,9134} %write{9133,9133}
temp	float	$tmp5360	 %read{9137,9137} %write{9136,9136}
temp	int	$tmp5361	 %read{9138,9138} %write{9137,9137}
temp	float	$tmp5362	 %read{9140,9140} %write{9139,9139}
temp	float	$tmp5363	 %read{9142,9142} %write{9141,9141}
temp	point	$tmp5364	 %read{9145,9145} %write{9144,9144}
temp	point	$tmp5365	 %read{9147,9147} %write{9146,9146}
temp	float	$tmp5366	 %read{9150,9150} %write{9149,9149}
temp	int	$tmp5367	 %read{9151,9151} %write{9150,9150}
temp	float	$tmp5368	 %read{9153,9153} %write{9152,9152}
temp	point	$tmp5369	 %read{9156,9156} %write{9155,9155}
temp	float	$tmp5370	 %read{9159,9159} %write{9158,9158}
temp	int	$tmp5371	 %read{9160,9160} %write{9159,9159}
temp	int	$tmp5372	 %read{2147483647,-1} %write{9163,9163}
temp	int	$tmp5373	 %read{2147483647,-1} %write{9165,9165}
temp	int	$tmp5374	 %read{2147483647,-1} %write{9167,9167}
temp	float	$tmp5375	 %read{9171,9171} %write{9170,9170}
temp	int	$tmp5376	 %read{9173,9173} %write{9172,9172}
temp	float	$tmp5377	 %read{9343,9343} %write{9342,9342}
temp	float	$tmp5378	 %read{9180,9180} %write{9179,9179}
temp	float	$tmp5379	 %read{9179,9179} %write{9178,9178}
temp	float	$tmp5380	 %read{9183,9183} %write{9182,9182}
temp	float	$tmp5381	 %read{9182,9182} %write{9181,9181}
temp	float	$tmp5382	 %read{9186,9186} %write{9185,9185}
temp	float	$tmp5383	 %read{9185,9185} %write{9184,9184}
temp	int	$tmp5384	 %read{9194,9194} %write{9193,9193}
temp	int	$tmp5385	 %read{9191,9341} %write{9191,9341}
temp	int	$tmp5386	 %read{9198,9198} %write{9197,9197}
temp	int	$tmp5387	 %read{9195,9339} %write{9195,9339}
temp	int	$tmp5388	 %read{9202,9202} %write{9201,9201}
temp	int	$tmp5389	 %read{9199,9337} %write{9199,9337}
temp	float	$tmp5390	 %read{9206,9206} %write{9203,9203}
temp	float	$tmp5391	 %read{9206,9206} %write{9204,9204}
temp	float	$tmp5392	 %read{9206,9206} %write{9205,9205}
temp	color	$tmp5393	 %read{9220,9220} %write{9219,9219}
temp	point	$tmp5394	 %read{9213,9213} %write{9212,9212}
temp	float	$tmp5395	 %read{9212,9212} %write{9209,9209}
temp	float	$tmp5396	 %read{9212,9212} %write{9210,9210}
temp	float	$tmp5397	 %read{9212,9212} %write{9211,9211}
temp	point	$tmp5398	 %read{9218,9218} %write{9217,9217}
temp	float	$tmp5399	 %read{9217,9217} %write{9214,9214}
temp	float	$tmp5400	 %read{9217,9217} %write{9215,9215}
temp	float	$tmp5401	 %read{9217,9217} %write{9216,9216}
temp	point	$tmp5402	 %read{9222,9222} %write{9221,9221}
temp	int	$tmp5403	 %read{9226,9226} %write{9225,9225}
temp	int	$tmp5404	 %read{9229,9229} %write{9228,9228}
temp	int	$tmp5405	 %read{9232,9232} %write{9231,9231}
temp	float	$tmp5406	 %read{9237,9237} %write{9234,9234}
temp	float	$tmp5407	 %read{9234,9234} %write{9233,9233}
temp	float	$tmp5408	 %read{9237,9237} %write{9236,9236}
temp	float	$tmp5409	 %read{9236,9236} %write{9235,9235}
temp	float	$tmp5410	 %read{9240,9240} %write{9237,9237}
temp	float	$tmp5411	 %read{9240,9240} %write{9239,9239}
temp	float	$tmp5412	 %read{9239,9239} %write{9238,9238}
temp	int	$tmp5413	 %read{9242,9242} %write{9241,9241}
temp	float	$tmp5414	 %read{9250,9250} %write{9244,9244}
temp	float	$tmp5415	 %read{9244,9244} %write{9243,9243}
temp	float	$tmp5416	 %read{9250,9250} %write{9249,9249}
temp	float	$tmp5417	 %read{9249,9249} %write{9246,9246}
temp	float	$tmp5418	 %read{9246,9246} %write{9245,9245}
temp	float	$tmp5419	 %read{9249,9249} %write{9248,9248}
temp	float	$tmp5420	 %read{9248,9248} %write{9247,9247}
temp	int	$tmp5421	 %read{9252,9252} %write{9251,9251}
temp	float	$tmp5422	 %read{9259,9259} %write{9255,9255}
temp	float	$tmp5423	 %read{9255,9255} %write{9254,9254}
temp	float	$tmp5424	 %read{9254,9254} %write{9253,9253}
temp	float	$tmp5425	 %read{9259,9259} %write{9258,9258}
temp	float	$tmp5426	 %read{9258,9258} %write{9257,9257}
temp	float	$tmp5427	 %read{9257,9257} %write{9256,9256}
temp	float	$tmp5428	 %read{9263,9263} %write{9259,9259}
temp	float	$tmp5429	 %read{9263,9263} %write{9262,9262}
temp	float	$tmp5430	 %read{9262,9262} %write{9261,9261}
temp	float	$tmp5431	 %read{9261,9261} %write{9260,9260}
temp	int	$tmp5432	 %read{9265,9265} %write{9264,9264}
temp	float	$tmp5433	 %read{9270,9270} %write{9269,9269}
temp	float	$tmp5434	 %read{9269,9269} %write{9268,9268}
temp	vector	$tmp5435	 %read{9268,9268} %write{9266,9266}
temp	vector	$tmp5436	 %read{9268,9268} %write{9267,9267}
temp	int	$tmp5437	 %read{9272,9272} %write{9271,9271}
temp	float	$tmp5438	 %read{9279,9279} %write{9275,9275}
temp	float	$tmp5439	 %read{9275,9275} %write{9274,9274}
temp	float	$tmp5440	 %read{9274,9274} %write{9273,9273}
temp	float	$tmp5441	 %read{9279,9279} %write{9278,9278}
temp	float	$tmp5442	 %read{9278,9278} %write{9277,9277}
temp	float	$tmp5443	 %read{9277,9277} %write{9276,9276}
temp	float	$tmp5444	 %read{9283,9283} %write{9279,9279}
temp	float	$tmp5445	 %read{9283,9283} %write{9282,9282}
temp	float	$tmp5446	 %read{9282,9282} %write{9281,9281}
temp	float	$tmp5447	 %read{9281,9281} %write{9280,9280}
temp	float	$tmp5448	 %read{9285,9285} %write{9283,9283}
temp	float	$tmp5449	 %read{9285,9285} %write{9284,9284}
temp	point	$tmp5450	 %read{9291,9291} %write{9290,9290}
temp	float	$tmp5451	 %read{9290,9290} %write{9287,9287}
temp	float	$tmp5452	 %read{9290,9290} %write{9288,9288}
temp	float	$tmp5453	 %read{9290,9290} %write{9289,9289}
temp	float	$tmp5454	 %read{9293,9293} %write{9292,9292}
temp	int	$tmp5455	 %read{9294,9294} %write{9293,9293}
temp	float	$tmp5456	 %read{9296,9296} %write{9295,9295}
temp	float	$tmp5457	 %read{9298,9298} %write{9297,9297}
temp	float	$tmp5458	 %read{9300,9300} %write{9299,9299}
temp	point	$tmp5459	 %read{9303,9303} %write{9302,9302}
temp	point	$tmp5460	 %read{9305,9305} %write{9304,9304}
temp	point	$tmp5461	 %read{9307,9307} %write{9306,9306}
temp	float	$tmp5462	 %read{9310,9310} %write{9309,9309}
temp	int	$tmp5463	 %read{9311,9311} %write{9310,9310}
temp	float	$tmp5464	 %read{9313,9313} %write{9312,9312}
temp	float	$tmp5465	 %read{9315,9315} %write{9314,9314}
temp	point	$tmp5466	 %read{9318,9318} %write{9317,9317}
temp	point	$tmp5467	 %read{9320,9320} %write{9319,9319}
temp	float	$tmp5468	 %read{9323,9323} %write{9322,9322}
temp	int	$tmp5469	 %read{9324,9324} %write{9323,9323}
temp	float	$tmp5470	 %read{9326,9326} %write{9325,9325}
temp	point	$tmp5471	 %read{9329,9329} %write{9328,9328}
temp	float	$tmp5472	 %read{9332,9332} %write{9331,9331}
temp	int	$tmp5473	 %read{9333,9333} %write{9332,9332}
temp	int	$tmp5474	 %read{2147483647,-1} %write{9336,9336}
temp	int	$tmp5475	 %read{2147483647,-1} %write{9338,9338}
temp	int	$tmp5476	 %read{2147483647,-1} %write{9340,9340}
temp	float	$tmp5477	 %read{9344,9344} %write{9343,9343}
temp	int	$tmp5478	 %read{9346,9346} %write{9345,9345}
temp	float	$tmp5479	 %read{9518,9518} %write{9517,9517}
temp	float	$tmp5480	 %read{9353,9353} %write{9352,9352}
temp	float	$tmp5481	 %read{9352,9352} %write{9351,9351}
temp	float	$tmp5482	 %read{9356,9356} %write{9355,9355}
temp	float	$tmp5483	 %read{9355,9355} %write{9354,9354}
temp	float	$tmp5484	 %read{9359,9359} %write{9358,9358}
temp	float	$tmp5485	 %read{9358,9358} %write{9357,9357}
temp	int	$tmp5486	 %read{9367,9367} %write{9366,9366}
temp	int	$tmp5487	 %read{9364,9514} %write{9364,9514}
temp	int	$tmp5488	 %read{9371,9371} %write{9370,9370}
temp	int	$tmp5489	 %read{9368,9512} %write{9368,9512}
temp	int	$tmp5490	 %read{9375,9375} %write{9374,9374}
temp	int	$tmp5491	 %read{9372,9510} %write{9372,9510}
temp	float	$tmp5492	 %read{9379,9379} %write{9376,9376}
temp	float	$tmp5493	 %read{9379,9379} %write{9377,9377}
temp	float	$tmp5494	 %read{9379,9379} %write{9378,9378}
temp	color	$tmp5495	 %read{9393,9393} %write{9392,9392}
temp	point	$tmp5496	 %read{9386,9386} %write{9385,9385}
temp	float	$tmp5497	 %read{9385,9385} %write{9382,9382}
temp	float	$tmp5498	 %read{9385,9385} %write{9383,9383}
temp	float	$tmp5499	 %read{9385,9385} %write{9384,9384}
temp	point	$tmp5500	 %read{9391,9391} %write{9390,9390}
temp	float	$tmp5501	 %read{9390,9390} %write{9387,9387}
temp	float	$tmp5502	 %read{9390,9390} %write{9388,9388}
temp	float	$tmp5503	 %read{9390,9390} %write{9389,9389}
temp	point	$tmp5504	 %read{9395,9395} %write{9394,9394}
temp	int	$tmp5505	 %read{9399,9399} %write{9398,9398}
temp	int	$tmp5506	 %read{9402,9402} %write{9401,9401}
temp	int	$tmp5507	 %read{9405,9405} %write{9404,9404}
temp	float	$tmp5508	 %read{9410,9410} %write{9407,9407}
temp	float	$tmp5509	 %read{9407,9407} %write{9406,9406}
temp	float	$tmp5510	 %read{9410,9410} %write{9409,9409}
temp	float	$tmp5511	 %read{9409,9409} %write{9408,9408}
temp	float	$tmp5512	 %read{9413,9413} %write{9410,9410}
temp	float	$tmp5513	 %read{9413,9413} %write{9412,9412}
temp	float	$tmp5514	 %read{9412,9412} %write{9411,9411}
temp	int	$tmp5515	 %read{9415,9415} %write{9414,9414}
temp	float	$tmp5516	 %read{9423,9423} %write{9417,9417}
temp	float	$tmp5517	 %read{9417,9417} %write{9416,9416}
temp	float	$tmp5518	 %read{9423,9423} %write{9422,9422}
temp	float	$tmp5519	 %read{9422,9422} %write{9419,9419}
temp	float	$tmp5520	 %read{9419,9419} %write{9418,9418}
temp	float	$tmp5521	 %read{9422,9422} %write{9421,9421}
temp	float	$tmp5522	 %read{9421,9421} %write{9420,9420}
temp	int	$tmp5523	 %read{9425,9425} %write{9424,9424}
temp	float	$tmp5524	 %read{9432,9432} %write{9428,9428}
temp	float	$tmp5525	 %read{9428,9428} %write{9427,9427}
temp	float	$tmp5526	 %read{9427,9427} %write{9426,9426}
temp	float	$tmp5527	 %read{9432,9432} %write{9431,9431}
temp	float	$tmp5528	 %read{9431,9431} %write{9430,9430}
temp	float	$tmp5529	 %read{9430,9430} %write{9429,9429}
temp	float	$tmp5530	 %read{9436,9436} %write{9432,9432}
temp	float	$tmp5531	 %read{9436,9436} %write{9435,9435}
temp	float	$tmp5532	 %read{9435,9435} %write{9434,9434}
temp	float	$tmp5533	 %read{9434,9434} %write{9433,9433}
temp	int	$tmp5534	 %read{9438,9438} %write{9437,9437}
temp	float	$tmp5535	 %read{9443,9443} %write{9442,9442}
temp	float	$tmp5536	 %read{9442,9442} %write{9441,9441}
temp	vector	$tmp5537	 %read{9441,9441} %write{9439,9439}
temp	vector	$tmp5538	 %read{9441,9441} %write{9440,9440}
temp	int	$tmp5539	 %read{9445,9445} %write{9444,9444}
temp	float	$tmp5540	 %read{9452,9452} %write{9448,9448}
temp	float	$tmp5541	 %read{9448,9448} %write{9447,9447}
temp	float	$tmp5542	 %read{9447,9447} %write{9446,9446}
temp	float	$tmp5543	 %read{9452,9452} %write{9451,9451}
temp	float	$tmp5544	 %read{9451,9451} %write{9450,9450}
temp	float	$tmp5545	 %read{9450,9450} %write{9449,9449}
temp	float	$tmp5546	 %read{9456,9456} %write{9452,9452}
temp	float	$tmp5547	 %read{9456,9456} %write{9455,9455}
temp	float	$tmp5548	 %read{9455,9455} %write{9454,9454}
temp	float	$tmp5549	 %read{9454,9454} %write{9453,9453}
temp	float	$tmp5550	 %read{9458,9458} %write{9456,9456}
temp	float	$tmp5551	 %read{9458,9458} %write{9457,9457}
temp	point	$tmp5552	 %read{9464,9464} %write{9463,9463}
temp	float	$tmp5553	 %read{9463,9463} %write{9460,9460}
temp	float	$tmp5554	 %read{9463,9463} %write{9461,9461}
temp	float	$tmp5555	 %read{9463,9463} %write{9462,9462}
temp	float	$tmp5556	 %read{9466,9466} %write{9465,9465}
temp	int	$tmp5557	 %read{9467,9467} %write{9466,9466}
temp	float	$tmp5558	 %read{9469,9469} %write{9468,9468}
temp	float	$tmp5559	 %read{9471,9471} %write{9470,9470}
temp	float	$tmp5560	 %read{9473,9473} %write{9472,9472}
temp	point	$tmp5561	 %read{9476,9476} %write{9475,9475}
temp	point	$tmp5562	 %read{9478,9478} %write{9477,9477}
temp	point	$tmp5563	 %read{9480,9480} %write{9479,9479}
temp	float	$tmp5564	 %read{9483,9483} %write{9482,9482}
temp	int	$tmp5565	 %read{9484,9484} %write{9483,9483}
temp	float	$tmp5566	 %read{9486,9486} %write{9485,9485}
temp	float	$tmp5567	 %read{9488,9488} %write{9487,9487}
temp	point	$tmp5568	 %read{9491,9491} %write{9490,9490}
temp	point	$tmp5569	 %read{9493,9493} %write{9492,9492}
temp	float	$tmp5570	 %read{9496,9496} %write{9495,9495}
temp	int	$tmp5571	 %read{9497,9497} %write{9496,9496}
temp	float	$tmp5572	 %read{9499,9499} %write{9498,9498}
temp	point	$tmp5573	 %read{9502,9502} %write{9501,9501}
temp	float	$tmp5574	 %read{9505,9505} %write{9504,9504}
temp	int	$tmp5575	 %read{9506,9506} %write{9505,9505}
temp	int	$tmp5576	 %read{2147483647,-1} %write{9509,9509}
temp	int	$tmp5577	 %read{2147483647,-1} %write{9511,9511}
temp	int	$tmp5578	 %read{2147483647,-1} %write{9513,9513}
temp	float	$tmp5579	 %read{9517,9517} %write{9515,9515}
temp	float	$tmp5580	 %read{9517,9517} %write{9516,9516}
temp	float	$tmp5581	 %read{9519,9519} %write{9518,9518}
temp	int	$tmp5582	 %read{9521,9521} %write{9520,9520}
temp	float	$tmp5583	 %read{9700,9700} %write{9697,9698}
temp	float	$tmp5584	 %read{9694,9694} %write{9693,9693}
temp	float	$tmp5585	 %read{9529,9529} %write{9528,9528}
temp	float	$tmp5586	 %read{9528,9528} %write{9527,9527}
temp	float	$tmp5587	 %read{9532,9532} %write{9531,9531}
temp	float	$tmp5588	 %read{9531,9531} %write{9530,9530}
temp	float	$tmp5589	 %read{9535,9535} %write{9534,9534}
temp	float	$tmp5590	 %read{9534,9534} %write{9533,9533}
temp	int	$tmp5591	 %read{9543,9543} %write{9542,9542}
temp	int	$tmp5592	 %read{9540,9690} %write{9540,9690}
temp	int	$tmp5593	 %read{9547,9547} %write{9546,9546}
temp	int	$tmp5594	 %read{9544,9688} %write{9544,9688}
temp	int	$tmp5595	 %read{9551,9551} %write{9550,9550}
temp	int	$tmp5596	 %read{9548,9686} %write{9548,9686}
temp	float	$tmp5597	 %read{9555,9555} %write{9552,9552}
temp	float	$tmp5598	 %read{9555,9555} %write{9553,9553}
temp	float	$tmp5599	 %read{9555,9555} %write{9554,9554}
temp	color	$tmp5600	 %read{9569,9569} %write{9568,9568}
temp	point	$tmp5601	 %read{9562,9562} %write{9561,9561}
temp	float	$tmp5602	 %read{9561,9561} %write{9558,9558}
temp	float	$tmp5603	 %read{9561,9561} %write{9559,9559}
temp	float	$tmp5604	 %read{9561,9561} %write{9560,9560}
temp	point	$tmp5605	 %read{9567,9567} %write{9566,9566}
temp	float	$tmp5606	 %read{9566,9566} %write{9563,9563}
temp	float	$tmp5607	 %read{9566,9566} %write{9564,9564}
temp	float	$tmp5608	 %read{9566,9566} %write{9565,9565}
temp	point	$tmp5609	 %read{9571,9571} %write{9570,9570}
temp	int	$tmp5610	 %read{9575,9575} %write{9574,9574}
temp	int	$tmp5611	 %read{9578,9578} %write{9577,9577}
temp	int	$tmp5612	 %read{9581,9581} %write{9580,9580}
temp	float	$tmp5613	 %read{9586,9586} %write{9583,9583}
temp	float	$tmp5614	 %read{9583,9583} %write{9582,9582}
temp	float	$tmp5615	 %read{9586,9586} %write{9585,9585}
temp	float	$tmp5616	 %read{9585,9585} %write{9584,9584}
temp	float	$tmp5617	 %read{9589,9589} %write{9586,9586}
temp	float	$tmp5618	 %read{9589,9589} %write{9588,9588}
temp	float	$tmp5619	 %read{9588,9588} %write{9587,9587}
temp	int	$tmp5620	 %read{9591,9591} %write{9590,9590}
temp	float	$tmp5621	 %read{9599,9599} %write{9593,9593}
temp	float	$tmp5622	 %read{9593,9593} %write{9592,9592}
temp	float	$tmp5623	 %read{9599,9599} %write{9598,9598}
temp	float	$tmp5624	 %read{9598,9598} %write{9595,9595}
temp	float	$tmp5625	 %read{9595,9595} %write{9594,9594}
temp	float	$tmp5626	 %read{9598,9598} %write{9597,9597}
temp	float	$tmp5627	 %read{9597,9597} %write{9596,9596}
temp	int	$tmp5628	 %read{9601,9601} %write{9600,9600}
temp	float	$tmp5629	 %read{9608,9608} %write{9604,9604}
temp	float	$tmp5630	 %read{9604,9604} %write{9603,9603}
temp	float	$tmp5631	 %read{9603,9603} %write{9602,9602}
temp	float	$tmp5632	 %read{9608,9608} %write{9607,9607}
temp	float	$tmp5633	 %read{9607,9607} %write{9606,9606}
temp	float	$tmp5634	 %read{9606,9606} %write{9605,9605}
temp	float	$tmp5635	 %read{9612,9612} %write{9608,9608}
temp	float	$tmp5636	 %read{9612,9612} %write{9611,9611}
temp	float	$tmp5637	 %read{9611,9611} %write{9610,9610}
temp	float	$tmp5638	 %read{9610,9610} %write{9609,9609}
temp	int	$tmp5639	 %read{9614,9614} %write{9613,9613}
temp	float	$tmp5640	 %read{9619,9619} %write{9618,9618}
temp	float	$tmp5641	 %read{9618,9618} %write{9617,9617}
temp	vector	$tmp5642	 %read{9617,9617} %write{9615,9615}
temp	vector	$tmp5643	 %read{9617,9617} %write{9616,9616}
temp	int	$tmp5644	 %read{9621,9621} %write{9620,9620}
temp	float	$tmp5645	 %read{9628,9628} %write{9624,9624}
temp	float	$tmp5646	 %read{9624,9624} %write{9623,9623}
temp	float	$tmp5647	 %read{9623,9623} %write{9622,9622}
temp	float	$tmp5648	 %read{9628,9628} %write{9627,9627}
temp	float	$tmp5649	 %read{9627,9627} %write{9626,9626}
temp	float	$tmp5650	 %read{9626,9626} %write{9625,9625}
temp	float	$tmp5651	 %read{9632,9632} %write{9628,9628}
temp	float	$tmp5652	 %read{9632,9632} %write{9631,9631}
temp	float	$tmp5653	 %read{9631,9631} %write{9630,9630}
temp	float	$tmp5654	 %read{9630,9630} %write{9629,9629}
temp	float	$tmp5655	 %read{9634,9634} %write{9632,9632}
temp	float	$tmp5656	 %read{9634,9634} %write{9633,9633}
temp	point	$tmp5657	 %read{9640,9640} %write{9639,9639}
temp	float	$tmp5658	 %read{9639,9639} %write{9636,9636}
temp	float	$tmp5659	 %read{9639,9639} %write{9637,9637}
temp	float	$tmp5660	 %read{9639,9639} %write{9638,9638}
temp	float	$tmp5661	 %read{9642,9642} %write{9641,9641}
temp	int	$tmp5662	 %read{9643,9643} %write{9642,9642}
temp	float	$tmp5663	 %read{9645,9645} %write{9644,9644}
temp	float	$tmp5664	 %read{9647,9647} %write{9646,9646}
temp	float	$tmp5665	 %read{9649,9649} %write{9648,9648}
temp	point	$tmp5666	 %read{9652,9652} %write{9651,9651}
temp	point	$tmp5667	 %read{9654,9654} %write{9653,9653}
temp	point	$tmp5668	 %read{9656,9656} %write{9655,9655}
temp	float	$tmp5669	 %read{9659,9659} %write{9658,9658}
temp	int	$tmp5670	 %read{9660,9660} %write{9659,9659}
temp	float	$tmp5671	 %read{9662,9662} %write{9661,9661}
temp	float	$tmp5672	 %read{9664,9664} %write{9663,9663}
temp	point	$tmp5673	 %read{9667,9667} %write{9666,9666}
temp	point	$tmp5674	 %read{9669,9669} %write{9668,9668}
temp	float	$tmp5675	 %read{9672,9672} %write{9671,9671}
temp	int	$tmp5676	 %read{9673,9673} %write{9672,9672}
temp	float	$tmp5677	 %read{9675,9675} %write{9674,9674}
temp	point	$tmp5678	 %read{9678,9678} %write{9677,9677}
temp	float	$tmp5679	 %read{9681,9681} %write{9680,9680}
temp	int	$tmp5680	 %read{9682,9682} %write{9681,9681}
temp	int	$tmp5681	 %read{2147483647,-1} %write{9685,9685}
temp	int	$tmp5682	 %read{2147483647,-1} %write{9687,9687}
temp	int	$tmp5683	 %read{2147483647,-1} %write{9689,9689}
temp	float	$tmp5684	 %read{9693,9693} %write{9691,9691}
temp	float	$tmp5685	 %read{9693,9693} %write{9692,9692}
temp	int	$tmp5686	 %read{9696,9696} %write{9695,9695}
temp	float	$tmp5687	 %read{9701,9701} %write{9700,9700}
temp	int	$tmp5688	 %read{9703,9703} %write{9702,9702}
temp	float	$tmp5689	 %read{9708,9708} %write{9707,9707}
temp	float	$tmp5690	 %read{9709,9709} %write{9708,9708}
temp	float	$tmp5691	 %read{9711,9711} %write{9710,9710}
temp	int	$tmp5692	 %read{9713,9713} %write{9712,9712}
temp	float	$tmp5693	 %read{9718,9718} %write{9713,9713}
temp	int	$tmp5694	 %read{9715,9715} %write{9714,9714}
temp	int	$tmp5695	 %read{9716,9716} %write{9715,9715}
temp	int	$tmp5696	 %read{9717,9717} %write{9716,9716}
temp	float	$tmp5697	 %read{9718,9718} %write{9717,9717}
temp	float	$tmp5698	 %read{9719,9719} %write{9718,9718}
temp	int	$tmp5699	 %read{9721,9721} %write{9720,9720}
temp	int	$tmp5700	 %read{9722,9722} %write{9721,9721}
temp	float	$tmp5701	 %read{9727,9727} %write{9722,9722}
temp	int	$tmp5702	 %read{9724,9724} %write{9723,9723}
temp	int	$tmp5703	 %read{9725,9725} %write{9724,9724}
temp	int	$tmp5704	 %read{9726,9726} %write{9725,9725}
temp	float	$tmp5705	 %read{9727,9727} %write{9726,9726}
temp	float	$tmp5706	 %read{9728,9728} %write{9727,9727}
temp	float	$tmp5707	 %read{9730,9730} %write{9729,9729}
temp	float	$tmp5708	 %read{9732,9732} %write{9730,9730}
temp	float	$tmp5709	 %read{9732,9732} %write{9731,9731}
temp	int	$tmp5710	 %read{9735,9735} %write{9734,9734}
temp	float	$tmp5711	 %read{9740,9740} %write{9735,9735}
temp	int	$tmp5712	 %read{9737,9737} %write{9736,9736}
temp	int	$tmp5713	 %read{9738,9738} %write{9737,9737}
temp	int	$tmp5714	 %read{9739,9739} %write{9738,9738}
temp	float	$tmp5715	 %read{9740,9740} %write{9739,9739}
temp	float	$tmp5716	 %read{9741,9741} %write{9740,9740}
code Vector
# intern/cycles/kernel/shaders/node_noise_texture.osl:51
# 	point Vector = P,
	assign		Vector P 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{51} %argrw{"wr"}
code ___main___
# intern/cycles/kernel/shaders/node_noise_texture.osl:55
# 	point p = Vector;
	assign		p Vector 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{55} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:57
# 	if (use_mapping)
	if		use_mapping 4 4 	%line{57} %argrw{"r"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:58
# 		p = transform(mapping, p);
	transform	p mapping p 	%line{58} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:60
# 	string Basis = "Perlin";
	assign		Basis $const1 	%line{60} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:61
# 	Fac = noise(p * Scale, Basis, Distortion, Detail, Fac, Color);
	mul		$tmp1 p Scale 	%line{61} %argrw{"wrr"}
	functioncall	$const2 9746 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:27
# 	int hard = 0;
	assign		___631_hard $const3 	%line{27} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:29
# 	if (distortion != 0.0) {
	neq		$tmp2 Distortion $const4 	%line{29} %argrw{"wrr"}
	if		$tmp2 3193 3193 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:30
# 		r[0] = noise_basis(p + point(13.5), basis) * distortion;
	add		$tmp5 $tmp1 $const5 	%line{30} %argrw{"wrr"}
	functioncall	$const6 1069 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 
	assign		___619_result $const4 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 
	eq		$tmp6 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp6 16 16 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 	return da[n2] - da[n1];
	noise		___619_result $tmp5 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# }
	eq		$tmp7 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp7 189 189 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 
	functioncall	$const8 189 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 187 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 187 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 186 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp10 $tmp5 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp9 $tmp10 	%argrw{"wr"}
	assign		___594_xi $tmp9 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp12 $tmp5 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp11 $tmp12 	%argrw{"wr"}
	assign		___594_yi $tmp11 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp14 $tmp5 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp13 $tmp14 	%argrw{"wr"}
	assign		___594_zi $tmp13 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp16 37 39 184 186 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp15 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp16 ___594_xx $tmp15 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp18 41 43 182 184 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp17 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp18 ___594_yy $tmp17 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp20 45 47 180 182 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp19 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp20 ___594_zz $tmp19 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp21 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp22 ___594_yy 	%argrw{"wr"}
	assign		$tmp23 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp21 $tmp22 $tmp23 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 64 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp26 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp27 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp28 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp25 $tmp26 $tmp27 $tmp28 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp25 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp30 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp31 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp32 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp29 $tmp30 $tmp31 $tmp32 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp29 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp24 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp24 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp33 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5 $tmp33 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 131 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp34 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp34 72 72 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp35 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp35 75 75 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp36 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp36 85 85 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp38 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp37 $tmp38 	%argrw{"wr"}
	compref		$tmp40 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp39 $tmp40 	%argrw{"wr"}
	add		$tmp41 $tmp37 $tmp39 	%argrw{"wrr"}
	compref		$tmp43 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp42 $tmp43 	%argrw{"wr"}
	add		___592_result $tmp41 $tmp42 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp44 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp44 95 95 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp46 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp45 $tmp46 	%argrw{"wr"}
	compref		$tmp49 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp48 $tmp49 	%argrw{"wr"}
	compref		$tmp51 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp50 $tmp51 	%argrw{"wr"}
	max		$tmp47 $tmp48 $tmp50 	%argrw{"wrr"}
	max		___592_result $tmp45 $tmp47 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp52 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp52 108 108 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp55 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp54 $tmp55 	%argrw{"wr"}
	sqrt		$tmp53 $tmp54 	%argrw{"wr"}
	compref		$tmp58 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp57 $tmp58 	%argrw{"wr"}
	sqrt		$tmp56 $tmp57 	%argrw{"wr"}
	add		$tmp59 $tmp53 $tmp56 	%argrw{"wrr"}
	compref		$tmp62 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp61 $tmp62 	%argrw{"wr"}
	sqrt		$tmp60 $tmp61 	%argrw{"wr"}
	add		___592_result $tmp59 $tmp60 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp63 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp63 115 115 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp66 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp67 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp65 $tmp66 $tmp67 	%argrw{"wrr"}
	sqrt		$tmp64 $tmp65 	%argrw{"wr"}
	sqrt		___592_result $tmp64 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp68 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp68 130 130 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp71 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp70 $tmp71 	%argrw{"wr"}
	pow		$tmp69 $tmp70 $const4 	%argrw{"wrr"}
	compref		$tmp74 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp73 $tmp74 	%argrw{"wr"}
	pow		$tmp72 $tmp73 $const4 	%argrw{"wrr"}
	add		$tmp75 $tmp69 $tmp72 	%argrw{"wrr"}
	compref		$tmp78 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp77 $tmp78 	%argrw{"wr"}
	pow		$tmp76 $tmp77 $const4 	%argrw{"wrr"}
	add		$tmp79 $tmp75 $tmp76 	%argrw{"wrr"}
	div		$tmp80 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp79 $tmp80 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp82 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp83 ___594_yy 	%argrw{"wr"}
	assign		$tmp84 ___594_zz 	%argrw{"wr"}
	point		$tmp81 $tmp82 $tmp83 $tmp84 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp81 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp85 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp86 ___600_d $tmp85 	%argrw{"wrr"}
	if		$tmp86 153 180 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp87 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp87 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp88 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp88 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp89 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp89 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp90 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp90 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp91 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp91 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp92 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp92 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp93 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp94 ___600_d $tmp93 	%argrw{"wrr"}
	if		$tmp94 166 180 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp95 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp95 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp96 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp96 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp97 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp97 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp98 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp98 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp99 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp100 ___600_d $tmp99 	%argrw{"wrr"}
	if		$tmp100 175 180 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp101 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp101 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp102 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp102 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp103 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp104 ___600_d $tmp103 	%argrw{"wrr"}
	if		$tmp104 180 180 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp105 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp106 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp107 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp8 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp108 $const9 $tmp8 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp108 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp109 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp109 362 362 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 362 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 360 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 360 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 359 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp112 $tmp5 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp111 $tmp112 	%argrw{"wr"}
	assign		___594_xi $tmp111 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp114 $tmp5 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp113 $tmp114 	%argrw{"wr"}
	assign		___594_yi $tmp113 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp116 $tmp5 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp115 $tmp116 	%argrw{"wr"}
	assign		___594_zi $tmp115 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp118 210 212 357 359 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp117 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp118 ___594_xx $tmp117 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp120 214 216 355 357 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp119 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp120 ___594_yy $tmp119 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp122 218 220 353 355 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp121 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp122 ___594_zz $tmp121 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp123 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp124 ___594_yy 	%argrw{"wr"}
	assign		$tmp125 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp123 $tmp124 $tmp125 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 237 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp128 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp129 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp130 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp127 $tmp128 $tmp129 $tmp130 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp127 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp132 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp133 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp134 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp131 $tmp132 $tmp133 $tmp134 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp131 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp126 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp126 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp135 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5 $tmp135 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 304 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp136 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp136 245 245 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp137 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp137 248 248 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp138 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp138 258 258 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp140 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp139 $tmp140 	%argrw{"wr"}
	compref		$tmp142 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp141 $tmp142 	%argrw{"wr"}
	add		$tmp143 $tmp139 $tmp141 	%argrw{"wrr"}
	compref		$tmp145 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp144 $tmp145 	%argrw{"wr"}
	add		___592_result $tmp143 $tmp144 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp146 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp146 268 268 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp148 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp147 $tmp148 	%argrw{"wr"}
	compref		$tmp151 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp150 $tmp151 	%argrw{"wr"}
	compref		$tmp153 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp152 $tmp153 	%argrw{"wr"}
	max		$tmp149 $tmp150 $tmp152 	%argrw{"wrr"}
	max		___592_result $tmp147 $tmp149 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp154 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp154 281 281 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp157 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp156 $tmp157 	%argrw{"wr"}
	sqrt		$tmp155 $tmp156 	%argrw{"wr"}
	compref		$tmp160 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp159 $tmp160 	%argrw{"wr"}
	sqrt		$tmp158 $tmp159 	%argrw{"wr"}
	add		$tmp161 $tmp155 $tmp158 	%argrw{"wrr"}
	compref		$tmp164 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp163 $tmp164 	%argrw{"wr"}
	sqrt		$tmp162 $tmp163 	%argrw{"wr"}
	add		___592_result $tmp161 $tmp162 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp165 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp165 288 288 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp168 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp169 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp167 $tmp168 $tmp169 	%argrw{"wrr"}
	sqrt		$tmp166 $tmp167 	%argrw{"wr"}
	sqrt		___592_result $tmp166 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp170 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp170 303 303 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp173 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp172 $tmp173 	%argrw{"wr"}
	pow		$tmp171 $tmp172 $const4 	%argrw{"wrr"}
	compref		$tmp176 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp175 $tmp176 	%argrw{"wr"}
	pow		$tmp174 $tmp175 $const4 	%argrw{"wrr"}
	add		$tmp177 $tmp171 $tmp174 	%argrw{"wrr"}
	compref		$tmp180 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp179 $tmp180 	%argrw{"wr"}
	pow		$tmp178 $tmp179 $const4 	%argrw{"wrr"}
	add		$tmp181 $tmp177 $tmp178 	%argrw{"wrr"}
	div		$tmp182 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp181 $tmp182 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp184 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp185 ___594_yy 	%argrw{"wr"}
	assign		$tmp186 ___594_zz 	%argrw{"wr"}
	point		$tmp183 $tmp184 $tmp185 $tmp186 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp183 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp187 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp188 ___600_d $tmp187 	%argrw{"wrr"}
	if		$tmp188 326 353 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp189 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp189 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp190 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp190 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp191 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp191 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp192 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp192 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp193 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp193 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp194 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp194 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp195 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp196 ___600_d $tmp195 	%argrw{"wrr"}
	if		$tmp196 339 353 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp197 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp197 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp198 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp198 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp199 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp199 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp200 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp200 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp201 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp202 ___600_d $tmp201 	%argrw{"wrr"}
	if		$tmp202 348 353 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp203 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp203 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp204 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp204 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp205 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp206 ___600_d $tmp205 	%argrw{"wrr"}
	if		$tmp206 353 353 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp207 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp208 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp209 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp110 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp210 $const9 $tmp110 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp210 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp211 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp211 535 535 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 535 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 533 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 533 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 532 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp214 $tmp5 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp213 $tmp214 	%argrw{"wr"}
	assign		___594_xi $tmp213 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp216 $tmp5 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp215 $tmp216 	%argrw{"wr"}
	assign		___594_yi $tmp215 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp218 $tmp5 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp217 $tmp218 	%argrw{"wr"}
	assign		___594_zi $tmp217 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp220 383 385 530 532 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp219 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp220 ___594_xx $tmp219 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp222 387 389 528 530 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp221 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp222 ___594_yy $tmp221 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp224 391 393 526 528 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp223 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp224 ___594_zz $tmp223 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp225 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp226 ___594_yy 	%argrw{"wr"}
	assign		$tmp227 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp225 $tmp226 $tmp227 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 410 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp230 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp231 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp232 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp229 $tmp230 $tmp231 $tmp232 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp229 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp234 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp235 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp236 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp233 $tmp234 $tmp235 $tmp236 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp233 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp228 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp228 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp237 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5 $tmp237 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 477 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp238 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp238 418 418 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp239 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp239 421 421 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp240 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp240 431 431 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp242 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp241 $tmp242 	%argrw{"wr"}
	compref		$tmp244 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp243 $tmp244 	%argrw{"wr"}
	add		$tmp245 $tmp241 $tmp243 	%argrw{"wrr"}
	compref		$tmp247 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp246 $tmp247 	%argrw{"wr"}
	add		___592_result $tmp245 $tmp246 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp248 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp248 441 441 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp250 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp249 $tmp250 	%argrw{"wr"}
	compref		$tmp253 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp252 $tmp253 	%argrw{"wr"}
	compref		$tmp255 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp254 $tmp255 	%argrw{"wr"}
	max		$tmp251 $tmp252 $tmp254 	%argrw{"wrr"}
	max		___592_result $tmp249 $tmp251 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp256 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp256 454 454 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp259 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp258 $tmp259 	%argrw{"wr"}
	sqrt		$tmp257 $tmp258 	%argrw{"wr"}
	compref		$tmp262 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp261 $tmp262 	%argrw{"wr"}
	sqrt		$tmp260 $tmp261 	%argrw{"wr"}
	add		$tmp263 $tmp257 $tmp260 	%argrw{"wrr"}
	compref		$tmp266 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp265 $tmp266 	%argrw{"wr"}
	sqrt		$tmp264 $tmp265 	%argrw{"wr"}
	add		___592_result $tmp263 $tmp264 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp267 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp267 461 461 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp270 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp271 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp269 $tmp270 $tmp271 	%argrw{"wrr"}
	sqrt		$tmp268 $tmp269 	%argrw{"wr"}
	sqrt		___592_result $tmp268 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp272 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp272 476 476 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp275 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp274 $tmp275 	%argrw{"wr"}
	pow		$tmp273 $tmp274 $const4 	%argrw{"wrr"}
	compref		$tmp278 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp277 $tmp278 	%argrw{"wr"}
	pow		$tmp276 $tmp277 $const4 	%argrw{"wrr"}
	add		$tmp279 $tmp273 $tmp276 	%argrw{"wrr"}
	compref		$tmp282 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp281 $tmp282 	%argrw{"wr"}
	pow		$tmp280 $tmp281 $const4 	%argrw{"wrr"}
	add		$tmp283 $tmp279 $tmp280 	%argrw{"wrr"}
	div		$tmp284 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp283 $tmp284 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp286 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp287 ___594_yy 	%argrw{"wr"}
	assign		$tmp288 ___594_zz 	%argrw{"wr"}
	point		$tmp285 $tmp286 $tmp287 $tmp288 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp285 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp289 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp290 ___600_d $tmp289 	%argrw{"wrr"}
	if		$tmp290 499 526 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp291 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp291 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp292 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp292 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp293 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp293 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp294 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp294 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp295 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp295 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp296 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp296 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp297 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp298 ___600_d $tmp297 	%argrw{"wrr"}
	if		$tmp298 512 526 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp299 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp299 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp300 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp300 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp301 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp301 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp302 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp302 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp303 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp304 ___600_d $tmp303 	%argrw{"wrr"}
	if		$tmp304 521 526 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp305 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp305 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp306 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp306 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp307 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp308 ___600_d $tmp307 	%argrw{"wrr"}
	if		$tmp308 526 526 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp309 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp310 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp311 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp212 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp312 $const9 $tmp212 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp312 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp313 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp313 708 708 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 708 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 706 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 706 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 705 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp316 $tmp5 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp315 $tmp316 	%argrw{"wr"}
	assign		___594_xi $tmp315 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp318 $tmp5 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp317 $tmp318 	%argrw{"wr"}
	assign		___594_yi $tmp317 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp320 $tmp5 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp319 $tmp320 	%argrw{"wr"}
	assign		___594_zi $tmp319 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp322 556 558 703 705 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp321 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp322 ___594_xx $tmp321 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp324 560 562 701 703 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp323 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp324 ___594_yy $tmp323 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp326 564 566 699 701 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp325 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp326 ___594_zz $tmp325 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp327 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp328 ___594_yy 	%argrw{"wr"}
	assign		$tmp329 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp327 $tmp328 $tmp329 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 583 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp332 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp333 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp334 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp331 $tmp332 $tmp333 $tmp334 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp331 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp336 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp337 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp338 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp335 $tmp336 $tmp337 $tmp338 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp335 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp330 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp330 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp339 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5 $tmp339 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 650 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp340 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp340 591 591 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp341 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp341 594 594 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp342 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp342 604 604 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp344 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp343 $tmp344 	%argrw{"wr"}
	compref		$tmp346 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp345 $tmp346 	%argrw{"wr"}
	add		$tmp347 $tmp343 $tmp345 	%argrw{"wrr"}
	compref		$tmp349 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp348 $tmp349 	%argrw{"wr"}
	add		___592_result $tmp347 $tmp348 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp350 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp350 614 614 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp352 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp351 $tmp352 	%argrw{"wr"}
	compref		$tmp355 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp354 $tmp355 	%argrw{"wr"}
	compref		$tmp357 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp356 $tmp357 	%argrw{"wr"}
	max		$tmp353 $tmp354 $tmp356 	%argrw{"wrr"}
	max		___592_result $tmp351 $tmp353 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp358 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp358 627 627 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp361 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp360 $tmp361 	%argrw{"wr"}
	sqrt		$tmp359 $tmp360 	%argrw{"wr"}
	compref		$tmp364 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp363 $tmp364 	%argrw{"wr"}
	sqrt		$tmp362 $tmp363 	%argrw{"wr"}
	add		$tmp365 $tmp359 $tmp362 	%argrw{"wrr"}
	compref		$tmp368 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp367 $tmp368 	%argrw{"wr"}
	sqrt		$tmp366 $tmp367 	%argrw{"wr"}
	add		___592_result $tmp365 $tmp366 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp369 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp369 634 634 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp372 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp373 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp371 $tmp372 $tmp373 	%argrw{"wrr"}
	sqrt		$tmp370 $tmp371 	%argrw{"wr"}
	sqrt		___592_result $tmp370 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp374 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp374 649 649 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp377 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp376 $tmp377 	%argrw{"wr"}
	pow		$tmp375 $tmp376 $const4 	%argrw{"wrr"}
	compref		$tmp380 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp379 $tmp380 	%argrw{"wr"}
	pow		$tmp378 $tmp379 $const4 	%argrw{"wrr"}
	add		$tmp381 $tmp375 $tmp378 	%argrw{"wrr"}
	compref		$tmp384 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp383 $tmp384 	%argrw{"wr"}
	pow		$tmp382 $tmp383 $const4 	%argrw{"wrr"}
	add		$tmp385 $tmp381 $tmp382 	%argrw{"wrr"}
	div		$tmp386 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp385 $tmp386 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp388 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp389 ___594_yy 	%argrw{"wr"}
	assign		$tmp390 ___594_zz 	%argrw{"wr"}
	point		$tmp387 $tmp388 $tmp389 $tmp390 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp387 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp391 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp392 ___600_d $tmp391 	%argrw{"wrr"}
	if		$tmp392 672 699 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp393 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp393 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp394 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp394 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp395 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp395 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp396 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp396 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp397 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp397 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp398 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp398 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp399 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp400 ___600_d $tmp399 	%argrw{"wrr"}
	if		$tmp400 685 699 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp401 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp401 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp402 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp402 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp403 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp403 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp404 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp404 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp405 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp406 ___600_d $tmp405 	%argrw{"wrr"}
	if		$tmp406 694 699 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp407 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp407 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp408 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp408 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp409 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp410 ___600_d $tmp409 	%argrw{"wrr"}
	if		$tmp410 699 699 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp411 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp412 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp413 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp314 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp414 $const9 $tmp314 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp414 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp415 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp415 883 883 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 883 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 881 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 881 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 878 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp418 $tmp5 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp417 $tmp418 	%argrw{"wr"}
	assign		___594_xi $tmp417 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp420 $tmp5 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp419 $tmp420 	%argrw{"wr"}
	assign		___594_yi $tmp419 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp422 $tmp5 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp421 $tmp422 	%argrw{"wr"}
	assign		___594_zi $tmp421 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp424 729 731 876 878 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp423 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp424 ___594_xx $tmp423 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp426 733 735 874 876 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp425 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp426 ___594_yy $tmp425 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp428 737 739 872 874 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp427 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp428 ___594_zz $tmp427 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp429 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp430 ___594_yy 	%argrw{"wr"}
	assign		$tmp431 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp429 $tmp430 $tmp431 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 756 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp434 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp435 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp436 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp433 $tmp434 $tmp435 $tmp436 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp433 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp438 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp439 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp440 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp437 $tmp438 $tmp439 $tmp440 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp437 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp432 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp432 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp441 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5 $tmp441 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 823 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp442 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp442 764 764 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp443 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp443 767 767 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp444 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp444 777 777 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp446 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp445 $tmp446 	%argrw{"wr"}
	compref		$tmp448 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp447 $tmp448 	%argrw{"wr"}
	add		$tmp449 $tmp445 $tmp447 	%argrw{"wrr"}
	compref		$tmp451 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp450 $tmp451 	%argrw{"wr"}
	add		___592_result $tmp449 $tmp450 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp452 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp452 787 787 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp454 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp453 $tmp454 	%argrw{"wr"}
	compref		$tmp457 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp456 $tmp457 	%argrw{"wr"}
	compref		$tmp459 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp458 $tmp459 	%argrw{"wr"}
	max		$tmp455 $tmp456 $tmp458 	%argrw{"wrr"}
	max		___592_result $tmp453 $tmp455 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp460 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp460 800 800 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp463 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp462 $tmp463 	%argrw{"wr"}
	sqrt		$tmp461 $tmp462 	%argrw{"wr"}
	compref		$tmp466 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp465 $tmp466 	%argrw{"wr"}
	sqrt		$tmp464 $tmp465 	%argrw{"wr"}
	add		$tmp467 $tmp461 $tmp464 	%argrw{"wrr"}
	compref		$tmp470 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp469 $tmp470 	%argrw{"wr"}
	sqrt		$tmp468 $tmp469 	%argrw{"wr"}
	add		___592_result $tmp467 $tmp468 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp471 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp471 807 807 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp474 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp475 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp473 $tmp474 $tmp475 	%argrw{"wrr"}
	sqrt		$tmp472 $tmp473 	%argrw{"wr"}
	sqrt		___592_result $tmp472 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp476 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp476 822 822 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp479 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp478 $tmp479 	%argrw{"wr"}
	pow		$tmp477 $tmp478 $const4 	%argrw{"wrr"}
	compref		$tmp482 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp481 $tmp482 	%argrw{"wr"}
	pow		$tmp480 $tmp481 $const4 	%argrw{"wrr"}
	add		$tmp483 $tmp477 $tmp480 	%argrw{"wrr"}
	compref		$tmp486 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp485 $tmp486 	%argrw{"wr"}
	pow		$tmp484 $tmp485 $const4 	%argrw{"wrr"}
	add		$tmp487 $tmp483 $tmp484 	%argrw{"wrr"}
	div		$tmp488 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp487 $tmp488 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp490 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp491 ___594_yy 	%argrw{"wr"}
	assign		$tmp492 ___594_zz 	%argrw{"wr"}
	point		$tmp489 $tmp490 $tmp491 $tmp492 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp489 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp493 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp494 ___600_d $tmp493 	%argrw{"wrr"}
	if		$tmp494 845 872 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp495 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp495 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp496 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp496 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp497 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp497 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp498 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp498 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp499 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp499 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp500 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp500 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp501 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp502 ___600_d $tmp501 	%argrw{"wrr"}
	if		$tmp502 858 872 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp503 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp503 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp504 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp504 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp505 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp505 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp506 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp506 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp507 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp508 ___600_d $tmp507 	%argrw{"wrr"}
	if		$tmp508 867 872 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp509 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp509 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp510 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp510 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp511 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp512 ___600_d $tmp511 	%argrw{"wrr"}
	if		$tmp512 872 872 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp513 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp514 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp515 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp516 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp517 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp416 $tmp516 $tmp517 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp518 $const9 $tmp416 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp518 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp519 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp519 1065 1065 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 1065 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 1063 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 1057 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 1057 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 1054 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp523 $tmp5 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp522 $tmp523 	%argrw{"wr"}
	assign		___594_xi $tmp522 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp525 $tmp5 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp524 $tmp525 	%argrw{"wr"}
	assign		___594_yi $tmp524 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp527 $tmp5 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp526 $tmp527 	%argrw{"wr"}
	assign		___594_zi $tmp526 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp529 905 907 1052 1054 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp528 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp529 ___594_xx $tmp528 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp531 909 911 1050 1052 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp530 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp531 ___594_yy $tmp530 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp533 913 915 1048 1050 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp532 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp533 ___594_zz $tmp532 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp534 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp535 ___594_yy 	%argrw{"wr"}
	assign		$tmp536 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp534 $tmp535 $tmp536 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 932 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp539 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp540 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp541 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp538 $tmp539 $tmp540 $tmp541 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp538 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp543 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp544 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp545 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp542 $tmp543 $tmp544 $tmp545 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp542 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp537 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp537 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp546 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5 $tmp546 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 999 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp547 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp547 940 940 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp548 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp548 943 943 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp549 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp549 953 953 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp551 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp550 $tmp551 	%argrw{"wr"}
	compref		$tmp553 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp552 $tmp553 	%argrw{"wr"}
	add		$tmp554 $tmp550 $tmp552 	%argrw{"wrr"}
	compref		$tmp556 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp555 $tmp556 	%argrw{"wr"}
	add		___592_result $tmp554 $tmp555 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp557 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp557 963 963 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp559 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp558 $tmp559 	%argrw{"wr"}
	compref		$tmp562 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp561 $tmp562 	%argrw{"wr"}
	compref		$tmp564 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp563 $tmp564 	%argrw{"wr"}
	max		$tmp560 $tmp561 $tmp563 	%argrw{"wrr"}
	max		___592_result $tmp558 $tmp560 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp565 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp565 976 976 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp568 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp567 $tmp568 	%argrw{"wr"}
	sqrt		$tmp566 $tmp567 	%argrw{"wr"}
	compref		$tmp571 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp570 $tmp571 	%argrw{"wr"}
	sqrt		$tmp569 $tmp570 	%argrw{"wr"}
	add		$tmp572 $tmp566 $tmp569 	%argrw{"wrr"}
	compref		$tmp575 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp574 $tmp575 	%argrw{"wr"}
	sqrt		$tmp573 $tmp574 	%argrw{"wr"}
	add		___592_result $tmp572 $tmp573 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp576 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp576 983 983 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp579 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp580 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp578 $tmp579 $tmp580 	%argrw{"wrr"}
	sqrt		$tmp577 $tmp578 	%argrw{"wr"}
	sqrt		___592_result $tmp577 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp581 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp581 998 998 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp584 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp583 $tmp584 	%argrw{"wr"}
	pow		$tmp582 $tmp583 $const4 	%argrw{"wrr"}
	compref		$tmp587 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp586 $tmp587 	%argrw{"wr"}
	pow		$tmp585 $tmp586 $const4 	%argrw{"wrr"}
	add		$tmp588 $tmp582 $tmp585 	%argrw{"wrr"}
	compref		$tmp591 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp590 $tmp591 	%argrw{"wr"}
	pow		$tmp589 $tmp590 $const4 	%argrw{"wrr"}
	add		$tmp592 $tmp588 $tmp589 	%argrw{"wrr"}
	div		$tmp593 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp592 $tmp593 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp595 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp596 ___594_yy 	%argrw{"wr"}
	assign		$tmp597 ___594_zz 	%argrw{"wr"}
	point		$tmp594 $tmp595 $tmp596 $tmp597 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp594 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp598 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp599 ___600_d $tmp598 	%argrw{"wrr"}
	if		$tmp599 1021 1048 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp600 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp600 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp601 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp601 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp602 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp602 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp603 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp603 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp604 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp604 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp605 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp605 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp606 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp607 ___600_d $tmp606 	%argrw{"wrr"}
	if		$tmp607 1034 1048 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp608 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp608 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp609 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp609 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp610 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp610 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp611 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp611 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp612 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp613 ___600_d $tmp612 	%argrw{"wrr"}
	if		$tmp613 1043 1048 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp614 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp614 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp615 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp615 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp616 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp617 ___600_d $tmp616 	%argrw{"wrr"}
	if		$tmp617 1048 1048 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp618 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp619 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp620 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp621 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp622 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp521 $tmp621 $tmp622 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp521 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp623 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp623 1061 1062 	%argrw{"r"}
	assign		$tmp520 $const26 	%argrw{"wr"}
	assign		$tmp520 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp624 $const9 $tmp520 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp624 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp625 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp625 1068 1068 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp5 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		$tmp3 ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:30
# 		r[0] = noise_basis(p + point(13.5), basis) * distortion;
	mul		$tmp626 $tmp3 Distortion 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{30} %argrw{"wrr"}
	compassign	___631_r $const3 $tmp626 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:31
# 		r[1] = noise_basis(p, basis) * distortion;
	functioncall	$const6 2129 	%line{31} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	point pa[4];
	assign		___619_result $const4 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	voronoi(p, "Distance Squared", 0, da, pa);
	eq		$tmp628 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp628 1076 1076 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 
	noise		___619_result $tmp1 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	return da[n2] - da[n1];
	eq		$tmp629 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp629 1249 1249 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# }
	functioncall	$const8 1249 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 1247 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 1247 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 1246 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp632 $tmp1 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp631 $tmp632 	%argrw{"wr"}
	assign		___594_xi $tmp631 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp634 $tmp1 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp633 $tmp634 	%argrw{"wr"}
	assign		___594_yi $tmp633 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp636 $tmp1 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp635 $tmp636 	%argrw{"wr"}
	assign		___594_zi $tmp635 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp638 1097 1099 1244 1246 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp637 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp638 ___594_xx $tmp637 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp640 1101 1103 1242 1244 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp639 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp640 ___594_yy $tmp639 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp642 1105 1107 1240 1242 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp641 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp642 ___594_zz $tmp641 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp643 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp644 ___594_yy 	%argrw{"wr"}
	assign		$tmp645 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp643 $tmp644 $tmp645 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 1124 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp648 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp649 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp650 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp647 $tmp648 $tmp649 $tmp650 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp647 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp652 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp653 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp654 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp651 $tmp652 $tmp653 $tmp654 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp651 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp646 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp646 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp655 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1 $tmp655 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 1191 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp656 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp656 1132 1132 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp657 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp657 1135 1135 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp658 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp658 1145 1145 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp660 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp659 $tmp660 	%argrw{"wr"}
	compref		$tmp662 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp661 $tmp662 	%argrw{"wr"}
	add		$tmp663 $tmp659 $tmp661 	%argrw{"wrr"}
	compref		$tmp665 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp664 $tmp665 	%argrw{"wr"}
	add		___592_result $tmp663 $tmp664 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp666 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp666 1155 1155 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp668 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp667 $tmp668 	%argrw{"wr"}
	compref		$tmp671 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp670 $tmp671 	%argrw{"wr"}
	compref		$tmp673 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp672 $tmp673 	%argrw{"wr"}
	max		$tmp669 $tmp670 $tmp672 	%argrw{"wrr"}
	max		___592_result $tmp667 $tmp669 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp674 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp674 1168 1168 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp677 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp676 $tmp677 	%argrw{"wr"}
	sqrt		$tmp675 $tmp676 	%argrw{"wr"}
	compref		$tmp680 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp679 $tmp680 	%argrw{"wr"}
	sqrt		$tmp678 $tmp679 	%argrw{"wr"}
	add		$tmp681 $tmp675 $tmp678 	%argrw{"wrr"}
	compref		$tmp684 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp683 $tmp684 	%argrw{"wr"}
	sqrt		$tmp682 $tmp683 	%argrw{"wr"}
	add		___592_result $tmp681 $tmp682 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp685 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp685 1175 1175 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp688 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp689 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp687 $tmp688 $tmp689 	%argrw{"wrr"}
	sqrt		$tmp686 $tmp687 	%argrw{"wr"}
	sqrt		___592_result $tmp686 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp690 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp690 1190 1190 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp693 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp692 $tmp693 	%argrw{"wr"}
	pow		$tmp691 $tmp692 $const4 	%argrw{"wrr"}
	compref		$tmp696 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp695 $tmp696 	%argrw{"wr"}
	pow		$tmp694 $tmp695 $const4 	%argrw{"wrr"}
	add		$tmp697 $tmp691 $tmp694 	%argrw{"wrr"}
	compref		$tmp700 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp699 $tmp700 	%argrw{"wr"}
	pow		$tmp698 $tmp699 $const4 	%argrw{"wrr"}
	add		$tmp701 $tmp697 $tmp698 	%argrw{"wrr"}
	div		$tmp702 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp701 $tmp702 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp704 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp705 ___594_yy 	%argrw{"wr"}
	assign		$tmp706 ___594_zz 	%argrw{"wr"}
	point		$tmp703 $tmp704 $tmp705 $tmp706 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp703 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp707 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp708 ___600_d $tmp707 	%argrw{"wrr"}
	if		$tmp708 1213 1240 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp709 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp709 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp710 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp710 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp711 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp711 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp712 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp712 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp713 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp713 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp714 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp714 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp715 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp716 ___600_d $tmp715 	%argrw{"wrr"}
	if		$tmp716 1226 1240 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp717 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp717 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp718 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp718 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp719 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp719 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp720 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp720 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp721 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp722 ___600_d $tmp721 	%argrw{"wrr"}
	if		$tmp722 1235 1240 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp723 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp723 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp724 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp724 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp725 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp726 ___600_d $tmp725 	%argrw{"wrr"}
	if		$tmp726 1240 1240 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp727 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp728 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp729 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp630 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp730 $const9 $tmp630 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp730 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp731 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp731 1422 1422 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 1422 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 1420 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 1420 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 1419 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp734 $tmp1 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp733 $tmp734 	%argrw{"wr"}
	assign		___594_xi $tmp733 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp736 $tmp1 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp735 $tmp736 	%argrw{"wr"}
	assign		___594_yi $tmp735 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp738 $tmp1 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp737 $tmp738 	%argrw{"wr"}
	assign		___594_zi $tmp737 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp740 1270 1272 1417 1419 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp739 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp740 ___594_xx $tmp739 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp742 1274 1276 1415 1417 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp741 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp742 ___594_yy $tmp741 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp744 1278 1280 1413 1415 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp743 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp744 ___594_zz $tmp743 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp745 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp746 ___594_yy 	%argrw{"wr"}
	assign		$tmp747 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp745 $tmp746 $tmp747 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 1297 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp750 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp751 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp752 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp749 $tmp750 $tmp751 $tmp752 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp749 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp754 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp755 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp756 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp753 $tmp754 $tmp755 $tmp756 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp753 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp748 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp748 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp757 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1 $tmp757 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 1364 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp758 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp758 1305 1305 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp759 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp759 1308 1308 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp760 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp760 1318 1318 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp762 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp761 $tmp762 	%argrw{"wr"}
	compref		$tmp764 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp763 $tmp764 	%argrw{"wr"}
	add		$tmp765 $tmp761 $tmp763 	%argrw{"wrr"}
	compref		$tmp767 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp766 $tmp767 	%argrw{"wr"}
	add		___592_result $tmp765 $tmp766 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp768 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp768 1328 1328 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp770 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp769 $tmp770 	%argrw{"wr"}
	compref		$tmp773 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp772 $tmp773 	%argrw{"wr"}
	compref		$tmp775 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp774 $tmp775 	%argrw{"wr"}
	max		$tmp771 $tmp772 $tmp774 	%argrw{"wrr"}
	max		___592_result $tmp769 $tmp771 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp776 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp776 1341 1341 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp779 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp778 $tmp779 	%argrw{"wr"}
	sqrt		$tmp777 $tmp778 	%argrw{"wr"}
	compref		$tmp782 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp781 $tmp782 	%argrw{"wr"}
	sqrt		$tmp780 $tmp781 	%argrw{"wr"}
	add		$tmp783 $tmp777 $tmp780 	%argrw{"wrr"}
	compref		$tmp786 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp785 $tmp786 	%argrw{"wr"}
	sqrt		$tmp784 $tmp785 	%argrw{"wr"}
	add		___592_result $tmp783 $tmp784 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp787 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp787 1348 1348 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp790 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp791 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp789 $tmp790 $tmp791 	%argrw{"wrr"}
	sqrt		$tmp788 $tmp789 	%argrw{"wr"}
	sqrt		___592_result $tmp788 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp792 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp792 1363 1363 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp795 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp794 $tmp795 	%argrw{"wr"}
	pow		$tmp793 $tmp794 $const4 	%argrw{"wrr"}
	compref		$tmp798 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp797 $tmp798 	%argrw{"wr"}
	pow		$tmp796 $tmp797 $const4 	%argrw{"wrr"}
	add		$tmp799 $tmp793 $tmp796 	%argrw{"wrr"}
	compref		$tmp802 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp801 $tmp802 	%argrw{"wr"}
	pow		$tmp800 $tmp801 $const4 	%argrw{"wrr"}
	add		$tmp803 $tmp799 $tmp800 	%argrw{"wrr"}
	div		$tmp804 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp803 $tmp804 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp806 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp807 ___594_yy 	%argrw{"wr"}
	assign		$tmp808 ___594_zz 	%argrw{"wr"}
	point		$tmp805 $tmp806 $tmp807 $tmp808 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp805 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp809 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp810 ___600_d $tmp809 	%argrw{"wrr"}
	if		$tmp810 1386 1413 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp811 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp811 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp812 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp812 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp813 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp813 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp814 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp814 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp815 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp815 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp816 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp816 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp817 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp818 ___600_d $tmp817 	%argrw{"wrr"}
	if		$tmp818 1399 1413 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp819 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp819 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp820 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp820 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp821 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp821 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp822 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp822 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp823 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp824 ___600_d $tmp823 	%argrw{"wrr"}
	if		$tmp824 1408 1413 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp825 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp825 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp826 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp826 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp827 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp828 ___600_d $tmp827 	%argrw{"wrr"}
	if		$tmp828 1413 1413 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp829 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp830 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp831 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp732 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp832 $const9 $tmp732 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp832 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp833 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp833 1595 1595 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 1595 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 1593 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 1593 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 1592 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp836 $tmp1 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp835 $tmp836 	%argrw{"wr"}
	assign		___594_xi $tmp835 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp838 $tmp1 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp837 $tmp838 	%argrw{"wr"}
	assign		___594_yi $tmp837 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp840 $tmp1 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp839 $tmp840 	%argrw{"wr"}
	assign		___594_zi $tmp839 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp842 1443 1445 1590 1592 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp841 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp842 ___594_xx $tmp841 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp844 1447 1449 1588 1590 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp843 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp844 ___594_yy $tmp843 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp846 1451 1453 1586 1588 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp845 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp846 ___594_zz $tmp845 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp847 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp848 ___594_yy 	%argrw{"wr"}
	assign		$tmp849 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp847 $tmp848 $tmp849 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 1470 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp852 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp853 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp854 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp851 $tmp852 $tmp853 $tmp854 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp851 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp856 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp857 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp858 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp855 $tmp856 $tmp857 $tmp858 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp855 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp850 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp850 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp859 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1 $tmp859 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 1537 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp860 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp860 1478 1478 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp861 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp861 1481 1481 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp862 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp862 1491 1491 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp864 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp863 $tmp864 	%argrw{"wr"}
	compref		$tmp866 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp865 $tmp866 	%argrw{"wr"}
	add		$tmp867 $tmp863 $tmp865 	%argrw{"wrr"}
	compref		$tmp869 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp868 $tmp869 	%argrw{"wr"}
	add		___592_result $tmp867 $tmp868 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp870 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp870 1501 1501 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp872 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp871 $tmp872 	%argrw{"wr"}
	compref		$tmp875 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp874 $tmp875 	%argrw{"wr"}
	compref		$tmp877 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp876 $tmp877 	%argrw{"wr"}
	max		$tmp873 $tmp874 $tmp876 	%argrw{"wrr"}
	max		___592_result $tmp871 $tmp873 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp878 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp878 1514 1514 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp881 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp880 $tmp881 	%argrw{"wr"}
	sqrt		$tmp879 $tmp880 	%argrw{"wr"}
	compref		$tmp884 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp883 $tmp884 	%argrw{"wr"}
	sqrt		$tmp882 $tmp883 	%argrw{"wr"}
	add		$tmp885 $tmp879 $tmp882 	%argrw{"wrr"}
	compref		$tmp888 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp887 $tmp888 	%argrw{"wr"}
	sqrt		$tmp886 $tmp887 	%argrw{"wr"}
	add		___592_result $tmp885 $tmp886 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp889 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp889 1521 1521 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp892 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp893 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp891 $tmp892 $tmp893 	%argrw{"wrr"}
	sqrt		$tmp890 $tmp891 	%argrw{"wr"}
	sqrt		___592_result $tmp890 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp894 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp894 1536 1536 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp897 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp896 $tmp897 	%argrw{"wr"}
	pow		$tmp895 $tmp896 $const4 	%argrw{"wrr"}
	compref		$tmp900 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp899 $tmp900 	%argrw{"wr"}
	pow		$tmp898 $tmp899 $const4 	%argrw{"wrr"}
	add		$tmp901 $tmp895 $tmp898 	%argrw{"wrr"}
	compref		$tmp904 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp903 $tmp904 	%argrw{"wr"}
	pow		$tmp902 $tmp903 $const4 	%argrw{"wrr"}
	add		$tmp905 $tmp901 $tmp902 	%argrw{"wrr"}
	div		$tmp906 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp905 $tmp906 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp908 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp909 ___594_yy 	%argrw{"wr"}
	assign		$tmp910 ___594_zz 	%argrw{"wr"}
	point		$tmp907 $tmp908 $tmp909 $tmp910 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp907 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp911 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp912 ___600_d $tmp911 	%argrw{"wrr"}
	if		$tmp912 1559 1586 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp913 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp913 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp914 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp914 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp915 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp915 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp916 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp916 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp917 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp917 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp918 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp918 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp919 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp920 ___600_d $tmp919 	%argrw{"wrr"}
	if		$tmp920 1572 1586 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp921 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp921 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp922 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp922 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp923 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp923 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp924 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp924 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp925 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp926 ___600_d $tmp925 	%argrw{"wrr"}
	if		$tmp926 1581 1586 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp927 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp927 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp928 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp928 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp929 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp930 ___600_d $tmp929 	%argrw{"wrr"}
	if		$tmp930 1586 1586 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp931 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp932 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp933 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp834 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp934 $const9 $tmp834 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp934 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp935 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp935 1768 1768 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 1768 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 1766 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 1766 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 1765 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp938 $tmp1 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp937 $tmp938 	%argrw{"wr"}
	assign		___594_xi $tmp937 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp940 $tmp1 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp939 $tmp940 	%argrw{"wr"}
	assign		___594_yi $tmp939 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp942 $tmp1 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp941 $tmp942 	%argrw{"wr"}
	assign		___594_zi $tmp941 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp944 1616 1618 1763 1765 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp943 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp944 ___594_xx $tmp943 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp946 1620 1622 1761 1763 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp945 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp946 ___594_yy $tmp945 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp948 1624 1626 1759 1761 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp947 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp948 ___594_zz $tmp947 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp949 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp950 ___594_yy 	%argrw{"wr"}
	assign		$tmp951 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp949 $tmp950 $tmp951 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 1643 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp954 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp955 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp956 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp953 $tmp954 $tmp955 $tmp956 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp953 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp958 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp959 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp960 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp957 $tmp958 $tmp959 $tmp960 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp957 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp952 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp952 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp961 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1 $tmp961 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 1710 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp962 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp962 1651 1651 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp963 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp963 1654 1654 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp964 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp964 1664 1664 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp966 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp965 $tmp966 	%argrw{"wr"}
	compref		$tmp968 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp967 $tmp968 	%argrw{"wr"}
	add		$tmp969 $tmp965 $tmp967 	%argrw{"wrr"}
	compref		$tmp971 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp970 $tmp971 	%argrw{"wr"}
	add		___592_result $tmp969 $tmp970 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp972 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp972 1674 1674 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp974 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp973 $tmp974 	%argrw{"wr"}
	compref		$tmp977 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp976 $tmp977 	%argrw{"wr"}
	compref		$tmp979 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp978 $tmp979 	%argrw{"wr"}
	max		$tmp975 $tmp976 $tmp978 	%argrw{"wrr"}
	max		___592_result $tmp973 $tmp975 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp980 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp980 1687 1687 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp983 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp982 $tmp983 	%argrw{"wr"}
	sqrt		$tmp981 $tmp982 	%argrw{"wr"}
	compref		$tmp986 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp985 $tmp986 	%argrw{"wr"}
	sqrt		$tmp984 $tmp985 	%argrw{"wr"}
	add		$tmp987 $tmp981 $tmp984 	%argrw{"wrr"}
	compref		$tmp990 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp989 $tmp990 	%argrw{"wr"}
	sqrt		$tmp988 $tmp989 	%argrw{"wr"}
	add		___592_result $tmp987 $tmp988 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp991 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp991 1694 1694 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp994 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp995 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp993 $tmp994 $tmp995 	%argrw{"wrr"}
	sqrt		$tmp992 $tmp993 	%argrw{"wr"}
	sqrt		___592_result $tmp992 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp996 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp996 1709 1709 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp999 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp998 $tmp999 	%argrw{"wr"}
	pow		$tmp997 $tmp998 $const4 	%argrw{"wrr"}
	compref		$tmp1002 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1001 $tmp1002 	%argrw{"wr"}
	pow		$tmp1000 $tmp1001 $const4 	%argrw{"wrr"}
	add		$tmp1003 $tmp997 $tmp1000 	%argrw{"wrr"}
	compref		$tmp1006 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1005 $tmp1006 	%argrw{"wr"}
	pow		$tmp1004 $tmp1005 $const4 	%argrw{"wrr"}
	add		$tmp1007 $tmp1003 $tmp1004 	%argrw{"wrr"}
	div		$tmp1008 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1007 $tmp1008 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1010 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1011 ___594_yy 	%argrw{"wr"}
	assign		$tmp1012 ___594_zz 	%argrw{"wr"}
	point		$tmp1009 $tmp1010 $tmp1011 $tmp1012 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1009 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1013 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1014 ___600_d $tmp1013 	%argrw{"wrr"}
	if		$tmp1014 1732 1759 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1015 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1015 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1016 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1016 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1017 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp1017 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1018 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1018 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1019 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1019 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1020 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp1020 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1021 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1022 ___600_d $tmp1021 	%argrw{"wrr"}
	if		$tmp1022 1745 1759 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1023 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1023 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1024 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1024 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1025 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1025 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1026 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1026 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1027 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1028 ___600_d $tmp1027 	%argrw{"wrr"}
	if		$tmp1028 1754 1759 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1029 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1029 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1030 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1030 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1031 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1032 ___600_d $tmp1031 	%argrw{"wrr"}
	if		$tmp1032 1759 1759 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1033 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1034 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1035 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp936 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp1036 $const9 $tmp936 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp1036 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp1037 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp1037 1943 1943 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 1943 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 1941 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 1941 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 1938 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1040 $tmp1 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1039 $tmp1040 	%argrw{"wr"}
	assign		___594_xi $tmp1039 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1042 $tmp1 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1041 $tmp1042 	%argrw{"wr"}
	assign		___594_yi $tmp1041 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1044 $tmp1 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1043 $tmp1044 	%argrw{"wr"}
	assign		___594_zi $tmp1043 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1046 1789 1791 1936 1938 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1045 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1046 ___594_xx $tmp1045 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1048 1793 1795 1934 1936 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1047 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1048 ___594_yy $tmp1047 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1050 1797 1799 1932 1934 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1049 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1050 ___594_zz $tmp1049 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1051 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1052 ___594_yy 	%argrw{"wr"}
	assign		$tmp1053 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1051 $tmp1052 $tmp1053 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 1816 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1056 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1057 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1058 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1055 $tmp1056 $tmp1057 $tmp1058 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1055 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1060 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1061 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1062 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1059 $tmp1060 $tmp1061 $tmp1062 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1059 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1054 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1054 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1063 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1 $tmp1063 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 1883 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1064 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1064 1824 1824 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1065 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1065 1827 1827 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1066 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1066 1837 1837 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1068 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1067 $tmp1068 	%argrw{"wr"}
	compref		$tmp1070 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1069 $tmp1070 	%argrw{"wr"}
	add		$tmp1071 $tmp1067 $tmp1069 	%argrw{"wrr"}
	compref		$tmp1073 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1072 $tmp1073 	%argrw{"wr"}
	add		___592_result $tmp1071 $tmp1072 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1074 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1074 1847 1847 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1076 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1075 $tmp1076 	%argrw{"wr"}
	compref		$tmp1079 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1078 $tmp1079 	%argrw{"wr"}
	compref		$tmp1081 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1080 $tmp1081 	%argrw{"wr"}
	max		$tmp1077 $tmp1078 $tmp1080 	%argrw{"wrr"}
	max		___592_result $tmp1075 $tmp1077 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1082 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1082 1860 1860 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1085 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1084 $tmp1085 	%argrw{"wr"}
	sqrt		$tmp1083 $tmp1084 	%argrw{"wr"}
	compref		$tmp1088 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1087 $tmp1088 	%argrw{"wr"}
	sqrt		$tmp1086 $tmp1087 	%argrw{"wr"}
	add		$tmp1089 $tmp1083 $tmp1086 	%argrw{"wrr"}
	compref		$tmp1092 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1091 $tmp1092 	%argrw{"wr"}
	sqrt		$tmp1090 $tmp1091 	%argrw{"wr"}
	add		___592_result $tmp1089 $tmp1090 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1093 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1093 1867 1867 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1096 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1097 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1095 $tmp1096 $tmp1097 	%argrw{"wrr"}
	sqrt		$tmp1094 $tmp1095 	%argrw{"wr"}
	sqrt		___592_result $tmp1094 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1098 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1098 1882 1882 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1101 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1100 $tmp1101 	%argrw{"wr"}
	pow		$tmp1099 $tmp1100 $const4 	%argrw{"wrr"}
	compref		$tmp1104 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1103 $tmp1104 	%argrw{"wr"}
	pow		$tmp1102 $tmp1103 $const4 	%argrw{"wrr"}
	add		$tmp1105 $tmp1099 $tmp1102 	%argrw{"wrr"}
	compref		$tmp1108 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1107 $tmp1108 	%argrw{"wr"}
	pow		$tmp1106 $tmp1107 $const4 	%argrw{"wrr"}
	add		$tmp1109 $tmp1105 $tmp1106 	%argrw{"wrr"}
	div		$tmp1110 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1109 $tmp1110 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1112 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1113 ___594_yy 	%argrw{"wr"}
	assign		$tmp1114 ___594_zz 	%argrw{"wr"}
	point		$tmp1111 $tmp1112 $tmp1113 $tmp1114 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1111 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1115 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1116 ___600_d $tmp1115 	%argrw{"wrr"}
	if		$tmp1116 1905 1932 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1117 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1117 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1118 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1118 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1119 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp1119 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1120 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1120 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1121 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1121 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1122 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp1122 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1123 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1124 ___600_d $tmp1123 	%argrw{"wrr"}
	if		$tmp1124 1918 1932 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1125 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1125 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1126 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1126 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1127 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1127 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1128 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1128 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1129 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1130 ___600_d $tmp1129 	%argrw{"wrr"}
	if		$tmp1130 1927 1932 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1131 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1131 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1132 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1132 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1133 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1134 ___600_d $tmp1133 	%argrw{"wrr"}
	if		$tmp1134 1932 1932 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1135 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1136 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1137 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp1138 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp1139 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp1038 $tmp1138 $tmp1139 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp1140 $const9 $tmp1038 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp1140 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp1141 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp1141 2125 2125 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 2125 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 2123 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 2117 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 2117 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 2114 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1145 $tmp1 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1144 $tmp1145 	%argrw{"wr"}
	assign		___594_xi $tmp1144 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1147 $tmp1 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1146 $tmp1147 	%argrw{"wr"}
	assign		___594_yi $tmp1146 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1149 $tmp1 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1148 $tmp1149 	%argrw{"wr"}
	assign		___594_zi $tmp1148 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1151 1965 1967 2112 2114 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1150 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1151 ___594_xx $tmp1150 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1153 1969 1971 2110 2112 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1152 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1153 ___594_yy $tmp1152 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1155 1973 1975 2108 2110 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1154 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1155 ___594_zz $tmp1154 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1156 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1157 ___594_yy 	%argrw{"wr"}
	assign		$tmp1158 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1156 $tmp1157 $tmp1158 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 1992 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1161 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1162 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1163 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1160 $tmp1161 $tmp1162 $tmp1163 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1160 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1165 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1166 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1167 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1164 $tmp1165 $tmp1166 $tmp1167 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1164 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1159 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1159 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1168 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1 $tmp1168 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 2059 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1169 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1169 2000 2000 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1170 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1170 2003 2003 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1171 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1171 2013 2013 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1173 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1172 $tmp1173 	%argrw{"wr"}
	compref		$tmp1175 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1174 $tmp1175 	%argrw{"wr"}
	add		$tmp1176 $tmp1172 $tmp1174 	%argrw{"wrr"}
	compref		$tmp1178 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1177 $tmp1178 	%argrw{"wr"}
	add		___592_result $tmp1176 $tmp1177 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1179 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1179 2023 2023 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1181 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1180 $tmp1181 	%argrw{"wr"}
	compref		$tmp1184 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1183 $tmp1184 	%argrw{"wr"}
	compref		$tmp1186 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1185 $tmp1186 	%argrw{"wr"}
	max		$tmp1182 $tmp1183 $tmp1185 	%argrw{"wrr"}
	max		___592_result $tmp1180 $tmp1182 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1187 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1187 2036 2036 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1190 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1189 $tmp1190 	%argrw{"wr"}
	sqrt		$tmp1188 $tmp1189 	%argrw{"wr"}
	compref		$tmp1193 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1192 $tmp1193 	%argrw{"wr"}
	sqrt		$tmp1191 $tmp1192 	%argrw{"wr"}
	add		$tmp1194 $tmp1188 $tmp1191 	%argrw{"wrr"}
	compref		$tmp1197 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1196 $tmp1197 	%argrw{"wr"}
	sqrt		$tmp1195 $tmp1196 	%argrw{"wr"}
	add		___592_result $tmp1194 $tmp1195 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1198 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1198 2043 2043 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1201 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1202 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1200 $tmp1201 $tmp1202 	%argrw{"wrr"}
	sqrt		$tmp1199 $tmp1200 	%argrw{"wr"}
	sqrt		___592_result $tmp1199 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1203 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1203 2058 2058 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1206 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1205 $tmp1206 	%argrw{"wr"}
	pow		$tmp1204 $tmp1205 $const4 	%argrw{"wrr"}
	compref		$tmp1209 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1208 $tmp1209 	%argrw{"wr"}
	pow		$tmp1207 $tmp1208 $const4 	%argrw{"wrr"}
	add		$tmp1210 $tmp1204 $tmp1207 	%argrw{"wrr"}
	compref		$tmp1213 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1212 $tmp1213 	%argrw{"wr"}
	pow		$tmp1211 $tmp1212 $const4 	%argrw{"wrr"}
	add		$tmp1214 $tmp1210 $tmp1211 	%argrw{"wrr"}
	div		$tmp1215 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1214 $tmp1215 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1217 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1218 ___594_yy 	%argrw{"wr"}
	assign		$tmp1219 ___594_zz 	%argrw{"wr"}
	point		$tmp1216 $tmp1217 $tmp1218 $tmp1219 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1216 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1220 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1221 ___600_d $tmp1220 	%argrw{"wrr"}
	if		$tmp1221 2081 2108 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1222 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1222 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1223 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1223 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1224 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp1224 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1225 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1225 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1226 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1226 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1227 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp1227 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1228 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1229 ___600_d $tmp1228 	%argrw{"wrr"}
	if		$tmp1229 2094 2108 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1230 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1230 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1231 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1231 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1232 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1232 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1233 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1233 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1234 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1235 ___600_d $tmp1234 	%argrw{"wrr"}
	if		$tmp1235 2103 2108 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1236 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1236 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1237 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1237 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1238 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1239 ___600_d $tmp1238 	%argrw{"wrr"}
	if		$tmp1239 2108 2108 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1240 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1241 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1242 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp1243 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp1244 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp1143 $tmp1243 $tmp1244 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp1143 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp1245 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp1245 2121 2122 	%argrw{"r"}
	assign		$tmp1142 $const26 	%argrw{"wr"}
	assign		$tmp1142 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp1246 $const9 $tmp1142 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp1246 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp1247 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp1247 2128 2128 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp1 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		$tmp627 ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:31
# 		r[1] = noise_basis(p, basis) * distortion;
	mul		$tmp1248 $tmp627 Distortion 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{31} %argrw{"wrr"}
	compassign	___631_r $const14 $tmp1248 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:32
# 		r[2] = noise_basis(p - point(13.5), basis) * distortion;
	sub		$tmp1251 $tmp1 $const5 	%line{32} %argrw{"wrr"}
	functioncall	$const6 3190 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float da[4];
	assign		___619_result $const4 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 
	eq		$tmp1252 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp1252 2137 2137 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 	voronoi(p, "Distance Squared", 0, da, pa);
	noise		___619_result $tmp1251 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 
	eq		$tmp1253 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp1253 2310 2310 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 	return da[n2] - da[n1];
	functioncall	$const8 2310 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 2308 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 2308 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 2307 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1256 $tmp1251 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1255 $tmp1256 	%argrw{"wr"}
	assign		___594_xi $tmp1255 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1258 $tmp1251 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1257 $tmp1258 	%argrw{"wr"}
	assign		___594_yi $tmp1257 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1260 $tmp1251 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1259 $tmp1260 	%argrw{"wr"}
	assign		___594_zi $tmp1259 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1262 2158 2160 2305 2307 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1261 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1262 ___594_xx $tmp1261 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1264 2162 2164 2303 2305 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1263 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1264 ___594_yy $tmp1263 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1266 2166 2168 2301 2303 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1265 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1266 ___594_zz $tmp1265 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1267 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1268 ___594_yy 	%argrw{"wr"}
	assign		$tmp1269 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1267 $tmp1268 $tmp1269 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 2185 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1272 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1273 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1274 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1271 $tmp1272 $tmp1273 $tmp1274 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1271 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1276 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1277 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1278 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1275 $tmp1276 $tmp1277 $tmp1278 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1275 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1270 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1270 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1279 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1251 $tmp1279 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 2252 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1280 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1280 2193 2193 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1281 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1281 2196 2196 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1282 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1282 2206 2206 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1284 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1283 $tmp1284 	%argrw{"wr"}
	compref		$tmp1286 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1285 $tmp1286 	%argrw{"wr"}
	add		$tmp1287 $tmp1283 $tmp1285 	%argrw{"wrr"}
	compref		$tmp1289 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1288 $tmp1289 	%argrw{"wr"}
	add		___592_result $tmp1287 $tmp1288 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1290 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1290 2216 2216 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1292 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1291 $tmp1292 	%argrw{"wr"}
	compref		$tmp1295 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1294 $tmp1295 	%argrw{"wr"}
	compref		$tmp1297 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1296 $tmp1297 	%argrw{"wr"}
	max		$tmp1293 $tmp1294 $tmp1296 	%argrw{"wrr"}
	max		___592_result $tmp1291 $tmp1293 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1298 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1298 2229 2229 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1301 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1300 $tmp1301 	%argrw{"wr"}
	sqrt		$tmp1299 $tmp1300 	%argrw{"wr"}
	compref		$tmp1304 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1303 $tmp1304 	%argrw{"wr"}
	sqrt		$tmp1302 $tmp1303 	%argrw{"wr"}
	add		$tmp1305 $tmp1299 $tmp1302 	%argrw{"wrr"}
	compref		$tmp1308 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1307 $tmp1308 	%argrw{"wr"}
	sqrt		$tmp1306 $tmp1307 	%argrw{"wr"}
	add		___592_result $tmp1305 $tmp1306 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1309 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1309 2236 2236 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1312 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1313 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1311 $tmp1312 $tmp1313 	%argrw{"wrr"}
	sqrt		$tmp1310 $tmp1311 	%argrw{"wr"}
	sqrt		___592_result $tmp1310 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1314 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1314 2251 2251 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1317 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1316 $tmp1317 	%argrw{"wr"}
	pow		$tmp1315 $tmp1316 $const4 	%argrw{"wrr"}
	compref		$tmp1320 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1319 $tmp1320 	%argrw{"wr"}
	pow		$tmp1318 $tmp1319 $const4 	%argrw{"wrr"}
	add		$tmp1321 $tmp1315 $tmp1318 	%argrw{"wrr"}
	compref		$tmp1324 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1323 $tmp1324 	%argrw{"wr"}
	pow		$tmp1322 $tmp1323 $const4 	%argrw{"wrr"}
	add		$tmp1325 $tmp1321 $tmp1322 	%argrw{"wrr"}
	div		$tmp1326 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1325 $tmp1326 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1328 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1329 ___594_yy 	%argrw{"wr"}
	assign		$tmp1330 ___594_zz 	%argrw{"wr"}
	point		$tmp1327 $tmp1328 $tmp1329 $tmp1330 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1327 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1331 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1332 ___600_d $tmp1331 	%argrw{"wrr"}
	if		$tmp1332 2274 2301 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1333 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1333 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1334 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1334 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1335 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp1335 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1336 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1336 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1337 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1337 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1338 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp1338 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1339 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1340 ___600_d $tmp1339 	%argrw{"wrr"}
	if		$tmp1340 2287 2301 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1341 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1341 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1342 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1342 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1343 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1343 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1344 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1344 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1345 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1346 ___600_d $tmp1345 	%argrw{"wrr"}
	if		$tmp1346 2296 2301 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1347 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1347 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1348 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1348 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1349 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1350 ___600_d $tmp1349 	%argrw{"wrr"}
	if		$tmp1350 2301 2301 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1351 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1352 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1353 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp1254 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp1354 $const9 $tmp1254 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp1354 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp1355 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp1355 2483 2483 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 2483 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 2481 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 2481 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 2480 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1358 $tmp1251 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1357 $tmp1358 	%argrw{"wr"}
	assign		___594_xi $tmp1357 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1360 $tmp1251 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1359 $tmp1360 	%argrw{"wr"}
	assign		___594_yi $tmp1359 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1362 $tmp1251 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1361 $tmp1362 	%argrw{"wr"}
	assign		___594_zi $tmp1361 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1364 2331 2333 2478 2480 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1363 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1364 ___594_xx $tmp1363 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1366 2335 2337 2476 2478 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1365 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1366 ___594_yy $tmp1365 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1368 2339 2341 2474 2476 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1367 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1368 ___594_zz $tmp1367 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1369 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1370 ___594_yy 	%argrw{"wr"}
	assign		$tmp1371 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1369 $tmp1370 $tmp1371 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 2358 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1374 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1375 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1376 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1373 $tmp1374 $tmp1375 $tmp1376 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1373 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1378 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1379 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1380 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1377 $tmp1378 $tmp1379 $tmp1380 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1377 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1372 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1372 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1381 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1251 $tmp1381 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 2425 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1382 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1382 2366 2366 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1383 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1383 2369 2369 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1384 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1384 2379 2379 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1386 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1385 $tmp1386 	%argrw{"wr"}
	compref		$tmp1388 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1387 $tmp1388 	%argrw{"wr"}
	add		$tmp1389 $tmp1385 $tmp1387 	%argrw{"wrr"}
	compref		$tmp1391 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1390 $tmp1391 	%argrw{"wr"}
	add		___592_result $tmp1389 $tmp1390 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1392 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1392 2389 2389 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1394 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1393 $tmp1394 	%argrw{"wr"}
	compref		$tmp1397 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1396 $tmp1397 	%argrw{"wr"}
	compref		$tmp1399 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1398 $tmp1399 	%argrw{"wr"}
	max		$tmp1395 $tmp1396 $tmp1398 	%argrw{"wrr"}
	max		___592_result $tmp1393 $tmp1395 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1400 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1400 2402 2402 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1403 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1402 $tmp1403 	%argrw{"wr"}
	sqrt		$tmp1401 $tmp1402 	%argrw{"wr"}
	compref		$tmp1406 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1405 $tmp1406 	%argrw{"wr"}
	sqrt		$tmp1404 $tmp1405 	%argrw{"wr"}
	add		$tmp1407 $tmp1401 $tmp1404 	%argrw{"wrr"}
	compref		$tmp1410 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1409 $tmp1410 	%argrw{"wr"}
	sqrt		$tmp1408 $tmp1409 	%argrw{"wr"}
	add		___592_result $tmp1407 $tmp1408 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1411 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1411 2409 2409 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1414 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1415 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1413 $tmp1414 $tmp1415 	%argrw{"wrr"}
	sqrt		$tmp1412 $tmp1413 	%argrw{"wr"}
	sqrt		___592_result $tmp1412 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1416 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1416 2424 2424 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1419 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1418 $tmp1419 	%argrw{"wr"}
	pow		$tmp1417 $tmp1418 $const4 	%argrw{"wrr"}
	compref		$tmp1422 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1421 $tmp1422 	%argrw{"wr"}
	pow		$tmp1420 $tmp1421 $const4 	%argrw{"wrr"}
	add		$tmp1423 $tmp1417 $tmp1420 	%argrw{"wrr"}
	compref		$tmp1426 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1425 $tmp1426 	%argrw{"wr"}
	pow		$tmp1424 $tmp1425 $const4 	%argrw{"wrr"}
	add		$tmp1427 $tmp1423 $tmp1424 	%argrw{"wrr"}
	div		$tmp1428 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1427 $tmp1428 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1430 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1431 ___594_yy 	%argrw{"wr"}
	assign		$tmp1432 ___594_zz 	%argrw{"wr"}
	point		$tmp1429 $tmp1430 $tmp1431 $tmp1432 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1429 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1433 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1434 ___600_d $tmp1433 	%argrw{"wrr"}
	if		$tmp1434 2447 2474 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1435 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1435 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1436 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1436 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1437 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp1437 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1438 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1438 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1439 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1439 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1440 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp1440 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1441 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1442 ___600_d $tmp1441 	%argrw{"wrr"}
	if		$tmp1442 2460 2474 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1443 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1443 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1444 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1444 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1445 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1445 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1446 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1446 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1447 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1448 ___600_d $tmp1447 	%argrw{"wrr"}
	if		$tmp1448 2469 2474 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1449 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1449 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1450 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1450 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1451 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1452 ___600_d $tmp1451 	%argrw{"wrr"}
	if		$tmp1452 2474 2474 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1453 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1454 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1455 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp1356 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp1456 $const9 $tmp1356 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp1456 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp1457 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp1457 2656 2656 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 2656 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 2654 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 2654 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 2653 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1460 $tmp1251 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1459 $tmp1460 	%argrw{"wr"}
	assign		___594_xi $tmp1459 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1462 $tmp1251 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1461 $tmp1462 	%argrw{"wr"}
	assign		___594_yi $tmp1461 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1464 $tmp1251 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1463 $tmp1464 	%argrw{"wr"}
	assign		___594_zi $tmp1463 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1466 2504 2506 2651 2653 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1465 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1466 ___594_xx $tmp1465 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1468 2508 2510 2649 2651 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1467 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1468 ___594_yy $tmp1467 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1470 2512 2514 2647 2649 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1469 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1470 ___594_zz $tmp1469 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1471 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1472 ___594_yy 	%argrw{"wr"}
	assign		$tmp1473 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1471 $tmp1472 $tmp1473 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 2531 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1476 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1477 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1478 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1475 $tmp1476 $tmp1477 $tmp1478 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1475 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1480 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1481 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1482 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1479 $tmp1480 $tmp1481 $tmp1482 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1479 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1474 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1474 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1483 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1251 $tmp1483 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 2598 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1484 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1484 2539 2539 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1485 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1485 2542 2542 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1486 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1486 2552 2552 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1488 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1487 $tmp1488 	%argrw{"wr"}
	compref		$tmp1490 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1489 $tmp1490 	%argrw{"wr"}
	add		$tmp1491 $tmp1487 $tmp1489 	%argrw{"wrr"}
	compref		$tmp1493 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1492 $tmp1493 	%argrw{"wr"}
	add		___592_result $tmp1491 $tmp1492 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1494 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1494 2562 2562 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1496 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1495 $tmp1496 	%argrw{"wr"}
	compref		$tmp1499 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1498 $tmp1499 	%argrw{"wr"}
	compref		$tmp1501 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1500 $tmp1501 	%argrw{"wr"}
	max		$tmp1497 $tmp1498 $tmp1500 	%argrw{"wrr"}
	max		___592_result $tmp1495 $tmp1497 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1502 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1502 2575 2575 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1505 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1504 $tmp1505 	%argrw{"wr"}
	sqrt		$tmp1503 $tmp1504 	%argrw{"wr"}
	compref		$tmp1508 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1507 $tmp1508 	%argrw{"wr"}
	sqrt		$tmp1506 $tmp1507 	%argrw{"wr"}
	add		$tmp1509 $tmp1503 $tmp1506 	%argrw{"wrr"}
	compref		$tmp1512 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1511 $tmp1512 	%argrw{"wr"}
	sqrt		$tmp1510 $tmp1511 	%argrw{"wr"}
	add		___592_result $tmp1509 $tmp1510 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1513 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1513 2582 2582 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1516 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1517 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1515 $tmp1516 $tmp1517 	%argrw{"wrr"}
	sqrt		$tmp1514 $tmp1515 	%argrw{"wr"}
	sqrt		___592_result $tmp1514 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1518 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1518 2597 2597 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1521 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1520 $tmp1521 	%argrw{"wr"}
	pow		$tmp1519 $tmp1520 $const4 	%argrw{"wrr"}
	compref		$tmp1524 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1523 $tmp1524 	%argrw{"wr"}
	pow		$tmp1522 $tmp1523 $const4 	%argrw{"wrr"}
	add		$tmp1525 $tmp1519 $tmp1522 	%argrw{"wrr"}
	compref		$tmp1528 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1527 $tmp1528 	%argrw{"wr"}
	pow		$tmp1526 $tmp1527 $const4 	%argrw{"wrr"}
	add		$tmp1529 $tmp1525 $tmp1526 	%argrw{"wrr"}
	div		$tmp1530 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1529 $tmp1530 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1532 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1533 ___594_yy 	%argrw{"wr"}
	assign		$tmp1534 ___594_zz 	%argrw{"wr"}
	point		$tmp1531 $tmp1532 $tmp1533 $tmp1534 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1531 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1535 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1536 ___600_d $tmp1535 	%argrw{"wrr"}
	if		$tmp1536 2620 2647 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1537 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1537 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1538 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1538 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1539 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp1539 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1540 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1540 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1541 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1541 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1542 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp1542 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1543 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1544 ___600_d $tmp1543 	%argrw{"wrr"}
	if		$tmp1544 2633 2647 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1545 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1545 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1546 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1546 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1547 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1547 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1548 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1548 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1549 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1550 ___600_d $tmp1549 	%argrw{"wrr"}
	if		$tmp1550 2642 2647 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1551 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1551 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1552 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1552 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1553 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1554 ___600_d $tmp1553 	%argrw{"wrr"}
	if		$tmp1554 2647 2647 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1555 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1556 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1557 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp1458 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp1558 $const9 $tmp1458 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp1558 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp1559 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp1559 2829 2829 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 2829 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 2827 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 2827 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 2826 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1562 $tmp1251 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1561 $tmp1562 	%argrw{"wr"}
	assign		___594_xi $tmp1561 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1564 $tmp1251 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1563 $tmp1564 	%argrw{"wr"}
	assign		___594_yi $tmp1563 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1566 $tmp1251 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1565 $tmp1566 	%argrw{"wr"}
	assign		___594_zi $tmp1565 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1568 2677 2679 2824 2826 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1567 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1568 ___594_xx $tmp1567 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1570 2681 2683 2822 2824 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1569 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1570 ___594_yy $tmp1569 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1572 2685 2687 2820 2822 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1571 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1572 ___594_zz $tmp1571 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1573 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1574 ___594_yy 	%argrw{"wr"}
	assign		$tmp1575 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1573 $tmp1574 $tmp1575 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 2704 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1578 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1579 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1580 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1577 $tmp1578 $tmp1579 $tmp1580 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1577 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1582 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1583 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1584 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1581 $tmp1582 $tmp1583 $tmp1584 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1581 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1576 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1576 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1585 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1251 $tmp1585 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 2771 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1586 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1586 2712 2712 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1587 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1587 2715 2715 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1588 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1588 2725 2725 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1590 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1589 $tmp1590 	%argrw{"wr"}
	compref		$tmp1592 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1591 $tmp1592 	%argrw{"wr"}
	add		$tmp1593 $tmp1589 $tmp1591 	%argrw{"wrr"}
	compref		$tmp1595 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1594 $tmp1595 	%argrw{"wr"}
	add		___592_result $tmp1593 $tmp1594 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1596 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1596 2735 2735 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1598 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1597 $tmp1598 	%argrw{"wr"}
	compref		$tmp1601 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1600 $tmp1601 	%argrw{"wr"}
	compref		$tmp1603 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1602 $tmp1603 	%argrw{"wr"}
	max		$tmp1599 $tmp1600 $tmp1602 	%argrw{"wrr"}
	max		___592_result $tmp1597 $tmp1599 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1604 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1604 2748 2748 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1607 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1606 $tmp1607 	%argrw{"wr"}
	sqrt		$tmp1605 $tmp1606 	%argrw{"wr"}
	compref		$tmp1610 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1609 $tmp1610 	%argrw{"wr"}
	sqrt		$tmp1608 $tmp1609 	%argrw{"wr"}
	add		$tmp1611 $tmp1605 $tmp1608 	%argrw{"wrr"}
	compref		$tmp1614 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1613 $tmp1614 	%argrw{"wr"}
	sqrt		$tmp1612 $tmp1613 	%argrw{"wr"}
	add		___592_result $tmp1611 $tmp1612 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1615 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1615 2755 2755 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1618 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1619 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1617 $tmp1618 $tmp1619 	%argrw{"wrr"}
	sqrt		$tmp1616 $tmp1617 	%argrw{"wr"}
	sqrt		___592_result $tmp1616 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1620 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1620 2770 2770 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1623 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1622 $tmp1623 	%argrw{"wr"}
	pow		$tmp1621 $tmp1622 $const4 	%argrw{"wrr"}
	compref		$tmp1626 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1625 $tmp1626 	%argrw{"wr"}
	pow		$tmp1624 $tmp1625 $const4 	%argrw{"wrr"}
	add		$tmp1627 $tmp1621 $tmp1624 	%argrw{"wrr"}
	compref		$tmp1630 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1629 $tmp1630 	%argrw{"wr"}
	pow		$tmp1628 $tmp1629 $const4 	%argrw{"wrr"}
	add		$tmp1631 $tmp1627 $tmp1628 	%argrw{"wrr"}
	div		$tmp1632 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1631 $tmp1632 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1634 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1635 ___594_yy 	%argrw{"wr"}
	assign		$tmp1636 ___594_zz 	%argrw{"wr"}
	point		$tmp1633 $tmp1634 $tmp1635 $tmp1636 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1633 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1637 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1638 ___600_d $tmp1637 	%argrw{"wrr"}
	if		$tmp1638 2793 2820 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1639 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1639 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1640 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1640 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1641 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp1641 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1642 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1642 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1643 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1643 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1644 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp1644 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1645 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1646 ___600_d $tmp1645 	%argrw{"wrr"}
	if		$tmp1646 2806 2820 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1647 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1647 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1648 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1648 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1649 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1649 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1650 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1650 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1651 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1652 ___600_d $tmp1651 	%argrw{"wrr"}
	if		$tmp1652 2815 2820 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1653 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1653 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1654 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1654 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1655 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1656 ___600_d $tmp1655 	%argrw{"wrr"}
	if		$tmp1656 2820 2820 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1657 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1658 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1659 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp1560 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp1660 $const9 $tmp1560 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp1660 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp1661 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp1661 3004 3004 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 3004 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 3002 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 3002 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 2999 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1664 $tmp1251 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1663 $tmp1664 	%argrw{"wr"}
	assign		___594_xi $tmp1663 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1666 $tmp1251 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1665 $tmp1666 	%argrw{"wr"}
	assign		___594_yi $tmp1665 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1668 $tmp1251 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1667 $tmp1668 	%argrw{"wr"}
	assign		___594_zi $tmp1667 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1670 2850 2852 2997 2999 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1669 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1670 ___594_xx $tmp1669 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1672 2854 2856 2995 2997 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1671 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1672 ___594_yy $tmp1671 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1674 2858 2860 2993 2995 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1673 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1674 ___594_zz $tmp1673 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1675 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1676 ___594_yy 	%argrw{"wr"}
	assign		$tmp1677 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1675 $tmp1676 $tmp1677 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 2877 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1680 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1681 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1682 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1679 $tmp1680 $tmp1681 $tmp1682 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1679 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1684 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1685 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1686 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1683 $tmp1684 $tmp1685 $tmp1686 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1683 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1678 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1678 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1687 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1251 $tmp1687 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 2944 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1688 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1688 2885 2885 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1689 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1689 2888 2888 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1690 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1690 2898 2898 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1692 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1691 $tmp1692 	%argrw{"wr"}
	compref		$tmp1694 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1693 $tmp1694 	%argrw{"wr"}
	add		$tmp1695 $tmp1691 $tmp1693 	%argrw{"wrr"}
	compref		$tmp1697 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1696 $tmp1697 	%argrw{"wr"}
	add		___592_result $tmp1695 $tmp1696 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1698 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1698 2908 2908 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1700 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1699 $tmp1700 	%argrw{"wr"}
	compref		$tmp1703 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1702 $tmp1703 	%argrw{"wr"}
	compref		$tmp1705 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1704 $tmp1705 	%argrw{"wr"}
	max		$tmp1701 $tmp1702 $tmp1704 	%argrw{"wrr"}
	max		___592_result $tmp1699 $tmp1701 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1706 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1706 2921 2921 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1709 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1708 $tmp1709 	%argrw{"wr"}
	sqrt		$tmp1707 $tmp1708 	%argrw{"wr"}
	compref		$tmp1712 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1711 $tmp1712 	%argrw{"wr"}
	sqrt		$tmp1710 $tmp1711 	%argrw{"wr"}
	add		$tmp1713 $tmp1707 $tmp1710 	%argrw{"wrr"}
	compref		$tmp1716 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1715 $tmp1716 	%argrw{"wr"}
	sqrt		$tmp1714 $tmp1715 	%argrw{"wr"}
	add		___592_result $tmp1713 $tmp1714 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1717 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1717 2928 2928 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1720 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1721 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1719 $tmp1720 $tmp1721 	%argrw{"wrr"}
	sqrt		$tmp1718 $tmp1719 	%argrw{"wr"}
	sqrt		___592_result $tmp1718 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1722 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1722 2943 2943 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1725 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1724 $tmp1725 	%argrw{"wr"}
	pow		$tmp1723 $tmp1724 $const4 	%argrw{"wrr"}
	compref		$tmp1728 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1727 $tmp1728 	%argrw{"wr"}
	pow		$tmp1726 $tmp1727 $const4 	%argrw{"wrr"}
	add		$tmp1729 $tmp1723 $tmp1726 	%argrw{"wrr"}
	compref		$tmp1732 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1731 $tmp1732 	%argrw{"wr"}
	pow		$tmp1730 $tmp1731 $const4 	%argrw{"wrr"}
	add		$tmp1733 $tmp1729 $tmp1730 	%argrw{"wrr"}
	div		$tmp1734 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1733 $tmp1734 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1736 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1737 ___594_yy 	%argrw{"wr"}
	assign		$tmp1738 ___594_zz 	%argrw{"wr"}
	point		$tmp1735 $tmp1736 $tmp1737 $tmp1738 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1735 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1739 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1740 ___600_d $tmp1739 	%argrw{"wrr"}
	if		$tmp1740 2966 2993 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1741 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1741 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1742 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1742 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1743 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp1743 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1744 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1744 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1745 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1745 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1746 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp1746 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1747 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1748 ___600_d $tmp1747 	%argrw{"wrr"}
	if		$tmp1748 2979 2993 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1749 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1749 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1750 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1750 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1751 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1751 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1752 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1752 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1753 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1754 ___600_d $tmp1753 	%argrw{"wrr"}
	if		$tmp1754 2988 2993 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1755 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1755 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1756 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1756 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1757 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1758 ___600_d $tmp1757 	%argrw{"wrr"}
	if		$tmp1758 2993 2993 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1759 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1760 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1761 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp1762 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp1763 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp1662 $tmp1762 $tmp1763 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp1764 $const9 $tmp1662 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp1764 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp1765 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp1765 3186 3186 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 3186 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 3184 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 3178 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 3178 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 3175 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1769 $tmp1251 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1768 $tmp1769 	%argrw{"wr"}
	assign		___594_xi $tmp1768 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1771 $tmp1251 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1770 $tmp1771 	%argrw{"wr"}
	assign		___594_yi $tmp1770 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1773 $tmp1251 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1772 $tmp1773 	%argrw{"wr"}
	assign		___594_zi $tmp1772 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1775 3026 3028 3173 3175 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1774 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1775 ___594_xx $tmp1774 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1777 3030 3032 3171 3173 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1776 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1777 ___594_yy $tmp1776 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1779 3034 3036 3169 3171 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1778 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1779 ___594_zz $tmp1778 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1780 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1781 ___594_yy 	%argrw{"wr"}
	assign		$tmp1782 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1780 $tmp1781 $tmp1782 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 3053 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1785 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1786 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1787 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1784 $tmp1785 $tmp1786 $tmp1787 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1784 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1789 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1790 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1791 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1788 $tmp1789 $tmp1790 $tmp1791 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1788 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1783 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1783 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1792 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1251 $tmp1792 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 3120 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1793 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1793 3061 3061 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1794 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1794 3064 3064 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1795 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1795 3074 3074 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1797 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1796 $tmp1797 	%argrw{"wr"}
	compref		$tmp1799 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1798 $tmp1799 	%argrw{"wr"}
	add		$tmp1800 $tmp1796 $tmp1798 	%argrw{"wrr"}
	compref		$tmp1802 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1801 $tmp1802 	%argrw{"wr"}
	add		___592_result $tmp1800 $tmp1801 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1803 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1803 3084 3084 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1805 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1804 $tmp1805 	%argrw{"wr"}
	compref		$tmp1808 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1807 $tmp1808 	%argrw{"wr"}
	compref		$tmp1810 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1809 $tmp1810 	%argrw{"wr"}
	max		$tmp1806 $tmp1807 $tmp1809 	%argrw{"wrr"}
	max		___592_result $tmp1804 $tmp1806 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1811 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1811 3097 3097 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1814 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1813 $tmp1814 	%argrw{"wr"}
	sqrt		$tmp1812 $tmp1813 	%argrw{"wr"}
	compref		$tmp1817 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1816 $tmp1817 	%argrw{"wr"}
	sqrt		$tmp1815 $tmp1816 	%argrw{"wr"}
	add		$tmp1818 $tmp1812 $tmp1815 	%argrw{"wrr"}
	compref		$tmp1821 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1820 $tmp1821 	%argrw{"wr"}
	sqrt		$tmp1819 $tmp1820 	%argrw{"wr"}
	add		___592_result $tmp1818 $tmp1819 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1822 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1822 3104 3104 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1825 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1826 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1824 $tmp1825 $tmp1826 	%argrw{"wrr"}
	sqrt		$tmp1823 $tmp1824 	%argrw{"wr"}
	sqrt		___592_result $tmp1823 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1827 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1827 3119 3119 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1830 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1829 $tmp1830 	%argrw{"wr"}
	pow		$tmp1828 $tmp1829 $const4 	%argrw{"wrr"}
	compref		$tmp1833 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1832 $tmp1833 	%argrw{"wr"}
	pow		$tmp1831 $tmp1832 $const4 	%argrw{"wrr"}
	add		$tmp1834 $tmp1828 $tmp1831 	%argrw{"wrr"}
	compref		$tmp1837 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1836 $tmp1837 	%argrw{"wr"}
	pow		$tmp1835 $tmp1836 $const4 	%argrw{"wrr"}
	add		$tmp1838 $tmp1834 $tmp1835 	%argrw{"wrr"}
	div		$tmp1839 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1838 $tmp1839 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1841 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1842 ___594_yy 	%argrw{"wr"}
	assign		$tmp1843 ___594_zz 	%argrw{"wr"}
	point		$tmp1840 $tmp1841 $tmp1842 $tmp1843 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1840 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1844 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1845 ___600_d $tmp1844 	%argrw{"wrr"}
	if		$tmp1845 3142 3169 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1846 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1846 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1847 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1847 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1848 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp1848 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1849 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1849 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1850 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1850 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1851 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp1851 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1852 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1853 ___600_d $tmp1852 	%argrw{"wrr"}
	if		$tmp1853 3155 3169 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1854 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1854 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1855 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp1855 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1856 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1856 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1857 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp1857 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1858 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1859 ___600_d $tmp1858 	%argrw{"wrr"}
	if		$tmp1859 3164 3169 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1860 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp1860 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1861 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp1861 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1862 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1863 ___600_d $tmp1862 	%argrw{"wrr"}
	if		$tmp1863 3169 3169 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1864 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1865 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1866 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp1867 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp1868 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp1767 $tmp1867 $tmp1868 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp1767 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp1869 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp1869 3182 3183 	%argrw{"r"}
	assign		$tmp1766 $const26 	%argrw{"wr"}
	assign		$tmp1766 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp1870 $const9 $tmp1766 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp1870 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp1871 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp1871 3189 3189 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp1251 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		$tmp1249 ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:32
# 		r[2] = noise_basis(p - point(13.5), basis) * distortion;
	mul		$tmp1872 $tmp1249 Distortion 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{32} %argrw{"wrr"}
	compassign	___631_r $const15 $tmp1872 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:34
# 		p += r;
	add		$tmp1 $tmp1 ___631_r 	%line{34} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:37
# 	fac = noise_turbulence(p, basis, detail, hard);
	functioncall	$const45 5374 	%line{37} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:217
# float noise_basis_hard(point p, string basis, int hard)
	assign		___625_fscale $const26 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{217} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:218
# {
	assign		___625_amp $const26 	%line{218} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:219
# 	float t = noise_basis(p, basis);
	assign		___625_sum $const4 	%line{219} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:222
# 
	functioncall	$const47 3200 	%line{222} %argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1873 Detail $const46 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		___625_octaves $tmp1873 $const4 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:223
# 
	assign		___625_n ___625_octaves 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{223} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 					pa[2] = pa[1];
	for		$tmp1874 3203 3204 4271 4273 	%line{225} %argrw{"r"}
	assign		___625_i $const3 	%argrw{"wr"}
	le		$tmp1874 ___625_i ___625_n 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:226
# 					pa[1] = pa[0];
	mul		$tmp1875 ___625_fscale $tmp1 	%line{226} %argrw{"wrr"}
	functioncall	$const6 4263 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const4 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp1876 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp1876 3210 3210 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp1875 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp1877 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp1877 3383 3383 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const8 3383 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 3381 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 3381 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 3380 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1880 $tmp1875 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1879 $tmp1880 	%argrw{"wr"}
	assign		___594_xi $tmp1879 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1882 $tmp1875 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1881 $tmp1882 	%argrw{"wr"}
	assign		___594_yi $tmp1881 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1884 $tmp1875 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1883 $tmp1884 	%argrw{"wr"}
	assign		___594_zi $tmp1883 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1886 3231 3233 3378 3380 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1885 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1886 ___594_xx $tmp1885 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1888 3235 3237 3376 3378 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1887 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1888 ___594_yy $tmp1887 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1890 3239 3241 3374 3376 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1889 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1890 ___594_zz $tmp1889 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1891 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1892 ___594_yy 	%argrw{"wr"}
	assign		$tmp1893 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1891 $tmp1892 $tmp1893 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 3258 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1896 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1897 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp1898 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1895 $tmp1896 $tmp1897 $tmp1898 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1895 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1900 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp1901 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp1902 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp1899 $tmp1900 $tmp1901 $tmp1902 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1899 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1894 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1894 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1903 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1875 $tmp1903 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 3325 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1904 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp1904 3266 3266 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1905 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp1905 3269 3269 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1906 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp1906 3279 3279 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1908 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp1907 $tmp1908 	%argrw{"wr"}
	compref		$tmp1910 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1909 $tmp1910 	%argrw{"wr"}
	add		$tmp1911 $tmp1907 $tmp1909 	%argrw{"wrr"}
	compref		$tmp1913 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1912 $tmp1913 	%argrw{"wr"}
	add		___592_result $tmp1911 $tmp1912 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1914 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp1914 3289 3289 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1916 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp1915 $tmp1916 	%argrw{"wr"}
	compref		$tmp1919 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1918 $tmp1919 	%argrw{"wr"}
	compref		$tmp1921 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1920 $tmp1921 	%argrw{"wr"}
	max		$tmp1917 $tmp1918 $tmp1920 	%argrw{"wrr"}
	max		___592_result $tmp1915 $tmp1917 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1922 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp1922 3302 3302 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1925 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp1924 $tmp1925 	%argrw{"wr"}
	sqrt		$tmp1923 $tmp1924 	%argrw{"wr"}
	compref		$tmp1928 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1927 $tmp1928 	%argrw{"wr"}
	sqrt		$tmp1926 $tmp1927 	%argrw{"wr"}
	add		$tmp1929 $tmp1923 $tmp1926 	%argrw{"wrr"}
	compref		$tmp1932 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1931 $tmp1932 	%argrw{"wr"}
	sqrt		$tmp1930 $tmp1931 	%argrw{"wr"}
	add		___592_result $tmp1929 $tmp1930 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1933 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp1933 3309 3309 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1936 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1937 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1935 $tmp1936 $tmp1937 	%argrw{"wrr"}
	sqrt		$tmp1934 $tmp1935 	%argrw{"wr"}
	sqrt		___592_result $tmp1934 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1938 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp1938 3324 3324 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1941 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp1940 $tmp1941 	%argrw{"wr"}
	pow		$tmp1939 $tmp1940 $const4 	%argrw{"wrr"}
	compref		$tmp1944 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp1943 $tmp1944 	%argrw{"wr"}
	pow		$tmp1942 $tmp1943 $const4 	%argrw{"wrr"}
	add		$tmp1945 $tmp1939 $tmp1942 	%argrw{"wrr"}
	compref		$tmp1948 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp1947 $tmp1948 	%argrw{"wr"}
	pow		$tmp1946 $tmp1947 $const4 	%argrw{"wrr"}
	add		$tmp1949 $tmp1945 $tmp1946 	%argrw{"wrr"}
	div		$tmp1950 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp1949 $tmp1950 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1952 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1953 ___594_yy 	%argrw{"wr"}
	assign		$tmp1954 ___594_zz 	%argrw{"wr"}
	point		$tmp1951 $tmp1952 $tmp1953 $tmp1954 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1951 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1955 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp1956 ___600_d $tmp1955 	%argrw{"wrr"}
	if		$tmp1956 3347 3374 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1957 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1957 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1958 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1958 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1959 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp1959 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1960 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1960 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1961 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1961 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1962 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp1962 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1963 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp1964 ___600_d $tmp1963 	%argrw{"wrr"}
	if		$tmp1964 3360 3374 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1965 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1965 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1966 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp1966 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1967 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1967 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1968 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp1968 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1969 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp1970 ___600_d $tmp1969 	%argrw{"wrr"}
	if		$tmp1970 3369 3374 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1971 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp1971 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1972 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp1972 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1973 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp1974 ___600_d $tmp1973 	%argrw{"wrr"}
	if		$tmp1974 3374 3374 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1975 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1976 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1977 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp1878 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp1978 $const9 $tmp1878 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp1978 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp1979 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp1979 3556 3556 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 3556 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 3554 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 3554 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 3553 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1982 $tmp1875 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp1981 $tmp1982 	%argrw{"wr"}
	assign		___594_xi $tmp1981 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1984 $tmp1875 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp1983 $tmp1984 	%argrw{"wr"}
	assign		___594_yi $tmp1983 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1986 $tmp1875 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp1985 $tmp1986 	%argrw{"wr"}
	assign		___594_zi $tmp1985 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1988 3404 3406 3551 3553 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp1987 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp1988 ___594_xx $tmp1987 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1990 3408 3410 3549 3551 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp1989 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp1990 ___594_yy $tmp1989 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1992 3412 3414 3547 3549 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp1991 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp1992 ___594_zz $tmp1991 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1993 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1994 ___594_yy 	%argrw{"wr"}
	assign		$tmp1995 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1993 $tmp1994 $tmp1995 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 3431 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1998 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp1999 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2000 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp1997 $tmp1998 $tmp1999 $tmp2000 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1997 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2002 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2003 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2004 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2001 $tmp2002 $tmp2003 $tmp2004 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2001 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1996 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1996 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2005 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1875 $tmp2005 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 3498 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2006 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2006 3439 3439 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2007 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2007 3442 3442 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2008 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2008 3452 3452 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2010 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2009 $tmp2010 	%argrw{"wr"}
	compref		$tmp2012 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2011 $tmp2012 	%argrw{"wr"}
	add		$tmp2013 $tmp2009 $tmp2011 	%argrw{"wrr"}
	compref		$tmp2015 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2014 $tmp2015 	%argrw{"wr"}
	add		___592_result $tmp2013 $tmp2014 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2016 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2016 3462 3462 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2018 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2017 $tmp2018 	%argrw{"wr"}
	compref		$tmp2021 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2020 $tmp2021 	%argrw{"wr"}
	compref		$tmp2023 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2022 $tmp2023 	%argrw{"wr"}
	max		$tmp2019 $tmp2020 $tmp2022 	%argrw{"wrr"}
	max		___592_result $tmp2017 $tmp2019 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2024 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2024 3475 3475 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2027 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2026 $tmp2027 	%argrw{"wr"}
	sqrt		$tmp2025 $tmp2026 	%argrw{"wr"}
	compref		$tmp2030 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2029 $tmp2030 	%argrw{"wr"}
	sqrt		$tmp2028 $tmp2029 	%argrw{"wr"}
	add		$tmp2031 $tmp2025 $tmp2028 	%argrw{"wrr"}
	compref		$tmp2034 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2033 $tmp2034 	%argrw{"wr"}
	sqrt		$tmp2032 $tmp2033 	%argrw{"wr"}
	add		___592_result $tmp2031 $tmp2032 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2035 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2035 3482 3482 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2038 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2039 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2037 $tmp2038 $tmp2039 	%argrw{"wrr"}
	sqrt		$tmp2036 $tmp2037 	%argrw{"wr"}
	sqrt		___592_result $tmp2036 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2040 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2040 3497 3497 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2043 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2042 $tmp2043 	%argrw{"wr"}
	pow		$tmp2041 $tmp2042 $const4 	%argrw{"wrr"}
	compref		$tmp2046 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2045 $tmp2046 	%argrw{"wr"}
	pow		$tmp2044 $tmp2045 $const4 	%argrw{"wrr"}
	add		$tmp2047 $tmp2041 $tmp2044 	%argrw{"wrr"}
	compref		$tmp2050 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2049 $tmp2050 	%argrw{"wr"}
	pow		$tmp2048 $tmp2049 $const4 	%argrw{"wrr"}
	add		$tmp2051 $tmp2047 $tmp2048 	%argrw{"wrr"}
	div		$tmp2052 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2051 $tmp2052 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2054 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2055 ___594_yy 	%argrw{"wr"}
	assign		$tmp2056 ___594_zz 	%argrw{"wr"}
	point		$tmp2053 $tmp2054 $tmp2055 $tmp2056 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2053 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2057 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2058 ___600_d $tmp2057 	%argrw{"wrr"}
	if		$tmp2058 3520 3547 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2059 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2059 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2060 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2060 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2061 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp2061 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2062 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2062 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2063 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2063 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2064 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp2064 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2065 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2066 ___600_d $tmp2065 	%argrw{"wrr"}
	if		$tmp2066 3533 3547 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2067 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2067 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2068 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2068 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2069 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2069 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2070 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2070 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2071 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2072 ___600_d $tmp2071 	%argrw{"wrr"}
	if		$tmp2072 3542 3547 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2073 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2073 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2074 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2074 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2075 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2076 ___600_d $tmp2075 	%argrw{"wrr"}
	if		$tmp2076 3547 3547 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2077 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2078 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2079 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp1980 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp2080 $const9 $tmp1980 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp2080 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp2081 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp2081 3729 3729 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 3729 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 3727 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 3727 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 3726 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2084 $tmp1875 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2083 $tmp2084 	%argrw{"wr"}
	assign		___594_xi $tmp2083 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2086 $tmp1875 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2085 $tmp2086 	%argrw{"wr"}
	assign		___594_yi $tmp2085 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2088 $tmp1875 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2087 $tmp2088 	%argrw{"wr"}
	assign		___594_zi $tmp2087 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2090 3577 3579 3724 3726 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2089 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2090 ___594_xx $tmp2089 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2092 3581 3583 3722 3724 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2091 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2092 ___594_yy $tmp2091 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2094 3585 3587 3720 3722 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2093 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2094 ___594_zz $tmp2093 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2095 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2096 ___594_yy 	%argrw{"wr"}
	assign		$tmp2097 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2095 $tmp2096 $tmp2097 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 3604 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2100 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2101 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2102 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2099 $tmp2100 $tmp2101 $tmp2102 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2099 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2104 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2105 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2106 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2103 $tmp2104 $tmp2105 $tmp2106 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2103 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2098 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2098 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2107 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1875 $tmp2107 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 3671 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2108 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2108 3612 3612 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2109 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2109 3615 3615 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2110 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2110 3625 3625 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2112 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2111 $tmp2112 	%argrw{"wr"}
	compref		$tmp2114 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2113 $tmp2114 	%argrw{"wr"}
	add		$tmp2115 $tmp2111 $tmp2113 	%argrw{"wrr"}
	compref		$tmp2117 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2116 $tmp2117 	%argrw{"wr"}
	add		___592_result $tmp2115 $tmp2116 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2118 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2118 3635 3635 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2120 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2119 $tmp2120 	%argrw{"wr"}
	compref		$tmp2123 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2122 $tmp2123 	%argrw{"wr"}
	compref		$tmp2125 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2124 $tmp2125 	%argrw{"wr"}
	max		$tmp2121 $tmp2122 $tmp2124 	%argrw{"wrr"}
	max		___592_result $tmp2119 $tmp2121 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2126 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2126 3648 3648 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2129 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2128 $tmp2129 	%argrw{"wr"}
	sqrt		$tmp2127 $tmp2128 	%argrw{"wr"}
	compref		$tmp2132 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2131 $tmp2132 	%argrw{"wr"}
	sqrt		$tmp2130 $tmp2131 	%argrw{"wr"}
	add		$tmp2133 $tmp2127 $tmp2130 	%argrw{"wrr"}
	compref		$tmp2136 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2135 $tmp2136 	%argrw{"wr"}
	sqrt		$tmp2134 $tmp2135 	%argrw{"wr"}
	add		___592_result $tmp2133 $tmp2134 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2137 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2137 3655 3655 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2140 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2141 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2139 $tmp2140 $tmp2141 	%argrw{"wrr"}
	sqrt		$tmp2138 $tmp2139 	%argrw{"wr"}
	sqrt		___592_result $tmp2138 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2142 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2142 3670 3670 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2145 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2144 $tmp2145 	%argrw{"wr"}
	pow		$tmp2143 $tmp2144 $const4 	%argrw{"wrr"}
	compref		$tmp2148 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2147 $tmp2148 	%argrw{"wr"}
	pow		$tmp2146 $tmp2147 $const4 	%argrw{"wrr"}
	add		$tmp2149 $tmp2143 $tmp2146 	%argrw{"wrr"}
	compref		$tmp2152 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2151 $tmp2152 	%argrw{"wr"}
	pow		$tmp2150 $tmp2151 $const4 	%argrw{"wrr"}
	add		$tmp2153 $tmp2149 $tmp2150 	%argrw{"wrr"}
	div		$tmp2154 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2153 $tmp2154 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2156 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2157 ___594_yy 	%argrw{"wr"}
	assign		$tmp2158 ___594_zz 	%argrw{"wr"}
	point		$tmp2155 $tmp2156 $tmp2157 $tmp2158 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2155 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2159 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2160 ___600_d $tmp2159 	%argrw{"wrr"}
	if		$tmp2160 3693 3720 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2161 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2161 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2162 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2162 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2163 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp2163 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2164 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2164 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2165 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2165 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2166 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp2166 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2167 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2168 ___600_d $tmp2167 	%argrw{"wrr"}
	if		$tmp2168 3706 3720 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2169 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2169 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2170 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2170 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2171 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2171 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2172 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2172 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2173 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2174 ___600_d $tmp2173 	%argrw{"wrr"}
	if		$tmp2174 3715 3720 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2175 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2175 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2176 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2176 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2177 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2178 ___600_d $tmp2177 	%argrw{"wrr"}
	if		$tmp2178 3720 3720 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2179 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2180 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2181 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp2082 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp2182 $const9 $tmp2082 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp2182 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp2183 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp2183 3902 3902 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 3902 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 3900 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 3900 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 3899 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2186 $tmp1875 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2185 $tmp2186 	%argrw{"wr"}
	assign		___594_xi $tmp2185 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2188 $tmp1875 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2187 $tmp2188 	%argrw{"wr"}
	assign		___594_yi $tmp2187 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2190 $tmp1875 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2189 $tmp2190 	%argrw{"wr"}
	assign		___594_zi $tmp2189 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2192 3750 3752 3897 3899 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2191 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2192 ___594_xx $tmp2191 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2194 3754 3756 3895 3897 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2193 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2194 ___594_yy $tmp2193 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2196 3758 3760 3893 3895 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2195 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2196 ___594_zz $tmp2195 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2197 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2198 ___594_yy 	%argrw{"wr"}
	assign		$tmp2199 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2197 $tmp2198 $tmp2199 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 3777 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2202 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2203 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2204 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2201 $tmp2202 $tmp2203 $tmp2204 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2201 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2206 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2207 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2208 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2205 $tmp2206 $tmp2207 $tmp2208 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2205 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2200 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2200 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2209 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1875 $tmp2209 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 3844 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2210 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2210 3785 3785 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2211 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2211 3788 3788 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2212 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2212 3798 3798 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2214 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2213 $tmp2214 	%argrw{"wr"}
	compref		$tmp2216 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2215 $tmp2216 	%argrw{"wr"}
	add		$tmp2217 $tmp2213 $tmp2215 	%argrw{"wrr"}
	compref		$tmp2219 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2218 $tmp2219 	%argrw{"wr"}
	add		___592_result $tmp2217 $tmp2218 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2220 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2220 3808 3808 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2222 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2221 $tmp2222 	%argrw{"wr"}
	compref		$tmp2225 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2224 $tmp2225 	%argrw{"wr"}
	compref		$tmp2227 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2226 $tmp2227 	%argrw{"wr"}
	max		$tmp2223 $tmp2224 $tmp2226 	%argrw{"wrr"}
	max		___592_result $tmp2221 $tmp2223 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2228 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2228 3821 3821 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2231 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2230 $tmp2231 	%argrw{"wr"}
	sqrt		$tmp2229 $tmp2230 	%argrw{"wr"}
	compref		$tmp2234 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2233 $tmp2234 	%argrw{"wr"}
	sqrt		$tmp2232 $tmp2233 	%argrw{"wr"}
	add		$tmp2235 $tmp2229 $tmp2232 	%argrw{"wrr"}
	compref		$tmp2238 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2237 $tmp2238 	%argrw{"wr"}
	sqrt		$tmp2236 $tmp2237 	%argrw{"wr"}
	add		___592_result $tmp2235 $tmp2236 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2239 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2239 3828 3828 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2242 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2243 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2241 $tmp2242 $tmp2243 	%argrw{"wrr"}
	sqrt		$tmp2240 $tmp2241 	%argrw{"wr"}
	sqrt		___592_result $tmp2240 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2244 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2244 3843 3843 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2247 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2246 $tmp2247 	%argrw{"wr"}
	pow		$tmp2245 $tmp2246 $const4 	%argrw{"wrr"}
	compref		$tmp2250 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2249 $tmp2250 	%argrw{"wr"}
	pow		$tmp2248 $tmp2249 $const4 	%argrw{"wrr"}
	add		$tmp2251 $tmp2245 $tmp2248 	%argrw{"wrr"}
	compref		$tmp2254 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2253 $tmp2254 	%argrw{"wr"}
	pow		$tmp2252 $tmp2253 $const4 	%argrw{"wrr"}
	add		$tmp2255 $tmp2251 $tmp2252 	%argrw{"wrr"}
	div		$tmp2256 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2255 $tmp2256 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2258 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2259 ___594_yy 	%argrw{"wr"}
	assign		$tmp2260 ___594_zz 	%argrw{"wr"}
	point		$tmp2257 $tmp2258 $tmp2259 $tmp2260 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2257 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2261 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2262 ___600_d $tmp2261 	%argrw{"wrr"}
	if		$tmp2262 3866 3893 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2263 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2263 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2264 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2264 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2265 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp2265 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2266 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2266 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2267 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2267 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2268 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp2268 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2269 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2270 ___600_d $tmp2269 	%argrw{"wrr"}
	if		$tmp2270 3879 3893 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2271 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2271 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2272 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2272 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2273 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2273 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2274 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2274 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2275 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2276 ___600_d $tmp2275 	%argrw{"wrr"}
	if		$tmp2276 3888 3893 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2277 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2277 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2278 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2278 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2279 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2280 ___600_d $tmp2279 	%argrw{"wrr"}
	if		$tmp2280 3893 3893 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2281 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2282 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2283 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp2184 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp2284 $const9 $tmp2184 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp2284 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp2285 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp2285 4077 4077 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 4077 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 4075 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 4075 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 4072 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2288 $tmp1875 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2287 $tmp2288 	%argrw{"wr"}
	assign		___594_xi $tmp2287 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2290 $tmp1875 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2289 $tmp2290 	%argrw{"wr"}
	assign		___594_yi $tmp2289 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2292 $tmp1875 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2291 $tmp2292 	%argrw{"wr"}
	assign		___594_zi $tmp2291 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2294 3923 3925 4070 4072 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2293 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2294 ___594_xx $tmp2293 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2296 3927 3929 4068 4070 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2295 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2296 ___594_yy $tmp2295 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2298 3931 3933 4066 4068 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2297 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2298 ___594_zz $tmp2297 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2299 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2300 ___594_yy 	%argrw{"wr"}
	assign		$tmp2301 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2299 $tmp2300 $tmp2301 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 3950 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2304 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2305 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2306 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2303 $tmp2304 $tmp2305 $tmp2306 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2303 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2308 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2309 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2310 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2307 $tmp2308 $tmp2309 $tmp2310 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2307 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2302 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2302 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2311 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1875 $tmp2311 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 4017 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2312 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2312 3958 3958 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2313 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2313 3961 3961 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2314 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2314 3971 3971 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2316 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2315 $tmp2316 	%argrw{"wr"}
	compref		$tmp2318 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2317 $tmp2318 	%argrw{"wr"}
	add		$tmp2319 $tmp2315 $tmp2317 	%argrw{"wrr"}
	compref		$tmp2321 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2320 $tmp2321 	%argrw{"wr"}
	add		___592_result $tmp2319 $tmp2320 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2322 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2322 3981 3981 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2324 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2323 $tmp2324 	%argrw{"wr"}
	compref		$tmp2327 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2326 $tmp2327 	%argrw{"wr"}
	compref		$tmp2329 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2328 $tmp2329 	%argrw{"wr"}
	max		$tmp2325 $tmp2326 $tmp2328 	%argrw{"wrr"}
	max		___592_result $tmp2323 $tmp2325 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2330 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2330 3994 3994 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2333 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2332 $tmp2333 	%argrw{"wr"}
	sqrt		$tmp2331 $tmp2332 	%argrw{"wr"}
	compref		$tmp2336 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2335 $tmp2336 	%argrw{"wr"}
	sqrt		$tmp2334 $tmp2335 	%argrw{"wr"}
	add		$tmp2337 $tmp2331 $tmp2334 	%argrw{"wrr"}
	compref		$tmp2340 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2339 $tmp2340 	%argrw{"wr"}
	sqrt		$tmp2338 $tmp2339 	%argrw{"wr"}
	add		___592_result $tmp2337 $tmp2338 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2341 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2341 4001 4001 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2344 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2345 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2343 $tmp2344 $tmp2345 	%argrw{"wrr"}
	sqrt		$tmp2342 $tmp2343 	%argrw{"wr"}
	sqrt		___592_result $tmp2342 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2346 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2346 4016 4016 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2349 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2348 $tmp2349 	%argrw{"wr"}
	pow		$tmp2347 $tmp2348 $const4 	%argrw{"wrr"}
	compref		$tmp2352 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2351 $tmp2352 	%argrw{"wr"}
	pow		$tmp2350 $tmp2351 $const4 	%argrw{"wrr"}
	add		$tmp2353 $tmp2347 $tmp2350 	%argrw{"wrr"}
	compref		$tmp2356 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2355 $tmp2356 	%argrw{"wr"}
	pow		$tmp2354 $tmp2355 $const4 	%argrw{"wrr"}
	add		$tmp2357 $tmp2353 $tmp2354 	%argrw{"wrr"}
	div		$tmp2358 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2357 $tmp2358 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2360 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2361 ___594_yy 	%argrw{"wr"}
	assign		$tmp2362 ___594_zz 	%argrw{"wr"}
	point		$tmp2359 $tmp2360 $tmp2361 $tmp2362 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2359 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2363 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2364 ___600_d $tmp2363 	%argrw{"wrr"}
	if		$tmp2364 4039 4066 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2365 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp2365 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2366 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp2366 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2367 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp2367 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2368 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp2368 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2369 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp2369 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2370 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp2370 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2371 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2372 ___600_d $tmp2371 	%argrw{"wrr"}
	if		$tmp2372 4052 4066 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2373 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp2373 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2374 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp2374 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2375 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp2375 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2376 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp2376 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2377 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2378 ___600_d $tmp2377 	%argrw{"wrr"}
	if		$tmp2378 4061 4066 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2379 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp2379 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2380 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp2380 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2381 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2382 ___600_d $tmp2381 	%argrw{"wrr"}
	if		$tmp2382 4066 4066 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2383 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2384 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2385 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp2386 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp2387 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp2286 $tmp2386 $tmp2387 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp2388 $const9 $tmp2286 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp2388 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp2389 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp2389 4259 4259 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 4259 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 4257 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 4251 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 4251 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 4248 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2393 $tmp1875 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2392 $tmp2393 	%argrw{"wr"}
	assign		___594_xi $tmp2392 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2395 $tmp1875 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2394 $tmp2395 	%argrw{"wr"}
	assign		___594_yi $tmp2394 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2397 $tmp1875 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2396 $tmp2397 	%argrw{"wr"}
	assign		___594_zi $tmp2396 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2399 4099 4101 4246 4248 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2398 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2399 ___594_xx $tmp2398 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2401 4103 4105 4244 4246 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2400 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2401 ___594_yy $tmp2400 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2403 4107 4109 4242 4244 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2402 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2403 ___594_zz $tmp2402 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2404 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2405 ___594_yy 	%argrw{"wr"}
	assign		$tmp2406 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2404 $tmp2405 $tmp2406 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 4126 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2409 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2410 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2411 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2408 $tmp2409 $tmp2410 $tmp2411 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2408 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2413 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2414 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2415 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2412 $tmp2413 $tmp2414 $tmp2415 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2412 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2407 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2407 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2416 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp1875 $tmp2416 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 4193 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2417 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2417 4134 4134 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2418 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2418 4137 4137 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2419 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2419 4147 4147 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2421 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2420 $tmp2421 	%argrw{"wr"}
	compref		$tmp2423 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2422 $tmp2423 	%argrw{"wr"}
	add		$tmp2424 $tmp2420 $tmp2422 	%argrw{"wrr"}
	compref		$tmp2426 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2425 $tmp2426 	%argrw{"wr"}
	add		___592_result $tmp2424 $tmp2425 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2427 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2427 4157 4157 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2429 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2428 $tmp2429 	%argrw{"wr"}
	compref		$tmp2432 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2431 $tmp2432 	%argrw{"wr"}
	compref		$tmp2434 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2433 $tmp2434 	%argrw{"wr"}
	max		$tmp2430 $tmp2431 $tmp2433 	%argrw{"wrr"}
	max		___592_result $tmp2428 $tmp2430 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2435 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2435 4170 4170 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2438 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2437 $tmp2438 	%argrw{"wr"}
	sqrt		$tmp2436 $tmp2437 	%argrw{"wr"}
	compref		$tmp2441 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2440 $tmp2441 	%argrw{"wr"}
	sqrt		$tmp2439 $tmp2440 	%argrw{"wr"}
	add		$tmp2442 $tmp2436 $tmp2439 	%argrw{"wrr"}
	compref		$tmp2445 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2444 $tmp2445 	%argrw{"wr"}
	sqrt		$tmp2443 $tmp2444 	%argrw{"wr"}
	add		___592_result $tmp2442 $tmp2443 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2446 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2446 4177 4177 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2449 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2450 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2448 $tmp2449 $tmp2450 	%argrw{"wrr"}
	sqrt		$tmp2447 $tmp2448 	%argrw{"wr"}
	sqrt		___592_result $tmp2447 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2451 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2451 4192 4192 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2454 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2453 $tmp2454 	%argrw{"wr"}
	pow		$tmp2452 $tmp2453 $const4 	%argrw{"wrr"}
	compref		$tmp2457 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2456 $tmp2457 	%argrw{"wr"}
	pow		$tmp2455 $tmp2456 $const4 	%argrw{"wrr"}
	add		$tmp2458 $tmp2452 $tmp2455 	%argrw{"wrr"}
	compref		$tmp2461 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2460 $tmp2461 	%argrw{"wr"}
	pow		$tmp2459 $tmp2460 $const4 	%argrw{"wrr"}
	add		$tmp2462 $tmp2458 $tmp2459 	%argrw{"wrr"}
	div		$tmp2463 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2462 $tmp2463 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2465 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2466 ___594_yy 	%argrw{"wr"}
	assign		$tmp2467 ___594_zz 	%argrw{"wr"}
	point		$tmp2464 $tmp2465 $tmp2466 $tmp2467 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2464 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2468 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2469 ___600_d $tmp2468 	%argrw{"wrr"}
	if		$tmp2469 4215 4242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2470 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp2470 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2471 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp2471 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2472 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp2472 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2473 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp2473 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2474 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp2474 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2475 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp2475 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2476 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2477 ___600_d $tmp2476 	%argrw{"wrr"}
	if		$tmp2477 4228 4242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2478 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp2478 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2479 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp2479 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2480 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp2480 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2481 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp2481 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2482 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2483 ___600_d $tmp2482 	%argrw{"wrr"}
	if		$tmp2483 4237 4242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2484 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp2484 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2485 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp2485 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2486 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2487 ___600_d $tmp2486 	%argrw{"wrr"}
	if		$tmp2487 4242 4242 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2488 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2489 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2490 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp2491 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp2492 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp2391 $tmp2491 $tmp2492 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp2391 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp2493 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp2493 4255 4256 	%argrw{"r"}
	assign		$tmp2390 $const26 	%argrw{"wr"}
	assign		$tmp2390 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp2494 $const9 $tmp2390 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp2494 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp2495 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp2495 4262 4262 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp1875 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___627_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:228
# 		if (hard)
	if		___631_hard 4267 4267 	%line{228} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:229
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp2496 $const9 ___627_t 	%line{229} %argrw{"wrr"}
	sub		$tmp2497 $tmp2496 $const26 	%argrw{"wrr"}
	fabs		___627_t $tmp2497 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:231
# 		sum += t * amp;
	mul		$tmp2498 ___627_t ___625_amp 	%line{231} %argrw{"wrr"}
	add		___625_sum ___625_sum $tmp2498 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:232
# 		amp *= 0.5;
	mul		___625_amp ___625_amp $const48 	%line{232} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:233
# 		fscale *= 2.0;
	mul		___625_fscale ___625_fscale $const9 	%line{233} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 	for (i = 0; i <= n; i++) {
	assign		$tmp2499 ___625_i 	%line{225} %argrw{"wr"}
	add		___625_i ___625_i $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:236
# 	float rmd = octaves - floor(octaves);
	floor		$tmp2500 ___625_octaves 	%line{236} %argrw{"wr"}
	sub		___625_rmd ___625_octaves $tmp2500 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:238
# 	if (rmd != 0.0) {
	neq		$tmp2501 ___625_rmd $const4 	%line{238} %argrw{"wrr"}
	if		$tmp2501 5364 5374 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:239
# 		float t = noise_basis(fscale * p, basis);
	mul		$tmp2502 ___625_fscale $tmp1 	%line{239} %argrw{"wrr"}
	functioncall	$const6 5336 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const4 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp2503 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp2503 4283 4283 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp2502 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp2504 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp2504 4456 4456 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const8 4456 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 4454 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 4454 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 4453 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2507 $tmp2502 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2506 $tmp2507 	%argrw{"wr"}
	assign		___594_xi $tmp2506 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2509 $tmp2502 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2508 $tmp2509 	%argrw{"wr"}
	assign		___594_yi $tmp2508 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2511 $tmp2502 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2510 $tmp2511 	%argrw{"wr"}
	assign		___594_zi $tmp2510 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2513 4304 4306 4451 4453 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2512 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2513 ___594_xx $tmp2512 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2515 4308 4310 4449 4451 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2514 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2515 ___594_yy $tmp2514 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2517 4312 4314 4447 4449 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2516 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2517 ___594_zz $tmp2516 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2518 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2519 ___594_yy 	%argrw{"wr"}
	assign		$tmp2520 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2518 $tmp2519 $tmp2520 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 4331 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2523 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2524 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2525 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2522 $tmp2523 $tmp2524 $tmp2525 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2522 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2527 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2528 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2529 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2526 $tmp2527 $tmp2528 $tmp2529 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2526 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2521 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2521 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2530 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp2502 $tmp2530 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 4398 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2531 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2531 4339 4339 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2532 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2532 4342 4342 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2533 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2533 4352 4352 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2535 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2534 $tmp2535 	%argrw{"wr"}
	compref		$tmp2537 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2536 $tmp2537 	%argrw{"wr"}
	add		$tmp2538 $tmp2534 $tmp2536 	%argrw{"wrr"}
	compref		$tmp2540 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2539 $tmp2540 	%argrw{"wr"}
	add		___592_result $tmp2538 $tmp2539 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2541 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2541 4362 4362 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2543 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2542 $tmp2543 	%argrw{"wr"}
	compref		$tmp2546 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2545 $tmp2546 	%argrw{"wr"}
	compref		$tmp2548 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2547 $tmp2548 	%argrw{"wr"}
	max		$tmp2544 $tmp2545 $tmp2547 	%argrw{"wrr"}
	max		___592_result $tmp2542 $tmp2544 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2549 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2549 4375 4375 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2552 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2551 $tmp2552 	%argrw{"wr"}
	sqrt		$tmp2550 $tmp2551 	%argrw{"wr"}
	compref		$tmp2555 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2554 $tmp2555 	%argrw{"wr"}
	sqrt		$tmp2553 $tmp2554 	%argrw{"wr"}
	add		$tmp2556 $tmp2550 $tmp2553 	%argrw{"wrr"}
	compref		$tmp2559 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2558 $tmp2559 	%argrw{"wr"}
	sqrt		$tmp2557 $tmp2558 	%argrw{"wr"}
	add		___592_result $tmp2556 $tmp2557 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2560 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2560 4382 4382 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2563 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2564 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2562 $tmp2563 $tmp2564 	%argrw{"wrr"}
	sqrt		$tmp2561 $tmp2562 	%argrw{"wr"}
	sqrt		___592_result $tmp2561 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2565 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2565 4397 4397 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2568 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2567 $tmp2568 	%argrw{"wr"}
	pow		$tmp2566 $tmp2567 $const4 	%argrw{"wrr"}
	compref		$tmp2571 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2570 $tmp2571 	%argrw{"wr"}
	pow		$tmp2569 $tmp2570 $const4 	%argrw{"wrr"}
	add		$tmp2572 $tmp2566 $tmp2569 	%argrw{"wrr"}
	compref		$tmp2575 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2574 $tmp2575 	%argrw{"wr"}
	pow		$tmp2573 $tmp2574 $const4 	%argrw{"wrr"}
	add		$tmp2576 $tmp2572 $tmp2573 	%argrw{"wrr"}
	div		$tmp2577 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2576 $tmp2577 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2579 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2580 ___594_yy 	%argrw{"wr"}
	assign		$tmp2581 ___594_zz 	%argrw{"wr"}
	point		$tmp2578 $tmp2579 $tmp2580 $tmp2581 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2578 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2582 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2583 ___600_d $tmp2582 	%argrw{"wrr"}
	if		$tmp2583 4420 4447 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2584 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2584 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2585 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2585 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2586 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp2586 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2587 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2587 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2588 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2588 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2589 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp2589 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2590 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2591 ___600_d $tmp2590 	%argrw{"wrr"}
	if		$tmp2591 4433 4447 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2592 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2592 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2593 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2593 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2594 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2594 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2595 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2595 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2596 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2597 ___600_d $tmp2596 	%argrw{"wrr"}
	if		$tmp2597 4442 4447 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2598 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2598 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2599 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2599 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2600 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2601 ___600_d $tmp2600 	%argrw{"wrr"}
	if		$tmp2601 4447 4447 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2602 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2603 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2604 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp2505 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp2605 $const9 $tmp2505 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp2605 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp2606 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp2606 4629 4629 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 4629 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 4627 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 4627 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 4626 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2609 $tmp2502 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2608 $tmp2609 	%argrw{"wr"}
	assign		___594_xi $tmp2608 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2611 $tmp2502 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2610 $tmp2611 	%argrw{"wr"}
	assign		___594_yi $tmp2610 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2613 $tmp2502 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2612 $tmp2613 	%argrw{"wr"}
	assign		___594_zi $tmp2612 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2615 4477 4479 4624 4626 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2614 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2615 ___594_xx $tmp2614 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2617 4481 4483 4622 4624 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2616 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2617 ___594_yy $tmp2616 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2619 4485 4487 4620 4622 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2618 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2619 ___594_zz $tmp2618 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2620 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2621 ___594_yy 	%argrw{"wr"}
	assign		$tmp2622 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2620 $tmp2621 $tmp2622 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 4504 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2625 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2626 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2627 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2624 $tmp2625 $tmp2626 $tmp2627 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2624 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2629 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2630 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2631 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2628 $tmp2629 $tmp2630 $tmp2631 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2628 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2623 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2623 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2632 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp2502 $tmp2632 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 4571 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2633 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2633 4512 4512 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2634 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2634 4515 4515 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2635 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2635 4525 4525 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2637 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2636 $tmp2637 	%argrw{"wr"}
	compref		$tmp2639 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2638 $tmp2639 	%argrw{"wr"}
	add		$tmp2640 $tmp2636 $tmp2638 	%argrw{"wrr"}
	compref		$tmp2642 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2641 $tmp2642 	%argrw{"wr"}
	add		___592_result $tmp2640 $tmp2641 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2643 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2643 4535 4535 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2645 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2644 $tmp2645 	%argrw{"wr"}
	compref		$tmp2648 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2647 $tmp2648 	%argrw{"wr"}
	compref		$tmp2650 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2649 $tmp2650 	%argrw{"wr"}
	max		$tmp2646 $tmp2647 $tmp2649 	%argrw{"wrr"}
	max		___592_result $tmp2644 $tmp2646 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2651 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2651 4548 4548 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2654 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2653 $tmp2654 	%argrw{"wr"}
	sqrt		$tmp2652 $tmp2653 	%argrw{"wr"}
	compref		$tmp2657 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2656 $tmp2657 	%argrw{"wr"}
	sqrt		$tmp2655 $tmp2656 	%argrw{"wr"}
	add		$tmp2658 $tmp2652 $tmp2655 	%argrw{"wrr"}
	compref		$tmp2661 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2660 $tmp2661 	%argrw{"wr"}
	sqrt		$tmp2659 $tmp2660 	%argrw{"wr"}
	add		___592_result $tmp2658 $tmp2659 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2662 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2662 4555 4555 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2665 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2666 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2664 $tmp2665 $tmp2666 	%argrw{"wrr"}
	sqrt		$tmp2663 $tmp2664 	%argrw{"wr"}
	sqrt		___592_result $tmp2663 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2667 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2667 4570 4570 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2670 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2669 $tmp2670 	%argrw{"wr"}
	pow		$tmp2668 $tmp2669 $const4 	%argrw{"wrr"}
	compref		$tmp2673 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2672 $tmp2673 	%argrw{"wr"}
	pow		$tmp2671 $tmp2672 $const4 	%argrw{"wrr"}
	add		$tmp2674 $tmp2668 $tmp2671 	%argrw{"wrr"}
	compref		$tmp2677 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2676 $tmp2677 	%argrw{"wr"}
	pow		$tmp2675 $tmp2676 $const4 	%argrw{"wrr"}
	add		$tmp2678 $tmp2674 $tmp2675 	%argrw{"wrr"}
	div		$tmp2679 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2678 $tmp2679 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2681 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2682 ___594_yy 	%argrw{"wr"}
	assign		$tmp2683 ___594_zz 	%argrw{"wr"}
	point		$tmp2680 $tmp2681 $tmp2682 $tmp2683 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2680 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2684 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2685 ___600_d $tmp2684 	%argrw{"wrr"}
	if		$tmp2685 4593 4620 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2686 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2686 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2687 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2687 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2688 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp2688 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2689 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2689 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2690 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2690 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2691 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp2691 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2692 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2693 ___600_d $tmp2692 	%argrw{"wrr"}
	if		$tmp2693 4606 4620 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2694 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2694 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2695 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2695 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2696 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2696 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2697 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2697 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2698 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2699 ___600_d $tmp2698 	%argrw{"wrr"}
	if		$tmp2699 4615 4620 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2700 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2700 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2701 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2701 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2702 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2703 ___600_d $tmp2702 	%argrw{"wrr"}
	if		$tmp2703 4620 4620 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2704 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2705 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2706 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp2607 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp2707 $const9 $tmp2607 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp2707 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp2708 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp2708 4802 4802 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 4802 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 4800 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 4800 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 4799 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2711 $tmp2502 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2710 $tmp2711 	%argrw{"wr"}
	assign		___594_xi $tmp2710 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2713 $tmp2502 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2712 $tmp2713 	%argrw{"wr"}
	assign		___594_yi $tmp2712 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2715 $tmp2502 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2714 $tmp2715 	%argrw{"wr"}
	assign		___594_zi $tmp2714 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2717 4650 4652 4797 4799 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2716 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2717 ___594_xx $tmp2716 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2719 4654 4656 4795 4797 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2718 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2719 ___594_yy $tmp2718 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2721 4658 4660 4793 4795 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2720 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2721 ___594_zz $tmp2720 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2722 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2723 ___594_yy 	%argrw{"wr"}
	assign		$tmp2724 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2722 $tmp2723 $tmp2724 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 4677 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2727 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2728 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2729 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2726 $tmp2727 $tmp2728 $tmp2729 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2726 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2731 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2732 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2733 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2730 $tmp2731 $tmp2732 $tmp2733 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2730 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2725 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2725 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2734 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp2502 $tmp2734 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 4744 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2735 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2735 4685 4685 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2736 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2736 4688 4688 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2737 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2737 4698 4698 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2739 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2738 $tmp2739 	%argrw{"wr"}
	compref		$tmp2741 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2740 $tmp2741 	%argrw{"wr"}
	add		$tmp2742 $tmp2738 $tmp2740 	%argrw{"wrr"}
	compref		$tmp2744 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2743 $tmp2744 	%argrw{"wr"}
	add		___592_result $tmp2742 $tmp2743 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2745 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2745 4708 4708 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2747 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2746 $tmp2747 	%argrw{"wr"}
	compref		$tmp2750 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2749 $tmp2750 	%argrw{"wr"}
	compref		$tmp2752 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2751 $tmp2752 	%argrw{"wr"}
	max		$tmp2748 $tmp2749 $tmp2751 	%argrw{"wrr"}
	max		___592_result $tmp2746 $tmp2748 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2753 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2753 4721 4721 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2756 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2755 $tmp2756 	%argrw{"wr"}
	sqrt		$tmp2754 $tmp2755 	%argrw{"wr"}
	compref		$tmp2759 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2758 $tmp2759 	%argrw{"wr"}
	sqrt		$tmp2757 $tmp2758 	%argrw{"wr"}
	add		$tmp2760 $tmp2754 $tmp2757 	%argrw{"wrr"}
	compref		$tmp2763 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2762 $tmp2763 	%argrw{"wr"}
	sqrt		$tmp2761 $tmp2762 	%argrw{"wr"}
	add		___592_result $tmp2760 $tmp2761 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2764 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2764 4728 4728 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2767 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2768 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2766 $tmp2767 $tmp2768 	%argrw{"wrr"}
	sqrt		$tmp2765 $tmp2766 	%argrw{"wr"}
	sqrt		___592_result $tmp2765 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2769 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2769 4743 4743 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2772 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2771 $tmp2772 	%argrw{"wr"}
	pow		$tmp2770 $tmp2771 $const4 	%argrw{"wrr"}
	compref		$tmp2775 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2774 $tmp2775 	%argrw{"wr"}
	pow		$tmp2773 $tmp2774 $const4 	%argrw{"wrr"}
	add		$tmp2776 $tmp2770 $tmp2773 	%argrw{"wrr"}
	compref		$tmp2779 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2778 $tmp2779 	%argrw{"wr"}
	pow		$tmp2777 $tmp2778 $const4 	%argrw{"wrr"}
	add		$tmp2780 $tmp2776 $tmp2777 	%argrw{"wrr"}
	div		$tmp2781 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2780 $tmp2781 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2783 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2784 ___594_yy 	%argrw{"wr"}
	assign		$tmp2785 ___594_zz 	%argrw{"wr"}
	point		$tmp2782 $tmp2783 $tmp2784 $tmp2785 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2782 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2786 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2787 ___600_d $tmp2786 	%argrw{"wrr"}
	if		$tmp2787 4766 4793 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2788 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2788 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2789 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2789 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2790 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp2790 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2791 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2791 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2792 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2792 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2793 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp2793 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2794 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2795 ___600_d $tmp2794 	%argrw{"wrr"}
	if		$tmp2795 4779 4793 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2796 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2796 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2797 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2797 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2798 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2798 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2799 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2799 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2800 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2801 ___600_d $tmp2800 	%argrw{"wrr"}
	if		$tmp2801 4788 4793 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2802 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2802 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2803 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2803 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2804 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2805 ___600_d $tmp2804 	%argrw{"wrr"}
	if		$tmp2805 4793 4793 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2806 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2807 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2808 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp2709 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp2809 $const9 $tmp2709 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp2809 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp2810 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp2810 4975 4975 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 4975 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 4973 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 4973 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 4972 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2813 $tmp2502 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2812 $tmp2813 	%argrw{"wr"}
	assign		___594_xi $tmp2812 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2815 $tmp2502 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2814 $tmp2815 	%argrw{"wr"}
	assign		___594_yi $tmp2814 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2817 $tmp2502 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2816 $tmp2817 	%argrw{"wr"}
	assign		___594_zi $tmp2816 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2819 4823 4825 4970 4972 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2818 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2819 ___594_xx $tmp2818 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2821 4827 4829 4968 4970 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2820 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2821 ___594_yy $tmp2820 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2823 4831 4833 4966 4968 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2822 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2823 ___594_zz $tmp2822 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2824 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2825 ___594_yy 	%argrw{"wr"}
	assign		$tmp2826 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2824 $tmp2825 $tmp2826 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 4850 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2829 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2830 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2831 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2828 $tmp2829 $tmp2830 $tmp2831 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2828 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2833 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2834 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2835 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2832 $tmp2833 $tmp2834 $tmp2835 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2832 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2827 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2827 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2836 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp2502 $tmp2836 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 4917 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2837 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2837 4858 4858 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2838 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2838 4861 4861 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2839 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2839 4871 4871 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2841 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2840 $tmp2841 	%argrw{"wr"}
	compref		$tmp2843 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2842 $tmp2843 	%argrw{"wr"}
	add		$tmp2844 $tmp2840 $tmp2842 	%argrw{"wrr"}
	compref		$tmp2846 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2845 $tmp2846 	%argrw{"wr"}
	add		___592_result $tmp2844 $tmp2845 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2847 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2847 4881 4881 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2849 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2848 $tmp2849 	%argrw{"wr"}
	compref		$tmp2852 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2851 $tmp2852 	%argrw{"wr"}
	compref		$tmp2854 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2853 $tmp2854 	%argrw{"wr"}
	max		$tmp2850 $tmp2851 $tmp2853 	%argrw{"wrr"}
	max		___592_result $tmp2848 $tmp2850 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2855 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2855 4894 4894 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2858 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2857 $tmp2858 	%argrw{"wr"}
	sqrt		$tmp2856 $tmp2857 	%argrw{"wr"}
	compref		$tmp2861 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2860 $tmp2861 	%argrw{"wr"}
	sqrt		$tmp2859 $tmp2860 	%argrw{"wr"}
	add		$tmp2862 $tmp2856 $tmp2859 	%argrw{"wrr"}
	compref		$tmp2865 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2864 $tmp2865 	%argrw{"wr"}
	sqrt		$tmp2863 $tmp2864 	%argrw{"wr"}
	add		___592_result $tmp2862 $tmp2863 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2866 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2866 4901 4901 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2869 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2870 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2868 $tmp2869 $tmp2870 	%argrw{"wrr"}
	sqrt		$tmp2867 $tmp2868 	%argrw{"wr"}
	sqrt		___592_result $tmp2867 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2871 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2871 4916 4916 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2874 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2873 $tmp2874 	%argrw{"wr"}
	pow		$tmp2872 $tmp2873 $const4 	%argrw{"wrr"}
	compref		$tmp2877 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2876 $tmp2877 	%argrw{"wr"}
	pow		$tmp2875 $tmp2876 $const4 	%argrw{"wrr"}
	add		$tmp2878 $tmp2872 $tmp2875 	%argrw{"wrr"}
	compref		$tmp2881 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2880 $tmp2881 	%argrw{"wr"}
	pow		$tmp2879 $tmp2880 $const4 	%argrw{"wrr"}
	add		$tmp2882 $tmp2878 $tmp2879 	%argrw{"wrr"}
	div		$tmp2883 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2882 $tmp2883 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2885 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2886 ___594_yy 	%argrw{"wr"}
	assign		$tmp2887 ___594_zz 	%argrw{"wr"}
	point		$tmp2884 $tmp2885 $tmp2886 $tmp2887 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2884 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2888 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2889 ___600_d $tmp2888 	%argrw{"wrr"}
	if		$tmp2889 4939 4966 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2890 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2890 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2891 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2891 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2892 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp2892 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2893 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2893 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2894 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2894 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2895 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp2895 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2896 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2897 ___600_d $tmp2896 	%argrw{"wrr"}
	if		$tmp2897 4952 4966 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp2898 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2898 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp2899 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp2899 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp2900 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2900 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp2901 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp2901 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp2902 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp2903 ___600_d $tmp2902 	%argrw{"wrr"}
	if		$tmp2903 4961 4966 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp2904 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp2904 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp2905 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp2905 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp2906 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp2907 ___600_d $tmp2906 	%argrw{"wrr"}
	if		$tmp2907 4966 4966 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp2908 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp2909 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp2910 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp2811 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp2911 $const9 $tmp2811 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp2911 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp2912 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp2912 5150 5150 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 5150 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 5148 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 5148 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 5145 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp2915 $tmp2502 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp2914 $tmp2915 	%argrw{"wr"}
	assign		___594_xi $tmp2914 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp2917 $tmp2502 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp2916 $tmp2917 	%argrw{"wr"}
	assign		___594_yi $tmp2916 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp2919 $tmp2502 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp2918 $tmp2919 	%argrw{"wr"}
	assign		___594_zi $tmp2918 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp2921 4996 4998 5143 5145 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp2920 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp2921 ___594_xx $tmp2920 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp2923 5000 5002 5141 5143 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp2922 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp2923 ___594_yy $tmp2922 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp2925 5004 5006 5139 5141 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp2924 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp2925 ___594_zz $tmp2924 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp2926 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp2927 ___594_yy 	%argrw{"wr"}
	assign		$tmp2928 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp2926 $tmp2927 $tmp2928 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 5023 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp2931 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp2932 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp2933 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp2930 $tmp2931 $tmp2932 $tmp2933 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp2930 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp2935 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp2936 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp2937 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp2934 $tmp2935 $tmp2936 $tmp2937 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp2934 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp2929 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp2929 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp2938 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp2502 $tmp2938 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 5090 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp2939 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp2939 5031 5031 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp2940 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp2940 5034 5034 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp2941 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp2941 5044 5044 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp2943 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp2942 $tmp2943 	%argrw{"wr"}
	compref		$tmp2945 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2944 $tmp2945 	%argrw{"wr"}
	add		$tmp2946 $tmp2942 $tmp2944 	%argrw{"wrr"}
	compref		$tmp2948 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2947 $tmp2948 	%argrw{"wr"}
	add		___592_result $tmp2946 $tmp2947 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp2949 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp2949 5054 5054 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp2951 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp2950 $tmp2951 	%argrw{"wr"}
	compref		$tmp2954 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2953 $tmp2954 	%argrw{"wr"}
	compref		$tmp2956 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2955 $tmp2956 	%argrw{"wr"}
	max		$tmp2952 $tmp2953 $tmp2955 	%argrw{"wrr"}
	max		___592_result $tmp2950 $tmp2952 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp2957 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp2957 5067 5067 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp2960 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp2959 $tmp2960 	%argrw{"wr"}
	sqrt		$tmp2958 $tmp2959 	%argrw{"wr"}
	compref		$tmp2963 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2962 $tmp2963 	%argrw{"wr"}
	sqrt		$tmp2961 $tmp2962 	%argrw{"wr"}
	add		$tmp2964 $tmp2958 $tmp2961 	%argrw{"wrr"}
	compref		$tmp2967 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2966 $tmp2967 	%argrw{"wr"}
	sqrt		$tmp2965 $tmp2966 	%argrw{"wr"}
	add		___592_result $tmp2964 $tmp2965 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp2968 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp2968 5074 5074 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp2971 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp2972 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp2970 $tmp2971 $tmp2972 	%argrw{"wrr"}
	sqrt		$tmp2969 $tmp2970 	%argrw{"wr"}
	sqrt		___592_result $tmp2969 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp2973 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp2973 5089 5089 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp2976 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp2975 $tmp2976 	%argrw{"wr"}
	pow		$tmp2974 $tmp2975 $const4 	%argrw{"wrr"}
	compref		$tmp2979 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp2978 $tmp2979 	%argrw{"wr"}
	pow		$tmp2977 $tmp2978 $const4 	%argrw{"wrr"}
	add		$tmp2980 $tmp2974 $tmp2977 	%argrw{"wrr"}
	compref		$tmp2983 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp2982 $tmp2983 	%argrw{"wr"}
	pow		$tmp2981 $tmp2982 $const4 	%argrw{"wrr"}
	add		$tmp2984 $tmp2980 $tmp2981 	%argrw{"wrr"}
	div		$tmp2985 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp2984 $tmp2985 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp2987 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp2988 ___594_yy 	%argrw{"wr"}
	assign		$tmp2989 ___594_zz 	%argrw{"wr"}
	point		$tmp2986 $tmp2987 $tmp2988 $tmp2989 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp2986 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp2990 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp2991 ___600_d $tmp2990 	%argrw{"wrr"}
	if		$tmp2991 5112 5139 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp2992 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp2992 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp2993 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp2993 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp2994 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp2994 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp2995 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp2995 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp2996 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp2996 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp2997 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp2997 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp2998 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp2999 ___600_d $tmp2998 	%argrw{"wrr"}
	if		$tmp2999 5125 5139 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3000 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3000 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3001 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp3001 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3002 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3002 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3003 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp3003 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3004 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3005 ___600_d $tmp3004 	%argrw{"wrr"}
	if		$tmp3005 5134 5139 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3006 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3006 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3007 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3007 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3008 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3009 ___600_d $tmp3008 	%argrw{"wrr"}
	if		$tmp3009 5139 5139 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3010 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3011 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3012 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp3013 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp3014 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp2913 $tmp3013 $tmp3014 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp3015 $const9 $tmp2913 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp3015 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp3016 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp3016 5332 5332 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 5332 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 5330 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 5324 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 5324 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 5321 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3020 $tmp2502 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3019 $tmp3020 	%argrw{"wr"}
	assign		___594_xi $tmp3019 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3022 $tmp2502 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3021 $tmp3022 	%argrw{"wr"}
	assign		___594_yi $tmp3021 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3024 $tmp2502 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3023 $tmp3024 	%argrw{"wr"}
	assign		___594_zi $tmp3023 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3026 5172 5174 5319 5321 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3025 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3026 ___594_xx $tmp3025 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3028 5176 5178 5317 5319 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3027 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3028 ___594_yy $tmp3027 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3030 5180 5182 5315 5317 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3029 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3030 ___594_zz $tmp3029 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3031 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3032 ___594_yy 	%argrw{"wr"}
	assign		$tmp3033 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3031 $tmp3032 $tmp3033 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 5199 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3036 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3037 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3038 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3035 $tmp3036 $tmp3037 $tmp3038 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3035 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3040 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3041 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3042 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3039 $tmp3040 $tmp3041 $tmp3042 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3039 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3034 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3034 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3043 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp2502 $tmp3043 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 5266 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3044 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3044 5207 5207 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3045 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3045 5210 5210 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3046 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3046 5220 5220 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3048 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3047 $tmp3048 	%argrw{"wr"}
	compref		$tmp3050 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3049 $tmp3050 	%argrw{"wr"}
	add		$tmp3051 $tmp3047 $tmp3049 	%argrw{"wrr"}
	compref		$tmp3053 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3052 $tmp3053 	%argrw{"wr"}
	add		___592_result $tmp3051 $tmp3052 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3054 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3054 5230 5230 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3056 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3055 $tmp3056 	%argrw{"wr"}
	compref		$tmp3059 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3058 $tmp3059 	%argrw{"wr"}
	compref		$tmp3061 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3060 $tmp3061 	%argrw{"wr"}
	max		$tmp3057 $tmp3058 $tmp3060 	%argrw{"wrr"}
	max		___592_result $tmp3055 $tmp3057 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3062 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3062 5243 5243 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3065 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3064 $tmp3065 	%argrw{"wr"}
	sqrt		$tmp3063 $tmp3064 	%argrw{"wr"}
	compref		$tmp3068 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3067 $tmp3068 	%argrw{"wr"}
	sqrt		$tmp3066 $tmp3067 	%argrw{"wr"}
	add		$tmp3069 $tmp3063 $tmp3066 	%argrw{"wrr"}
	compref		$tmp3072 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3071 $tmp3072 	%argrw{"wr"}
	sqrt		$tmp3070 $tmp3071 	%argrw{"wr"}
	add		___592_result $tmp3069 $tmp3070 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3073 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3073 5250 5250 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3076 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3077 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3075 $tmp3076 $tmp3077 	%argrw{"wrr"}
	sqrt		$tmp3074 $tmp3075 	%argrw{"wr"}
	sqrt		___592_result $tmp3074 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3078 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3078 5265 5265 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3081 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3080 $tmp3081 	%argrw{"wr"}
	pow		$tmp3079 $tmp3080 $const4 	%argrw{"wrr"}
	compref		$tmp3084 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3083 $tmp3084 	%argrw{"wr"}
	pow		$tmp3082 $tmp3083 $const4 	%argrw{"wrr"}
	add		$tmp3085 $tmp3079 $tmp3082 	%argrw{"wrr"}
	compref		$tmp3088 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3087 $tmp3088 	%argrw{"wr"}
	pow		$tmp3086 $tmp3087 $const4 	%argrw{"wrr"}
	add		$tmp3089 $tmp3085 $tmp3086 	%argrw{"wrr"}
	div		$tmp3090 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3089 $tmp3090 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3092 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3093 ___594_yy 	%argrw{"wr"}
	assign		$tmp3094 ___594_zz 	%argrw{"wr"}
	point		$tmp3091 $tmp3092 $tmp3093 $tmp3094 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3091 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3095 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3096 ___600_d $tmp3095 	%argrw{"wrr"}
	if		$tmp3096 5288 5315 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3097 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3097 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3098 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp3098 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3099 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp3099 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3100 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3100 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3101 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp3101 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3102 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp3102 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3103 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3104 ___600_d $tmp3103 	%argrw{"wrr"}
	if		$tmp3104 5301 5315 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3105 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3105 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3106 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp3106 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3107 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3107 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3108 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp3108 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3109 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3110 ___600_d $tmp3109 	%argrw{"wrr"}
	if		$tmp3110 5310 5315 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3111 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3111 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3112 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3112 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3113 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3114 ___600_d $tmp3113 	%argrw{"wrr"}
	if		$tmp3114 5315 5315 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3115 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3116 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3117 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp3118 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp3119 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp3018 $tmp3118 $tmp3119 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp3018 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp3120 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp3120 5328 5329 	%argrw{"r"}
	assign		$tmp3017 $const26 	%argrw{"wr"}
	assign		$tmp3017 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp3121 $const9 $tmp3017 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp3121 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp3122 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp3122 5335 5335 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp2502 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___628_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:241
# 		if (hard)
	if		___631_hard 5340 5340 	%line{241} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:242
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp3123 $const9 ___628_t 	%line{242} %argrw{"wrr"}
	sub		$tmp3124 $tmp3123 $const26 	%argrw{"wrr"}
	fabs		___628_t $tmp3124 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:244
# 		float sum2 = sum + t*amp;
	mul		$tmp3125 ___628_t ___625_amp 	%line{244} %argrw{"wrr"}
	add		___628_sum2 ___625_sum $tmp3125 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:246
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp3126 $const14 ___625_n 	%line{246} %argrw{"wrr"}
	assign		$tmp3127 $tmp3126 	%argrw{"wr"}
	add		$tmp3128 ___625_n $const14 	%argrw{"wrr"}
	shl		$tmp3129 $const14 $tmp3128 	%argrw{"wrr"}
	sub		$tmp3130 $tmp3129 $const14 	%argrw{"wrr"}
	assign		$tmp3131 $tmp3130 	%argrw{"wr"}
	div		$tmp3132 $tmp3127 $tmp3131 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp3132 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:247
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp3133 ___625_n $const14 	%line{247} %argrw{"wrr"}
	shl		$tmp3134 $const14 $tmp3133 	%argrw{"wrr"}
	assign		$tmp3135 $tmp3134 	%argrw{"wr"}
	add		$tmp3136 ___625_n $const15 	%argrw{"wrr"}
	shl		$tmp3137 $const14 $tmp3136 	%argrw{"wrr"}
	sub		$tmp3138 $tmp3137 $const14 	%argrw{"wrr"}
	assign		$tmp3139 $tmp3138 	%argrw{"wr"}
	div		$tmp3140 $tmp3135 $tmp3139 	%argrw{"wrr"}
	mul		___628_sum2 ___628_sum2 $tmp3140 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:249
# 		return (1.0 - rmd)*sum + rmd*sum2;
	sub		$tmp3141 $const26 ___625_rmd 	%line{249} %argrw{"wrr"}
	mul		$tmp3142 $tmp3141 ___625_sum 	%argrw{"wrr"}
	mul		$tmp3143 ___625_rmd ___628_sum2 	%argrw{"wrr"}
	add		Fac $tmp3142 $tmp3143 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:252
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp3144 $const14 ___625_n 	%line{252} %argrw{"wrr"}
	assign		$tmp3145 $tmp3144 	%argrw{"wr"}
	add		$tmp3146 ___625_n $const14 	%argrw{"wrr"}
	shl		$tmp3147 $const14 $tmp3146 	%argrw{"wrr"}
	sub		$tmp3148 $tmp3147 $const14 	%argrw{"wrr"}
	assign		$tmp3149 $tmp3148 	%argrw{"wr"}
	div		$tmp3150 $tmp3145 $tmp3149 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp3150 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:253
# 		return sum;
	assign		Fac ___625_sum 	%line{253} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_noise_texture.osl:39
# 	Color = color(fac, noise_turbulence(point(p[1], p[0], p[2]), basis, detail, hard),
	compref		$tmp3153 $tmp1 $const14 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{39} %argrw{"wrr"}
	compref		$tmp3154 $tmp1 $const3 	%argrw{"wrr"}
	compref		$tmp3155 $tmp1 $const15 	%argrw{"wrr"}
	point		$tmp3152 $tmp3153 $tmp3154 $tmp3155 	%argrw{"wrrr"}
	functioncall	$const45 7559 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:217
# /* Soft/Hard Noise */
	assign		___625_fscale $const26 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{217} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:218
# 
	assign		___625_amp $const26 	%line{218} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:219
# float noise_basis_hard(point p, string basis, int hard)
	assign		___625_sum $const4 	%line{219} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:222
# 	return (hard) ? fabs(2.0 * t - 1.0) : t;
	functioncall	$const47 5385 	%line{222} %argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp3156 Detail $const46 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		___625_octaves $tmp3156 $const4 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:223
# 
	assign		___625_n ___625_octaves 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{223} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 					pa[2] = pa[1];
	for		$tmp3157 5388 5389 6456 6458 	%line{225} %argrw{"r"}
	assign		___625_i $const3 	%argrw{"wr"}
	le		$tmp3157 ___625_i ___625_n 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:226
# 					pa[1] = pa[0];
	mul		$tmp3158 ___625_fscale $tmp3152 	%line{226} %argrw{"wrr"}
	functioncall	$const6 6448 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const4 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp3159 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp3159 5395 5395 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp3158 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp3160 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp3160 5568 5568 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const8 5568 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 5566 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 5566 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 5565 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3163 $tmp3158 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3162 $tmp3163 	%argrw{"wr"}
	assign		___594_xi $tmp3162 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3165 $tmp3158 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3164 $tmp3165 	%argrw{"wr"}
	assign		___594_yi $tmp3164 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3167 $tmp3158 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3166 $tmp3167 	%argrw{"wr"}
	assign		___594_zi $tmp3166 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3169 5416 5418 5563 5565 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3168 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3169 ___594_xx $tmp3168 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3171 5420 5422 5561 5563 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3170 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3171 ___594_yy $tmp3170 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3173 5424 5426 5559 5561 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3172 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3173 ___594_zz $tmp3172 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3174 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3175 ___594_yy 	%argrw{"wr"}
	assign		$tmp3176 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3174 $tmp3175 $tmp3176 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 5443 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3179 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3180 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3181 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3178 $tmp3179 $tmp3180 $tmp3181 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3178 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3183 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3184 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3185 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3182 $tmp3183 $tmp3184 $tmp3185 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3182 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3177 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3177 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3186 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3158 $tmp3186 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 5510 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3187 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3187 5451 5451 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3188 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3188 5454 5454 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3189 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3189 5464 5464 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3191 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3190 $tmp3191 	%argrw{"wr"}
	compref		$tmp3193 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3192 $tmp3193 	%argrw{"wr"}
	add		$tmp3194 $tmp3190 $tmp3192 	%argrw{"wrr"}
	compref		$tmp3196 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3195 $tmp3196 	%argrw{"wr"}
	add		___592_result $tmp3194 $tmp3195 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3197 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3197 5474 5474 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3199 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3198 $tmp3199 	%argrw{"wr"}
	compref		$tmp3202 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3201 $tmp3202 	%argrw{"wr"}
	compref		$tmp3204 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3203 $tmp3204 	%argrw{"wr"}
	max		$tmp3200 $tmp3201 $tmp3203 	%argrw{"wrr"}
	max		___592_result $tmp3198 $tmp3200 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3205 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3205 5487 5487 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3208 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3207 $tmp3208 	%argrw{"wr"}
	sqrt		$tmp3206 $tmp3207 	%argrw{"wr"}
	compref		$tmp3211 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3210 $tmp3211 	%argrw{"wr"}
	sqrt		$tmp3209 $tmp3210 	%argrw{"wr"}
	add		$tmp3212 $tmp3206 $tmp3209 	%argrw{"wrr"}
	compref		$tmp3215 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3214 $tmp3215 	%argrw{"wr"}
	sqrt		$tmp3213 $tmp3214 	%argrw{"wr"}
	add		___592_result $tmp3212 $tmp3213 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3216 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3216 5494 5494 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3219 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3220 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3218 $tmp3219 $tmp3220 	%argrw{"wrr"}
	sqrt		$tmp3217 $tmp3218 	%argrw{"wr"}
	sqrt		___592_result $tmp3217 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3221 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3221 5509 5509 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3224 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3223 $tmp3224 	%argrw{"wr"}
	pow		$tmp3222 $tmp3223 $const4 	%argrw{"wrr"}
	compref		$tmp3227 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3226 $tmp3227 	%argrw{"wr"}
	pow		$tmp3225 $tmp3226 $const4 	%argrw{"wrr"}
	add		$tmp3228 $tmp3222 $tmp3225 	%argrw{"wrr"}
	compref		$tmp3231 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3230 $tmp3231 	%argrw{"wr"}
	pow		$tmp3229 $tmp3230 $const4 	%argrw{"wrr"}
	add		$tmp3232 $tmp3228 $tmp3229 	%argrw{"wrr"}
	div		$tmp3233 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3232 $tmp3233 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3235 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3236 ___594_yy 	%argrw{"wr"}
	assign		$tmp3237 ___594_zz 	%argrw{"wr"}
	point		$tmp3234 $tmp3235 $tmp3236 $tmp3237 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3234 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3238 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3239 ___600_d $tmp3238 	%argrw{"wrr"}
	if		$tmp3239 5532 5559 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3240 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3240 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3241 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3241 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3242 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp3242 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3243 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3243 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3244 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3244 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3245 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp3245 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3246 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3247 ___600_d $tmp3246 	%argrw{"wrr"}
	if		$tmp3247 5545 5559 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3248 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3248 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3249 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3249 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3250 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3250 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3251 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3251 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3252 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3253 ___600_d $tmp3252 	%argrw{"wrr"}
	if		$tmp3253 5554 5559 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3254 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3254 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3255 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3255 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3256 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3257 ___600_d $tmp3256 	%argrw{"wrr"}
	if		$tmp3257 5559 5559 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3258 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3259 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3260 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp3161 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp3261 $const9 $tmp3161 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp3261 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp3262 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp3262 5741 5741 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 5741 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 5739 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 5739 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 5738 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3265 $tmp3158 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3264 $tmp3265 	%argrw{"wr"}
	assign		___594_xi $tmp3264 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3267 $tmp3158 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3266 $tmp3267 	%argrw{"wr"}
	assign		___594_yi $tmp3266 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3269 $tmp3158 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3268 $tmp3269 	%argrw{"wr"}
	assign		___594_zi $tmp3268 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3271 5589 5591 5736 5738 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3270 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3271 ___594_xx $tmp3270 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3273 5593 5595 5734 5736 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3272 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3273 ___594_yy $tmp3272 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3275 5597 5599 5732 5734 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3274 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3275 ___594_zz $tmp3274 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3276 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3277 ___594_yy 	%argrw{"wr"}
	assign		$tmp3278 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3276 $tmp3277 $tmp3278 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 5616 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3281 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3282 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3283 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3280 $tmp3281 $tmp3282 $tmp3283 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3280 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3285 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3286 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3287 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3284 $tmp3285 $tmp3286 $tmp3287 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3284 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3279 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3279 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3288 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3158 $tmp3288 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 5683 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3289 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3289 5624 5624 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3290 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3290 5627 5627 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3291 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3291 5637 5637 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3293 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3292 $tmp3293 	%argrw{"wr"}
	compref		$tmp3295 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3294 $tmp3295 	%argrw{"wr"}
	add		$tmp3296 $tmp3292 $tmp3294 	%argrw{"wrr"}
	compref		$tmp3298 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3297 $tmp3298 	%argrw{"wr"}
	add		___592_result $tmp3296 $tmp3297 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3299 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3299 5647 5647 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3301 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3300 $tmp3301 	%argrw{"wr"}
	compref		$tmp3304 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3303 $tmp3304 	%argrw{"wr"}
	compref		$tmp3306 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3305 $tmp3306 	%argrw{"wr"}
	max		$tmp3302 $tmp3303 $tmp3305 	%argrw{"wrr"}
	max		___592_result $tmp3300 $tmp3302 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3307 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3307 5660 5660 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3310 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3309 $tmp3310 	%argrw{"wr"}
	sqrt		$tmp3308 $tmp3309 	%argrw{"wr"}
	compref		$tmp3313 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3312 $tmp3313 	%argrw{"wr"}
	sqrt		$tmp3311 $tmp3312 	%argrw{"wr"}
	add		$tmp3314 $tmp3308 $tmp3311 	%argrw{"wrr"}
	compref		$tmp3317 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3316 $tmp3317 	%argrw{"wr"}
	sqrt		$tmp3315 $tmp3316 	%argrw{"wr"}
	add		___592_result $tmp3314 $tmp3315 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3318 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3318 5667 5667 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3321 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3322 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3320 $tmp3321 $tmp3322 	%argrw{"wrr"}
	sqrt		$tmp3319 $tmp3320 	%argrw{"wr"}
	sqrt		___592_result $tmp3319 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3323 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3323 5682 5682 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3326 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3325 $tmp3326 	%argrw{"wr"}
	pow		$tmp3324 $tmp3325 $const4 	%argrw{"wrr"}
	compref		$tmp3329 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3328 $tmp3329 	%argrw{"wr"}
	pow		$tmp3327 $tmp3328 $const4 	%argrw{"wrr"}
	add		$tmp3330 $tmp3324 $tmp3327 	%argrw{"wrr"}
	compref		$tmp3333 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3332 $tmp3333 	%argrw{"wr"}
	pow		$tmp3331 $tmp3332 $const4 	%argrw{"wrr"}
	add		$tmp3334 $tmp3330 $tmp3331 	%argrw{"wrr"}
	div		$tmp3335 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3334 $tmp3335 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3337 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3338 ___594_yy 	%argrw{"wr"}
	assign		$tmp3339 ___594_zz 	%argrw{"wr"}
	point		$tmp3336 $tmp3337 $tmp3338 $tmp3339 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3336 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3340 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3341 ___600_d $tmp3340 	%argrw{"wrr"}
	if		$tmp3341 5705 5732 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3342 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3342 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3343 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3343 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3344 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp3344 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3345 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3345 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3346 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3346 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3347 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp3347 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3348 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3349 ___600_d $tmp3348 	%argrw{"wrr"}
	if		$tmp3349 5718 5732 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3350 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3350 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3351 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3351 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3352 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3352 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3353 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3353 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3354 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3355 ___600_d $tmp3354 	%argrw{"wrr"}
	if		$tmp3355 5727 5732 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3356 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3356 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3357 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3357 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3358 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3359 ___600_d $tmp3358 	%argrw{"wrr"}
	if		$tmp3359 5732 5732 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3360 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3361 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3362 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp3263 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp3363 $const9 $tmp3263 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp3363 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp3364 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp3364 5914 5914 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 5914 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 5912 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 5912 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 5911 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3367 $tmp3158 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3366 $tmp3367 	%argrw{"wr"}
	assign		___594_xi $tmp3366 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3369 $tmp3158 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3368 $tmp3369 	%argrw{"wr"}
	assign		___594_yi $tmp3368 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3371 $tmp3158 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3370 $tmp3371 	%argrw{"wr"}
	assign		___594_zi $tmp3370 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3373 5762 5764 5909 5911 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3372 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3373 ___594_xx $tmp3372 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3375 5766 5768 5907 5909 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3374 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3375 ___594_yy $tmp3374 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3377 5770 5772 5905 5907 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3376 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3377 ___594_zz $tmp3376 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3378 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3379 ___594_yy 	%argrw{"wr"}
	assign		$tmp3380 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3378 $tmp3379 $tmp3380 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 5789 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3383 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3384 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3385 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3382 $tmp3383 $tmp3384 $tmp3385 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3382 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3387 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3388 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3389 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3386 $tmp3387 $tmp3388 $tmp3389 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3386 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3381 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3381 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3390 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3158 $tmp3390 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 5856 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3391 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3391 5797 5797 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3392 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3392 5800 5800 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3393 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3393 5810 5810 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3395 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3394 $tmp3395 	%argrw{"wr"}
	compref		$tmp3397 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3396 $tmp3397 	%argrw{"wr"}
	add		$tmp3398 $tmp3394 $tmp3396 	%argrw{"wrr"}
	compref		$tmp3400 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3399 $tmp3400 	%argrw{"wr"}
	add		___592_result $tmp3398 $tmp3399 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3401 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3401 5820 5820 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3403 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3402 $tmp3403 	%argrw{"wr"}
	compref		$tmp3406 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3405 $tmp3406 	%argrw{"wr"}
	compref		$tmp3408 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3407 $tmp3408 	%argrw{"wr"}
	max		$tmp3404 $tmp3405 $tmp3407 	%argrw{"wrr"}
	max		___592_result $tmp3402 $tmp3404 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3409 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3409 5833 5833 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3412 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3411 $tmp3412 	%argrw{"wr"}
	sqrt		$tmp3410 $tmp3411 	%argrw{"wr"}
	compref		$tmp3415 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3414 $tmp3415 	%argrw{"wr"}
	sqrt		$tmp3413 $tmp3414 	%argrw{"wr"}
	add		$tmp3416 $tmp3410 $tmp3413 	%argrw{"wrr"}
	compref		$tmp3419 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3418 $tmp3419 	%argrw{"wr"}
	sqrt		$tmp3417 $tmp3418 	%argrw{"wr"}
	add		___592_result $tmp3416 $tmp3417 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3420 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3420 5840 5840 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3423 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3424 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3422 $tmp3423 $tmp3424 	%argrw{"wrr"}
	sqrt		$tmp3421 $tmp3422 	%argrw{"wr"}
	sqrt		___592_result $tmp3421 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3425 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3425 5855 5855 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3428 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3427 $tmp3428 	%argrw{"wr"}
	pow		$tmp3426 $tmp3427 $const4 	%argrw{"wrr"}
	compref		$tmp3431 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3430 $tmp3431 	%argrw{"wr"}
	pow		$tmp3429 $tmp3430 $const4 	%argrw{"wrr"}
	add		$tmp3432 $tmp3426 $tmp3429 	%argrw{"wrr"}
	compref		$tmp3435 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3434 $tmp3435 	%argrw{"wr"}
	pow		$tmp3433 $tmp3434 $const4 	%argrw{"wrr"}
	add		$tmp3436 $tmp3432 $tmp3433 	%argrw{"wrr"}
	div		$tmp3437 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3436 $tmp3437 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3439 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3440 ___594_yy 	%argrw{"wr"}
	assign		$tmp3441 ___594_zz 	%argrw{"wr"}
	point		$tmp3438 $tmp3439 $tmp3440 $tmp3441 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3438 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3442 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3443 ___600_d $tmp3442 	%argrw{"wrr"}
	if		$tmp3443 5878 5905 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3444 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3444 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3445 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3445 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3446 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp3446 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3447 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3447 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3448 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3448 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3449 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp3449 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3450 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3451 ___600_d $tmp3450 	%argrw{"wrr"}
	if		$tmp3451 5891 5905 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3452 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3452 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3453 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3453 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3454 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3454 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3455 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3455 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3456 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3457 ___600_d $tmp3456 	%argrw{"wrr"}
	if		$tmp3457 5900 5905 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3458 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3458 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3459 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3459 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3460 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3461 ___600_d $tmp3460 	%argrw{"wrr"}
	if		$tmp3461 5905 5905 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3462 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3463 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3464 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp3365 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp3465 $const9 $tmp3365 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp3465 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp3466 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp3466 6087 6087 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 6087 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 6085 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 6085 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 6084 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3469 $tmp3158 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3468 $tmp3469 	%argrw{"wr"}
	assign		___594_xi $tmp3468 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3471 $tmp3158 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3470 $tmp3471 	%argrw{"wr"}
	assign		___594_yi $tmp3470 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3473 $tmp3158 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3472 $tmp3473 	%argrw{"wr"}
	assign		___594_zi $tmp3472 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3475 5935 5937 6082 6084 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3474 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3475 ___594_xx $tmp3474 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3477 5939 5941 6080 6082 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3476 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3477 ___594_yy $tmp3476 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3479 5943 5945 6078 6080 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3478 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3479 ___594_zz $tmp3478 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3480 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3481 ___594_yy 	%argrw{"wr"}
	assign		$tmp3482 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3480 $tmp3481 $tmp3482 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 5962 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3485 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3486 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3487 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3484 $tmp3485 $tmp3486 $tmp3487 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3484 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3489 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3490 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3491 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3488 $tmp3489 $tmp3490 $tmp3491 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3488 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3483 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3483 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3492 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3158 $tmp3492 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 6029 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3493 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3493 5970 5970 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3494 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3494 5973 5973 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3495 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3495 5983 5983 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3497 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3496 $tmp3497 	%argrw{"wr"}
	compref		$tmp3499 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3498 $tmp3499 	%argrw{"wr"}
	add		$tmp3500 $tmp3496 $tmp3498 	%argrw{"wrr"}
	compref		$tmp3502 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3501 $tmp3502 	%argrw{"wr"}
	add		___592_result $tmp3500 $tmp3501 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3503 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3503 5993 5993 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3505 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3504 $tmp3505 	%argrw{"wr"}
	compref		$tmp3508 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3507 $tmp3508 	%argrw{"wr"}
	compref		$tmp3510 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3509 $tmp3510 	%argrw{"wr"}
	max		$tmp3506 $tmp3507 $tmp3509 	%argrw{"wrr"}
	max		___592_result $tmp3504 $tmp3506 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3511 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3511 6006 6006 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3514 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3513 $tmp3514 	%argrw{"wr"}
	sqrt		$tmp3512 $tmp3513 	%argrw{"wr"}
	compref		$tmp3517 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3516 $tmp3517 	%argrw{"wr"}
	sqrt		$tmp3515 $tmp3516 	%argrw{"wr"}
	add		$tmp3518 $tmp3512 $tmp3515 	%argrw{"wrr"}
	compref		$tmp3521 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3520 $tmp3521 	%argrw{"wr"}
	sqrt		$tmp3519 $tmp3520 	%argrw{"wr"}
	add		___592_result $tmp3518 $tmp3519 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3522 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3522 6013 6013 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3525 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3526 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3524 $tmp3525 $tmp3526 	%argrw{"wrr"}
	sqrt		$tmp3523 $tmp3524 	%argrw{"wr"}
	sqrt		___592_result $tmp3523 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3527 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3527 6028 6028 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3530 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3529 $tmp3530 	%argrw{"wr"}
	pow		$tmp3528 $tmp3529 $const4 	%argrw{"wrr"}
	compref		$tmp3533 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3532 $tmp3533 	%argrw{"wr"}
	pow		$tmp3531 $tmp3532 $const4 	%argrw{"wrr"}
	add		$tmp3534 $tmp3528 $tmp3531 	%argrw{"wrr"}
	compref		$tmp3537 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3536 $tmp3537 	%argrw{"wr"}
	pow		$tmp3535 $tmp3536 $const4 	%argrw{"wrr"}
	add		$tmp3538 $tmp3534 $tmp3535 	%argrw{"wrr"}
	div		$tmp3539 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3538 $tmp3539 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3541 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3542 ___594_yy 	%argrw{"wr"}
	assign		$tmp3543 ___594_zz 	%argrw{"wr"}
	point		$tmp3540 $tmp3541 $tmp3542 $tmp3543 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3540 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3544 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3545 ___600_d $tmp3544 	%argrw{"wrr"}
	if		$tmp3545 6051 6078 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3546 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3546 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3547 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3547 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3548 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp3548 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3549 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3549 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3550 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3550 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3551 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp3551 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3552 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3553 ___600_d $tmp3552 	%argrw{"wrr"}
	if		$tmp3553 6064 6078 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3554 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3554 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3555 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3555 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3556 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3556 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3557 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3557 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3558 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3559 ___600_d $tmp3558 	%argrw{"wrr"}
	if		$tmp3559 6073 6078 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3560 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3560 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3561 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3561 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3562 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3563 ___600_d $tmp3562 	%argrw{"wrr"}
	if		$tmp3563 6078 6078 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3564 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3565 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3566 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp3467 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp3567 $const9 $tmp3467 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp3567 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp3568 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp3568 6262 6262 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 6262 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 6260 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 6260 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 6257 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3571 $tmp3158 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3570 $tmp3571 	%argrw{"wr"}
	assign		___594_xi $tmp3570 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3573 $tmp3158 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3572 $tmp3573 	%argrw{"wr"}
	assign		___594_yi $tmp3572 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3575 $tmp3158 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3574 $tmp3575 	%argrw{"wr"}
	assign		___594_zi $tmp3574 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3577 6108 6110 6255 6257 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3576 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3577 ___594_xx $tmp3576 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3579 6112 6114 6253 6255 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3578 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3579 ___594_yy $tmp3578 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3581 6116 6118 6251 6253 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3580 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3581 ___594_zz $tmp3580 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3582 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3583 ___594_yy 	%argrw{"wr"}
	assign		$tmp3584 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3582 $tmp3583 $tmp3584 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 6135 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3587 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3588 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3589 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3586 $tmp3587 $tmp3588 $tmp3589 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3586 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3591 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3592 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3593 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3590 $tmp3591 $tmp3592 $tmp3593 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3590 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3585 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3585 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3594 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3158 $tmp3594 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 6202 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3595 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3595 6143 6143 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3596 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3596 6146 6146 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3597 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3597 6156 6156 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3599 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3598 $tmp3599 	%argrw{"wr"}
	compref		$tmp3601 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3600 $tmp3601 	%argrw{"wr"}
	add		$tmp3602 $tmp3598 $tmp3600 	%argrw{"wrr"}
	compref		$tmp3604 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3603 $tmp3604 	%argrw{"wr"}
	add		___592_result $tmp3602 $tmp3603 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3605 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3605 6166 6166 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3607 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3606 $tmp3607 	%argrw{"wr"}
	compref		$tmp3610 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3609 $tmp3610 	%argrw{"wr"}
	compref		$tmp3612 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3611 $tmp3612 	%argrw{"wr"}
	max		$tmp3608 $tmp3609 $tmp3611 	%argrw{"wrr"}
	max		___592_result $tmp3606 $tmp3608 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3613 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3613 6179 6179 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3616 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3615 $tmp3616 	%argrw{"wr"}
	sqrt		$tmp3614 $tmp3615 	%argrw{"wr"}
	compref		$tmp3619 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3618 $tmp3619 	%argrw{"wr"}
	sqrt		$tmp3617 $tmp3618 	%argrw{"wr"}
	add		$tmp3620 $tmp3614 $tmp3617 	%argrw{"wrr"}
	compref		$tmp3623 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3622 $tmp3623 	%argrw{"wr"}
	sqrt		$tmp3621 $tmp3622 	%argrw{"wr"}
	add		___592_result $tmp3620 $tmp3621 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3624 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3624 6186 6186 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3627 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3628 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3626 $tmp3627 $tmp3628 	%argrw{"wrr"}
	sqrt		$tmp3625 $tmp3626 	%argrw{"wr"}
	sqrt		___592_result $tmp3625 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3629 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3629 6201 6201 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3632 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3631 $tmp3632 	%argrw{"wr"}
	pow		$tmp3630 $tmp3631 $const4 	%argrw{"wrr"}
	compref		$tmp3635 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3634 $tmp3635 	%argrw{"wr"}
	pow		$tmp3633 $tmp3634 $const4 	%argrw{"wrr"}
	add		$tmp3636 $tmp3630 $tmp3633 	%argrw{"wrr"}
	compref		$tmp3639 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3638 $tmp3639 	%argrw{"wr"}
	pow		$tmp3637 $tmp3638 $const4 	%argrw{"wrr"}
	add		$tmp3640 $tmp3636 $tmp3637 	%argrw{"wrr"}
	div		$tmp3641 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3640 $tmp3641 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3643 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3644 ___594_yy 	%argrw{"wr"}
	assign		$tmp3645 ___594_zz 	%argrw{"wr"}
	point		$tmp3642 $tmp3643 $tmp3644 $tmp3645 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3642 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3646 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3647 ___600_d $tmp3646 	%argrw{"wrr"}
	if		$tmp3647 6224 6251 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3648 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3648 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3649 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp3649 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3650 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp3650 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3651 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3651 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3652 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp3652 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3653 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp3653 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3654 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3655 ___600_d $tmp3654 	%argrw{"wrr"}
	if		$tmp3655 6237 6251 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3656 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3656 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3657 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp3657 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3658 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3658 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3659 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp3659 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3660 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3661 ___600_d $tmp3660 	%argrw{"wrr"}
	if		$tmp3661 6246 6251 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3662 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3662 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3663 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3663 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3664 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3665 ___600_d $tmp3664 	%argrw{"wrr"}
	if		$tmp3665 6251 6251 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3666 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3667 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3668 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp3669 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp3670 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp3569 $tmp3669 $tmp3670 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp3671 $const9 $tmp3569 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp3671 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp3672 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp3672 6444 6444 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 6444 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 6442 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 6436 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 6436 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 6433 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3676 $tmp3158 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3675 $tmp3676 	%argrw{"wr"}
	assign		___594_xi $tmp3675 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3678 $tmp3158 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3677 $tmp3678 	%argrw{"wr"}
	assign		___594_yi $tmp3677 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3680 $tmp3158 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3679 $tmp3680 	%argrw{"wr"}
	assign		___594_zi $tmp3679 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3682 6284 6286 6431 6433 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3681 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3682 ___594_xx $tmp3681 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3684 6288 6290 6429 6431 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3683 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3684 ___594_yy $tmp3683 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3686 6292 6294 6427 6429 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3685 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3686 ___594_zz $tmp3685 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3687 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3688 ___594_yy 	%argrw{"wr"}
	assign		$tmp3689 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3687 $tmp3688 $tmp3689 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 6311 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3692 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3693 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3694 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3691 $tmp3692 $tmp3693 $tmp3694 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3691 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3696 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3697 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3698 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3695 $tmp3696 $tmp3697 $tmp3698 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3695 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3690 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3690 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3699 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3158 $tmp3699 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 6378 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3700 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3700 6319 6319 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3701 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3701 6322 6322 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3702 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3702 6332 6332 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3704 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3703 $tmp3704 	%argrw{"wr"}
	compref		$tmp3706 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3705 $tmp3706 	%argrw{"wr"}
	add		$tmp3707 $tmp3703 $tmp3705 	%argrw{"wrr"}
	compref		$tmp3709 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3708 $tmp3709 	%argrw{"wr"}
	add		___592_result $tmp3707 $tmp3708 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3710 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3710 6342 6342 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3712 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3711 $tmp3712 	%argrw{"wr"}
	compref		$tmp3715 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3714 $tmp3715 	%argrw{"wr"}
	compref		$tmp3717 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3716 $tmp3717 	%argrw{"wr"}
	max		$tmp3713 $tmp3714 $tmp3716 	%argrw{"wrr"}
	max		___592_result $tmp3711 $tmp3713 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3718 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3718 6355 6355 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3721 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3720 $tmp3721 	%argrw{"wr"}
	sqrt		$tmp3719 $tmp3720 	%argrw{"wr"}
	compref		$tmp3724 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3723 $tmp3724 	%argrw{"wr"}
	sqrt		$tmp3722 $tmp3723 	%argrw{"wr"}
	add		$tmp3725 $tmp3719 $tmp3722 	%argrw{"wrr"}
	compref		$tmp3728 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3727 $tmp3728 	%argrw{"wr"}
	sqrt		$tmp3726 $tmp3727 	%argrw{"wr"}
	add		___592_result $tmp3725 $tmp3726 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3729 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3729 6362 6362 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3732 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3733 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3731 $tmp3732 $tmp3733 	%argrw{"wrr"}
	sqrt		$tmp3730 $tmp3731 	%argrw{"wr"}
	sqrt		___592_result $tmp3730 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3734 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3734 6377 6377 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3737 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3736 $tmp3737 	%argrw{"wr"}
	pow		$tmp3735 $tmp3736 $const4 	%argrw{"wrr"}
	compref		$tmp3740 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3739 $tmp3740 	%argrw{"wr"}
	pow		$tmp3738 $tmp3739 $const4 	%argrw{"wrr"}
	add		$tmp3741 $tmp3735 $tmp3738 	%argrw{"wrr"}
	compref		$tmp3744 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3743 $tmp3744 	%argrw{"wr"}
	pow		$tmp3742 $tmp3743 $const4 	%argrw{"wrr"}
	add		$tmp3745 $tmp3741 $tmp3742 	%argrw{"wrr"}
	div		$tmp3746 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3745 $tmp3746 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3748 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3749 ___594_yy 	%argrw{"wr"}
	assign		$tmp3750 ___594_zz 	%argrw{"wr"}
	point		$tmp3747 $tmp3748 $tmp3749 $tmp3750 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3747 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3751 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3752 ___600_d $tmp3751 	%argrw{"wrr"}
	if		$tmp3752 6400 6427 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3753 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3753 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3754 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp3754 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3755 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp3755 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3756 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3756 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3757 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp3757 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3758 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp3758 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3759 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3760 ___600_d $tmp3759 	%argrw{"wrr"}
	if		$tmp3760 6413 6427 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3761 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3761 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3762 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp3762 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3763 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3763 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3764 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp3764 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3765 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3766 ___600_d $tmp3765 	%argrw{"wrr"}
	if		$tmp3766 6422 6427 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3767 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp3767 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3768 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp3768 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3769 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3770 ___600_d $tmp3769 	%argrw{"wrr"}
	if		$tmp3770 6427 6427 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3771 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3772 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3773 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp3774 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp3775 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp3674 $tmp3774 $tmp3775 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp3674 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp3776 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp3776 6440 6441 	%argrw{"r"}
	assign		$tmp3673 $const26 	%argrw{"wr"}
	assign		$tmp3673 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp3777 $const9 $tmp3673 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp3777 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp3778 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp3778 6447 6447 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp3158 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___627_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:228
# 		if (hard)
	if		___631_hard 6452 6452 	%line{228} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:229
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp3779 $const9 ___627_t 	%line{229} %argrw{"wrr"}
	sub		$tmp3780 $tmp3779 $const26 	%argrw{"wrr"}
	fabs		___627_t $tmp3780 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:231
# 		sum += t * amp;
	mul		$tmp3781 ___627_t ___625_amp 	%line{231} %argrw{"wrr"}
	add		___625_sum ___625_sum $tmp3781 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:232
# 		amp *= 0.5;
	mul		___625_amp ___625_amp $const48 	%line{232} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:233
# 		fscale *= 2.0;
	mul		___625_fscale ___625_fscale $const9 	%line{233} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 	for (i = 0; i <= n; i++) {
	assign		$tmp3782 ___625_i 	%line{225} %argrw{"wr"}
	add		___625_i ___625_i $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:236
# 	float rmd = octaves - floor(octaves);
	floor		$tmp3783 ___625_octaves 	%line{236} %argrw{"wr"}
	sub		___625_rmd ___625_octaves $tmp3783 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:238
# 	if (rmd != 0.0) {
	neq		$tmp3784 ___625_rmd $const4 	%line{238} %argrw{"wrr"}
	if		$tmp3784 7549 7559 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:239
# 		float t = noise_basis(fscale * p, basis);
	mul		$tmp3785 ___625_fscale $tmp3152 	%line{239} %argrw{"wrr"}
	functioncall	$const6 7521 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const4 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp3786 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp3786 6468 6468 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp3785 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp3787 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp3787 6641 6641 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const8 6641 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 6639 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 6639 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 6638 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3790 $tmp3785 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3789 $tmp3790 	%argrw{"wr"}
	assign		___594_xi $tmp3789 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3792 $tmp3785 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3791 $tmp3792 	%argrw{"wr"}
	assign		___594_yi $tmp3791 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3794 $tmp3785 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3793 $tmp3794 	%argrw{"wr"}
	assign		___594_zi $tmp3793 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3796 6489 6491 6636 6638 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3795 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3796 ___594_xx $tmp3795 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3798 6493 6495 6634 6636 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3797 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3798 ___594_yy $tmp3797 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3800 6497 6499 6632 6634 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3799 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3800 ___594_zz $tmp3799 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3801 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3802 ___594_yy 	%argrw{"wr"}
	assign		$tmp3803 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3801 $tmp3802 $tmp3803 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 6516 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3806 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3807 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3808 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3805 $tmp3806 $tmp3807 $tmp3808 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3805 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3810 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3811 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3812 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3809 $tmp3810 $tmp3811 $tmp3812 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3809 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3804 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3804 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3813 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3785 $tmp3813 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 6583 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3814 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3814 6524 6524 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3815 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3815 6527 6527 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3816 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3816 6537 6537 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3818 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3817 $tmp3818 	%argrw{"wr"}
	compref		$tmp3820 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3819 $tmp3820 	%argrw{"wr"}
	add		$tmp3821 $tmp3817 $tmp3819 	%argrw{"wrr"}
	compref		$tmp3823 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3822 $tmp3823 	%argrw{"wr"}
	add		___592_result $tmp3821 $tmp3822 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3824 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3824 6547 6547 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3826 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3825 $tmp3826 	%argrw{"wr"}
	compref		$tmp3829 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3828 $tmp3829 	%argrw{"wr"}
	compref		$tmp3831 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3830 $tmp3831 	%argrw{"wr"}
	max		$tmp3827 $tmp3828 $tmp3830 	%argrw{"wrr"}
	max		___592_result $tmp3825 $tmp3827 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3832 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3832 6560 6560 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3835 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3834 $tmp3835 	%argrw{"wr"}
	sqrt		$tmp3833 $tmp3834 	%argrw{"wr"}
	compref		$tmp3838 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3837 $tmp3838 	%argrw{"wr"}
	sqrt		$tmp3836 $tmp3837 	%argrw{"wr"}
	add		$tmp3839 $tmp3833 $tmp3836 	%argrw{"wrr"}
	compref		$tmp3842 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3841 $tmp3842 	%argrw{"wr"}
	sqrt		$tmp3840 $tmp3841 	%argrw{"wr"}
	add		___592_result $tmp3839 $tmp3840 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3843 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3843 6567 6567 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3846 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3847 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3845 $tmp3846 $tmp3847 	%argrw{"wrr"}
	sqrt		$tmp3844 $tmp3845 	%argrw{"wr"}
	sqrt		___592_result $tmp3844 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3848 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3848 6582 6582 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3851 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3850 $tmp3851 	%argrw{"wr"}
	pow		$tmp3849 $tmp3850 $const4 	%argrw{"wrr"}
	compref		$tmp3854 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3853 $tmp3854 	%argrw{"wr"}
	pow		$tmp3852 $tmp3853 $const4 	%argrw{"wrr"}
	add		$tmp3855 $tmp3849 $tmp3852 	%argrw{"wrr"}
	compref		$tmp3858 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3857 $tmp3858 	%argrw{"wr"}
	pow		$tmp3856 $tmp3857 $const4 	%argrw{"wrr"}
	add		$tmp3859 $tmp3855 $tmp3856 	%argrw{"wrr"}
	div		$tmp3860 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3859 $tmp3860 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3862 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3863 ___594_yy 	%argrw{"wr"}
	assign		$tmp3864 ___594_zz 	%argrw{"wr"}
	point		$tmp3861 $tmp3862 $tmp3863 $tmp3864 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3861 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3865 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3866 ___600_d $tmp3865 	%argrw{"wrr"}
	if		$tmp3866 6605 6632 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3867 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3867 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3868 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3868 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3869 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp3869 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3870 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3870 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3871 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3871 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3872 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp3872 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3873 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3874 ___600_d $tmp3873 	%argrw{"wrr"}
	if		$tmp3874 6618 6632 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3875 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3875 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3876 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3876 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3877 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3877 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3878 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3878 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3879 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3880 ___600_d $tmp3879 	%argrw{"wrr"}
	if		$tmp3880 6627 6632 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3881 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3881 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3882 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3882 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3883 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3884 ___600_d $tmp3883 	%argrw{"wrr"}
	if		$tmp3884 6632 6632 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3885 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3886 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3887 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp3788 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp3888 $const9 $tmp3788 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp3888 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp3889 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp3889 6814 6814 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 6814 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 6812 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 6812 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 6811 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3892 $tmp3785 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3891 $tmp3892 	%argrw{"wr"}
	assign		___594_xi $tmp3891 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3894 $tmp3785 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3893 $tmp3894 	%argrw{"wr"}
	assign		___594_yi $tmp3893 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3896 $tmp3785 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3895 $tmp3896 	%argrw{"wr"}
	assign		___594_zi $tmp3895 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp3898 6662 6664 6809 6811 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3897 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp3898 ___594_xx $tmp3897 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp3900 6666 6668 6807 6809 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp3899 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp3900 ___594_yy $tmp3899 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp3902 6670 6672 6805 6807 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp3901 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp3902 ___594_zz $tmp3901 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp3903 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp3904 ___594_yy 	%argrw{"wr"}
	assign		$tmp3905 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp3903 $tmp3904 $tmp3905 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 6689 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp3908 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp3909 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp3910 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp3907 $tmp3908 $tmp3909 $tmp3910 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp3907 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp3912 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp3913 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp3914 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp3911 $tmp3912 $tmp3913 $tmp3914 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp3911 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp3906 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp3906 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp3915 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3785 $tmp3915 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 6756 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp3916 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp3916 6697 6697 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp3917 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp3917 6700 6700 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp3918 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp3918 6710 6710 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp3920 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp3919 $tmp3920 	%argrw{"wr"}
	compref		$tmp3922 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3921 $tmp3922 	%argrw{"wr"}
	add		$tmp3923 $tmp3919 $tmp3921 	%argrw{"wrr"}
	compref		$tmp3925 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3924 $tmp3925 	%argrw{"wr"}
	add		___592_result $tmp3923 $tmp3924 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp3926 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp3926 6720 6720 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp3928 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp3927 $tmp3928 	%argrw{"wr"}
	compref		$tmp3931 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3930 $tmp3931 	%argrw{"wr"}
	compref		$tmp3933 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3932 $tmp3933 	%argrw{"wr"}
	max		$tmp3929 $tmp3930 $tmp3932 	%argrw{"wrr"}
	max		___592_result $tmp3927 $tmp3929 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp3934 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp3934 6733 6733 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp3937 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp3936 $tmp3937 	%argrw{"wr"}
	sqrt		$tmp3935 $tmp3936 	%argrw{"wr"}
	compref		$tmp3940 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3939 $tmp3940 	%argrw{"wr"}
	sqrt		$tmp3938 $tmp3939 	%argrw{"wr"}
	add		$tmp3941 $tmp3935 $tmp3938 	%argrw{"wrr"}
	compref		$tmp3944 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3943 $tmp3944 	%argrw{"wr"}
	sqrt		$tmp3942 $tmp3943 	%argrw{"wr"}
	add		___592_result $tmp3941 $tmp3942 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp3945 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp3945 6740 6740 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp3948 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp3949 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp3947 $tmp3948 $tmp3949 	%argrw{"wrr"}
	sqrt		$tmp3946 $tmp3947 	%argrw{"wr"}
	sqrt		___592_result $tmp3946 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp3950 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp3950 6755 6755 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp3953 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp3952 $tmp3953 	%argrw{"wr"}
	pow		$tmp3951 $tmp3952 $const4 	%argrw{"wrr"}
	compref		$tmp3956 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp3955 $tmp3956 	%argrw{"wr"}
	pow		$tmp3954 $tmp3955 $const4 	%argrw{"wrr"}
	add		$tmp3957 $tmp3951 $tmp3954 	%argrw{"wrr"}
	compref		$tmp3960 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp3959 $tmp3960 	%argrw{"wr"}
	pow		$tmp3958 $tmp3959 $const4 	%argrw{"wrr"}
	add		$tmp3961 $tmp3957 $tmp3958 	%argrw{"wrr"}
	div		$tmp3962 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp3961 $tmp3962 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp3964 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp3965 ___594_yy 	%argrw{"wr"}
	assign		$tmp3966 ___594_zz 	%argrw{"wr"}
	point		$tmp3963 $tmp3964 $tmp3965 $tmp3966 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp3963 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp3967 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp3968 ___600_d $tmp3967 	%argrw{"wrr"}
	if		$tmp3968 6778 6805 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp3969 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3969 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp3970 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3970 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp3971 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp3971 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp3972 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3972 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp3973 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3973 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp3974 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp3974 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp3975 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp3976 ___600_d $tmp3975 	%argrw{"wrr"}
	if		$tmp3976 6791 6805 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp3977 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3977 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp3978 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp3978 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp3979 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3979 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp3980 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp3980 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp3981 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp3982 ___600_d $tmp3981 	%argrw{"wrr"}
	if		$tmp3982 6800 6805 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp3983 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp3983 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp3984 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp3984 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp3985 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp3986 ___600_d $tmp3985 	%argrw{"wrr"}
	if		$tmp3986 6805 6805 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp3987 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp3988 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp3989 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp3890 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp3990 $const9 $tmp3890 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp3990 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp3991 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp3991 6987 6987 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 6987 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 6985 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 6985 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 6984 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp3994 $tmp3785 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp3993 $tmp3994 	%argrw{"wr"}
	assign		___594_xi $tmp3993 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp3996 $tmp3785 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp3995 $tmp3996 	%argrw{"wr"}
	assign		___594_yi $tmp3995 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp3998 $tmp3785 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp3997 $tmp3998 	%argrw{"wr"}
	assign		___594_zi $tmp3997 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4000 6835 6837 6982 6984 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp3999 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4000 ___594_xx $tmp3999 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4002 6839 6841 6980 6982 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4001 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4002 ___594_yy $tmp4001 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4004 6843 6845 6978 6980 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4003 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4004 ___594_zz $tmp4003 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4005 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4006 ___594_yy 	%argrw{"wr"}
	assign		$tmp4007 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4005 $tmp4006 $tmp4007 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 6862 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4010 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4011 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4012 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4009 $tmp4010 $tmp4011 $tmp4012 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4009 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4014 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4015 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4016 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4013 $tmp4014 $tmp4015 $tmp4016 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4013 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4008 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4008 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4017 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3785 $tmp4017 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 6929 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4018 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4018 6870 6870 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4019 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4019 6873 6873 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4020 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4020 6883 6883 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4022 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4021 $tmp4022 	%argrw{"wr"}
	compref		$tmp4024 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4023 $tmp4024 	%argrw{"wr"}
	add		$tmp4025 $tmp4021 $tmp4023 	%argrw{"wrr"}
	compref		$tmp4027 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4026 $tmp4027 	%argrw{"wr"}
	add		___592_result $tmp4025 $tmp4026 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4028 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4028 6893 6893 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4030 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4029 $tmp4030 	%argrw{"wr"}
	compref		$tmp4033 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4032 $tmp4033 	%argrw{"wr"}
	compref		$tmp4035 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4034 $tmp4035 	%argrw{"wr"}
	max		$tmp4031 $tmp4032 $tmp4034 	%argrw{"wrr"}
	max		___592_result $tmp4029 $tmp4031 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4036 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4036 6906 6906 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4039 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4038 $tmp4039 	%argrw{"wr"}
	sqrt		$tmp4037 $tmp4038 	%argrw{"wr"}
	compref		$tmp4042 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4041 $tmp4042 	%argrw{"wr"}
	sqrt		$tmp4040 $tmp4041 	%argrw{"wr"}
	add		$tmp4043 $tmp4037 $tmp4040 	%argrw{"wrr"}
	compref		$tmp4046 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4045 $tmp4046 	%argrw{"wr"}
	sqrt		$tmp4044 $tmp4045 	%argrw{"wr"}
	add		___592_result $tmp4043 $tmp4044 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4047 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4047 6913 6913 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4050 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4051 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4049 $tmp4050 $tmp4051 	%argrw{"wrr"}
	sqrt		$tmp4048 $tmp4049 	%argrw{"wr"}
	sqrt		___592_result $tmp4048 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4052 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4052 6928 6928 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4055 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4054 $tmp4055 	%argrw{"wr"}
	pow		$tmp4053 $tmp4054 $const4 	%argrw{"wrr"}
	compref		$tmp4058 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4057 $tmp4058 	%argrw{"wr"}
	pow		$tmp4056 $tmp4057 $const4 	%argrw{"wrr"}
	add		$tmp4059 $tmp4053 $tmp4056 	%argrw{"wrr"}
	compref		$tmp4062 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4061 $tmp4062 	%argrw{"wr"}
	pow		$tmp4060 $tmp4061 $const4 	%argrw{"wrr"}
	add		$tmp4063 $tmp4059 $tmp4060 	%argrw{"wrr"}
	div		$tmp4064 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4063 $tmp4064 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4066 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4067 ___594_yy 	%argrw{"wr"}
	assign		$tmp4068 ___594_zz 	%argrw{"wr"}
	point		$tmp4065 $tmp4066 $tmp4067 $tmp4068 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4065 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4069 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4070 ___600_d $tmp4069 	%argrw{"wrr"}
	if		$tmp4070 6951 6978 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4071 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4071 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4072 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4072 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4073 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp4073 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4074 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4074 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4075 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4075 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4076 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp4076 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4077 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4078 ___600_d $tmp4077 	%argrw{"wrr"}
	if		$tmp4078 6964 6978 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4079 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4079 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4080 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4080 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4081 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4081 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4082 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4082 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4083 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4084 ___600_d $tmp4083 	%argrw{"wrr"}
	if		$tmp4084 6973 6978 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4085 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4085 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4086 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4086 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4087 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4088 ___600_d $tmp4087 	%argrw{"wrr"}
	if		$tmp4088 6978 6978 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4089 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4090 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4091 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp3992 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp4092 $const9 $tmp3992 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp4092 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp4093 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp4093 7160 7160 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 7160 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 7158 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 7158 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 7157 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4096 $tmp3785 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4095 $tmp4096 	%argrw{"wr"}
	assign		___594_xi $tmp4095 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4098 $tmp3785 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4097 $tmp4098 	%argrw{"wr"}
	assign		___594_yi $tmp4097 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4100 $tmp3785 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4099 $tmp4100 	%argrw{"wr"}
	assign		___594_zi $tmp4099 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4102 7008 7010 7155 7157 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4101 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4102 ___594_xx $tmp4101 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4104 7012 7014 7153 7155 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4103 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4104 ___594_yy $tmp4103 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4106 7016 7018 7151 7153 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4105 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4106 ___594_zz $tmp4105 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4107 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4108 ___594_yy 	%argrw{"wr"}
	assign		$tmp4109 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4107 $tmp4108 $tmp4109 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 7035 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4112 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4113 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4114 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4111 $tmp4112 $tmp4113 $tmp4114 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4111 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4116 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4117 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4118 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4115 $tmp4116 $tmp4117 $tmp4118 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4115 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4110 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4110 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4119 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3785 $tmp4119 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 7102 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4120 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4120 7043 7043 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4121 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4121 7046 7046 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4122 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4122 7056 7056 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4124 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4123 $tmp4124 	%argrw{"wr"}
	compref		$tmp4126 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4125 $tmp4126 	%argrw{"wr"}
	add		$tmp4127 $tmp4123 $tmp4125 	%argrw{"wrr"}
	compref		$tmp4129 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4128 $tmp4129 	%argrw{"wr"}
	add		___592_result $tmp4127 $tmp4128 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4130 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4130 7066 7066 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4132 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4131 $tmp4132 	%argrw{"wr"}
	compref		$tmp4135 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4134 $tmp4135 	%argrw{"wr"}
	compref		$tmp4137 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4136 $tmp4137 	%argrw{"wr"}
	max		$tmp4133 $tmp4134 $tmp4136 	%argrw{"wrr"}
	max		___592_result $tmp4131 $tmp4133 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4138 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4138 7079 7079 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4141 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4140 $tmp4141 	%argrw{"wr"}
	sqrt		$tmp4139 $tmp4140 	%argrw{"wr"}
	compref		$tmp4144 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4143 $tmp4144 	%argrw{"wr"}
	sqrt		$tmp4142 $tmp4143 	%argrw{"wr"}
	add		$tmp4145 $tmp4139 $tmp4142 	%argrw{"wrr"}
	compref		$tmp4148 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4147 $tmp4148 	%argrw{"wr"}
	sqrt		$tmp4146 $tmp4147 	%argrw{"wr"}
	add		___592_result $tmp4145 $tmp4146 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4149 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4149 7086 7086 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4152 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4153 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4151 $tmp4152 $tmp4153 	%argrw{"wrr"}
	sqrt		$tmp4150 $tmp4151 	%argrw{"wr"}
	sqrt		___592_result $tmp4150 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4154 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4154 7101 7101 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4157 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4156 $tmp4157 	%argrw{"wr"}
	pow		$tmp4155 $tmp4156 $const4 	%argrw{"wrr"}
	compref		$tmp4160 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4159 $tmp4160 	%argrw{"wr"}
	pow		$tmp4158 $tmp4159 $const4 	%argrw{"wrr"}
	add		$tmp4161 $tmp4155 $tmp4158 	%argrw{"wrr"}
	compref		$tmp4164 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4163 $tmp4164 	%argrw{"wr"}
	pow		$tmp4162 $tmp4163 $const4 	%argrw{"wrr"}
	add		$tmp4165 $tmp4161 $tmp4162 	%argrw{"wrr"}
	div		$tmp4166 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4165 $tmp4166 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4168 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4169 ___594_yy 	%argrw{"wr"}
	assign		$tmp4170 ___594_zz 	%argrw{"wr"}
	point		$tmp4167 $tmp4168 $tmp4169 $tmp4170 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4167 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4171 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4172 ___600_d $tmp4171 	%argrw{"wrr"}
	if		$tmp4172 7124 7151 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4173 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4173 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4174 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4174 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4175 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp4175 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4176 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4176 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4177 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4177 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4178 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp4178 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4179 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4180 ___600_d $tmp4179 	%argrw{"wrr"}
	if		$tmp4180 7137 7151 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4181 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4181 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4182 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4182 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4183 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4183 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4184 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4184 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4185 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4186 ___600_d $tmp4185 	%argrw{"wrr"}
	if		$tmp4186 7146 7151 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4187 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4187 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4188 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4188 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4189 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4190 ___600_d $tmp4189 	%argrw{"wrr"}
	if		$tmp4190 7151 7151 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4191 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4192 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4193 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp4094 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp4194 $const9 $tmp4094 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp4194 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp4195 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp4195 7335 7335 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 7335 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 7333 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 7333 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 7330 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4198 $tmp3785 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4197 $tmp4198 	%argrw{"wr"}
	assign		___594_xi $tmp4197 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4200 $tmp3785 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4199 $tmp4200 	%argrw{"wr"}
	assign		___594_yi $tmp4199 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4202 $tmp3785 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4201 $tmp4202 	%argrw{"wr"}
	assign		___594_zi $tmp4201 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4204 7181 7183 7328 7330 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4203 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4204 ___594_xx $tmp4203 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4206 7185 7187 7326 7328 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4205 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4206 ___594_yy $tmp4205 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4208 7189 7191 7324 7326 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4207 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4208 ___594_zz $tmp4207 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4209 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4210 ___594_yy 	%argrw{"wr"}
	assign		$tmp4211 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4209 $tmp4210 $tmp4211 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 7208 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4214 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4215 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4216 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4213 $tmp4214 $tmp4215 $tmp4216 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4213 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4218 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4219 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4220 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4217 $tmp4218 $tmp4219 $tmp4220 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4217 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4212 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4212 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4221 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3785 $tmp4221 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 7275 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4222 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4222 7216 7216 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4223 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4223 7219 7219 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4224 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4224 7229 7229 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4226 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4225 $tmp4226 	%argrw{"wr"}
	compref		$tmp4228 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4227 $tmp4228 	%argrw{"wr"}
	add		$tmp4229 $tmp4225 $tmp4227 	%argrw{"wrr"}
	compref		$tmp4231 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4230 $tmp4231 	%argrw{"wr"}
	add		___592_result $tmp4229 $tmp4230 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4232 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4232 7239 7239 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4234 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4233 $tmp4234 	%argrw{"wr"}
	compref		$tmp4237 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4236 $tmp4237 	%argrw{"wr"}
	compref		$tmp4239 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4238 $tmp4239 	%argrw{"wr"}
	max		$tmp4235 $tmp4236 $tmp4238 	%argrw{"wrr"}
	max		___592_result $tmp4233 $tmp4235 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4240 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4240 7252 7252 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4243 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4242 $tmp4243 	%argrw{"wr"}
	sqrt		$tmp4241 $tmp4242 	%argrw{"wr"}
	compref		$tmp4246 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4245 $tmp4246 	%argrw{"wr"}
	sqrt		$tmp4244 $tmp4245 	%argrw{"wr"}
	add		$tmp4247 $tmp4241 $tmp4244 	%argrw{"wrr"}
	compref		$tmp4250 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4249 $tmp4250 	%argrw{"wr"}
	sqrt		$tmp4248 $tmp4249 	%argrw{"wr"}
	add		___592_result $tmp4247 $tmp4248 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4251 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4251 7259 7259 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4254 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4255 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4253 $tmp4254 $tmp4255 	%argrw{"wrr"}
	sqrt		$tmp4252 $tmp4253 	%argrw{"wr"}
	sqrt		___592_result $tmp4252 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4256 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4256 7274 7274 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4259 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4258 $tmp4259 	%argrw{"wr"}
	pow		$tmp4257 $tmp4258 $const4 	%argrw{"wrr"}
	compref		$tmp4262 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4261 $tmp4262 	%argrw{"wr"}
	pow		$tmp4260 $tmp4261 $const4 	%argrw{"wrr"}
	add		$tmp4263 $tmp4257 $tmp4260 	%argrw{"wrr"}
	compref		$tmp4266 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4265 $tmp4266 	%argrw{"wr"}
	pow		$tmp4264 $tmp4265 $const4 	%argrw{"wrr"}
	add		$tmp4267 $tmp4263 $tmp4264 	%argrw{"wrr"}
	div		$tmp4268 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4267 $tmp4268 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4270 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4271 ___594_yy 	%argrw{"wr"}
	assign		$tmp4272 ___594_zz 	%argrw{"wr"}
	point		$tmp4269 $tmp4270 $tmp4271 $tmp4272 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4269 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4273 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4274 ___600_d $tmp4273 	%argrw{"wrr"}
	if		$tmp4274 7297 7324 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4275 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4275 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4276 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp4276 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4277 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp4277 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4278 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4278 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4279 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp4279 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4280 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp4280 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4281 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4282 ___600_d $tmp4281 	%argrw{"wrr"}
	if		$tmp4282 7310 7324 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4283 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4283 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4284 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp4284 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4285 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4285 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4286 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp4286 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4287 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4288 ___600_d $tmp4287 	%argrw{"wrr"}
	if		$tmp4288 7319 7324 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4289 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4289 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4290 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4290 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4291 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4292 ___600_d $tmp4291 	%argrw{"wrr"}
	if		$tmp4292 7324 7324 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4293 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4294 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4295 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp4296 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp4297 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp4196 $tmp4296 $tmp4297 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp4298 $const9 $tmp4196 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp4298 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp4299 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp4299 7517 7517 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 7517 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 7515 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 7509 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 7509 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 7506 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4303 $tmp3785 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4302 $tmp4303 	%argrw{"wr"}
	assign		___594_xi $tmp4302 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4305 $tmp3785 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4304 $tmp4305 	%argrw{"wr"}
	assign		___594_yi $tmp4304 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4307 $tmp3785 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4306 $tmp4307 	%argrw{"wr"}
	assign		___594_zi $tmp4306 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4309 7357 7359 7504 7506 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4308 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4309 ___594_xx $tmp4308 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4311 7361 7363 7502 7504 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4310 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4311 ___594_yy $tmp4310 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4313 7365 7367 7500 7502 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4312 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4313 ___594_zz $tmp4312 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4314 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4315 ___594_yy 	%argrw{"wr"}
	assign		$tmp4316 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4314 $tmp4315 $tmp4316 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 7384 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4319 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4320 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4321 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4318 $tmp4319 $tmp4320 $tmp4321 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4318 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4323 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4324 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4325 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4322 $tmp4323 $tmp4324 $tmp4325 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4322 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4317 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4317 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4326 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp3785 $tmp4326 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 7451 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4327 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4327 7392 7392 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4328 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4328 7395 7395 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4329 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4329 7405 7405 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4331 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4330 $tmp4331 	%argrw{"wr"}
	compref		$tmp4333 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4332 $tmp4333 	%argrw{"wr"}
	add		$tmp4334 $tmp4330 $tmp4332 	%argrw{"wrr"}
	compref		$tmp4336 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4335 $tmp4336 	%argrw{"wr"}
	add		___592_result $tmp4334 $tmp4335 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4337 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4337 7415 7415 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4339 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4338 $tmp4339 	%argrw{"wr"}
	compref		$tmp4342 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4341 $tmp4342 	%argrw{"wr"}
	compref		$tmp4344 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4343 $tmp4344 	%argrw{"wr"}
	max		$tmp4340 $tmp4341 $tmp4343 	%argrw{"wrr"}
	max		___592_result $tmp4338 $tmp4340 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4345 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4345 7428 7428 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4348 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4347 $tmp4348 	%argrw{"wr"}
	sqrt		$tmp4346 $tmp4347 	%argrw{"wr"}
	compref		$tmp4351 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4350 $tmp4351 	%argrw{"wr"}
	sqrt		$tmp4349 $tmp4350 	%argrw{"wr"}
	add		$tmp4352 $tmp4346 $tmp4349 	%argrw{"wrr"}
	compref		$tmp4355 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4354 $tmp4355 	%argrw{"wr"}
	sqrt		$tmp4353 $tmp4354 	%argrw{"wr"}
	add		___592_result $tmp4352 $tmp4353 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4356 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4356 7435 7435 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4359 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4360 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4358 $tmp4359 $tmp4360 	%argrw{"wrr"}
	sqrt		$tmp4357 $tmp4358 	%argrw{"wr"}
	sqrt		___592_result $tmp4357 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4361 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4361 7450 7450 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4364 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4363 $tmp4364 	%argrw{"wr"}
	pow		$tmp4362 $tmp4363 $const4 	%argrw{"wrr"}
	compref		$tmp4367 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4366 $tmp4367 	%argrw{"wr"}
	pow		$tmp4365 $tmp4366 $const4 	%argrw{"wrr"}
	add		$tmp4368 $tmp4362 $tmp4365 	%argrw{"wrr"}
	compref		$tmp4371 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4370 $tmp4371 	%argrw{"wr"}
	pow		$tmp4369 $tmp4370 $const4 	%argrw{"wrr"}
	add		$tmp4372 $tmp4368 $tmp4369 	%argrw{"wrr"}
	div		$tmp4373 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4372 $tmp4373 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4375 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4376 ___594_yy 	%argrw{"wr"}
	assign		$tmp4377 ___594_zz 	%argrw{"wr"}
	point		$tmp4374 $tmp4375 $tmp4376 $tmp4377 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4374 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4378 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4379 ___600_d $tmp4378 	%argrw{"wrr"}
	if		$tmp4379 7473 7500 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4380 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4380 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4381 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp4381 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4382 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp4382 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4383 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4383 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4384 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp4384 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4385 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp4385 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4386 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4387 ___600_d $tmp4386 	%argrw{"wrr"}
	if		$tmp4387 7486 7500 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4388 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4388 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4389 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp4389 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4390 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4390 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4391 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp4391 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4392 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4393 ___600_d $tmp4392 	%argrw{"wrr"}
	if		$tmp4393 7495 7500 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4394 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4394 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4395 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4395 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4396 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4397 ___600_d $tmp4396 	%argrw{"wrr"}
	if		$tmp4397 7500 7500 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4398 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4399 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4400 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp4401 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp4402 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp4301 $tmp4401 $tmp4402 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp4301 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp4403 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp4403 7513 7514 	%argrw{"r"}
	assign		$tmp4300 $const26 	%argrw{"wr"}
	assign		$tmp4300 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp4404 $const9 $tmp4300 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp4404 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp4405 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp4405 7520 7520 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp3785 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___628_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:241
# 		if (hard)
	if		___631_hard 7525 7525 	%line{241} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:242
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp4406 $const9 ___628_t 	%line{242} %argrw{"wrr"}
	sub		$tmp4407 $tmp4406 $const26 	%argrw{"wrr"}
	fabs		___628_t $tmp4407 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:244
# 		float sum2 = sum + t*amp;
	mul		$tmp4408 ___628_t ___625_amp 	%line{244} %argrw{"wrr"}
	add		___628_sum2 ___625_sum $tmp4408 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:246
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp4409 $const14 ___625_n 	%line{246} %argrw{"wrr"}
	assign		$tmp4410 $tmp4409 	%argrw{"wr"}
	add		$tmp4411 ___625_n $const14 	%argrw{"wrr"}
	shl		$tmp4412 $const14 $tmp4411 	%argrw{"wrr"}
	sub		$tmp4413 $tmp4412 $const14 	%argrw{"wrr"}
	assign		$tmp4414 $tmp4413 	%argrw{"wr"}
	div		$tmp4415 $tmp4410 $tmp4414 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp4415 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:247
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp4416 ___625_n $const14 	%line{247} %argrw{"wrr"}
	shl		$tmp4417 $const14 $tmp4416 	%argrw{"wrr"}
	assign		$tmp4418 $tmp4417 	%argrw{"wr"}
	add		$tmp4419 ___625_n $const15 	%argrw{"wrr"}
	shl		$tmp4420 $const14 $tmp4419 	%argrw{"wrr"}
	sub		$tmp4421 $tmp4420 $const14 	%argrw{"wrr"}
	assign		$tmp4422 $tmp4421 	%argrw{"wr"}
	div		$tmp4423 $tmp4418 $tmp4422 	%argrw{"wrr"}
	mul		___628_sum2 ___628_sum2 $tmp4423 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:249
# 		return (1.0 - rmd)*sum + rmd*sum2;
	sub		$tmp4424 $const26 ___625_rmd 	%line{249} %argrw{"wrr"}
	mul		$tmp4425 $tmp4424 ___625_sum 	%argrw{"wrr"}
	mul		$tmp4426 ___625_rmd ___628_sum2 	%argrw{"wrr"}
	add		$tmp3151 $tmp4425 $tmp4426 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:252
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp4427 $const14 ___625_n 	%line{252} %argrw{"wrr"}
	assign		$tmp4428 $tmp4427 	%argrw{"wr"}
	add		$tmp4429 ___625_n $const14 	%argrw{"wrr"}
	shl		$tmp4430 $const14 $tmp4429 	%argrw{"wrr"}
	sub		$tmp4431 $tmp4430 $const14 	%argrw{"wrr"}
	assign		$tmp4432 $tmp4431 	%argrw{"wr"}
	div		$tmp4433 $tmp4428 $tmp4432 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp4433 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:253
# 		return sum;
	assign		$tmp3151 ___625_sum 	%line{253} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_noise_texture.osl:40
# 		noise_turbulence(point(p[1], p[2], p[0]), basis, detail, hard));
	compref		$tmp4436 $tmp1 $const14 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{40} %argrw{"wrr"}
	compref		$tmp4437 $tmp1 $const15 	%argrw{"wrr"}
	compref		$tmp4438 $tmp1 $const3 	%argrw{"wrr"}
	point		$tmp4435 $tmp4436 $tmp4437 $tmp4438 	%argrw{"wrrr"}
	functioncall	$const45 9744 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:217
# 
	assign		___625_fscale $const26 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{217} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:218
# /* Soft/Hard Noise */
	assign		___625_amp $const26 	%line{218} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:219
# 
	assign		___625_sum $const4 	%line{219} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:222
# 	float t = noise_basis(p, basis);
	functioncall	$const47 7570 	%line{222} %argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp4439 Detail $const46 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		___625_octaves $tmp4439 $const4 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:223
# 
	assign		___625_n ___625_octaves 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{223} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 					pa[2] = pa[1];
	for		$tmp4440 7573 7574 8641 8643 	%line{225} %argrw{"r"}
	assign		___625_i $const3 	%argrw{"wr"}
	le		$tmp4440 ___625_i ___625_n 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:226
# 					pa[1] = pa[0];
	mul		$tmp4441 ___625_fscale $tmp4435 	%line{226} %argrw{"wrr"}
	functioncall	$const6 8633 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const4 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp4442 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp4442 7580 7580 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp4441 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp4443 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp4443 7753 7753 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const8 7753 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 7751 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 7751 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 7750 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4446 $tmp4441 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4445 $tmp4446 	%argrw{"wr"}
	assign		___594_xi $tmp4445 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4448 $tmp4441 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4447 $tmp4448 	%argrw{"wr"}
	assign		___594_yi $tmp4447 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4450 $tmp4441 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4449 $tmp4450 	%argrw{"wr"}
	assign		___594_zi $tmp4449 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4452 7601 7603 7748 7750 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4451 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4452 ___594_xx $tmp4451 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4454 7605 7607 7746 7748 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4453 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4454 ___594_yy $tmp4453 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4456 7609 7611 7744 7746 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4455 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4456 ___594_zz $tmp4455 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4457 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4458 ___594_yy 	%argrw{"wr"}
	assign		$tmp4459 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4457 $tmp4458 $tmp4459 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 7628 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4462 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4463 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4464 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4461 $tmp4462 $tmp4463 $tmp4464 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4461 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4466 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4467 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4468 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4465 $tmp4466 $tmp4467 $tmp4468 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4465 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4460 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4460 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4469 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp4441 $tmp4469 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 7695 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4470 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4470 7636 7636 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4471 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4471 7639 7639 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4472 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4472 7649 7649 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4474 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4473 $tmp4474 	%argrw{"wr"}
	compref		$tmp4476 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4475 $tmp4476 	%argrw{"wr"}
	add		$tmp4477 $tmp4473 $tmp4475 	%argrw{"wrr"}
	compref		$tmp4479 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4478 $tmp4479 	%argrw{"wr"}
	add		___592_result $tmp4477 $tmp4478 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4480 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4480 7659 7659 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4482 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4481 $tmp4482 	%argrw{"wr"}
	compref		$tmp4485 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4484 $tmp4485 	%argrw{"wr"}
	compref		$tmp4487 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4486 $tmp4487 	%argrw{"wr"}
	max		$tmp4483 $tmp4484 $tmp4486 	%argrw{"wrr"}
	max		___592_result $tmp4481 $tmp4483 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4488 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4488 7672 7672 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4491 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4490 $tmp4491 	%argrw{"wr"}
	sqrt		$tmp4489 $tmp4490 	%argrw{"wr"}
	compref		$tmp4494 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4493 $tmp4494 	%argrw{"wr"}
	sqrt		$tmp4492 $tmp4493 	%argrw{"wr"}
	add		$tmp4495 $tmp4489 $tmp4492 	%argrw{"wrr"}
	compref		$tmp4498 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4497 $tmp4498 	%argrw{"wr"}
	sqrt		$tmp4496 $tmp4497 	%argrw{"wr"}
	add		___592_result $tmp4495 $tmp4496 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4499 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4499 7679 7679 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4502 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4503 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4501 $tmp4502 $tmp4503 	%argrw{"wrr"}
	sqrt		$tmp4500 $tmp4501 	%argrw{"wr"}
	sqrt		___592_result $tmp4500 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4504 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4504 7694 7694 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4507 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4506 $tmp4507 	%argrw{"wr"}
	pow		$tmp4505 $tmp4506 $const4 	%argrw{"wrr"}
	compref		$tmp4510 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4509 $tmp4510 	%argrw{"wr"}
	pow		$tmp4508 $tmp4509 $const4 	%argrw{"wrr"}
	add		$tmp4511 $tmp4505 $tmp4508 	%argrw{"wrr"}
	compref		$tmp4514 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4513 $tmp4514 	%argrw{"wr"}
	pow		$tmp4512 $tmp4513 $const4 	%argrw{"wrr"}
	add		$tmp4515 $tmp4511 $tmp4512 	%argrw{"wrr"}
	div		$tmp4516 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4515 $tmp4516 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4518 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4519 ___594_yy 	%argrw{"wr"}
	assign		$tmp4520 ___594_zz 	%argrw{"wr"}
	point		$tmp4517 $tmp4518 $tmp4519 $tmp4520 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4517 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4521 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4522 ___600_d $tmp4521 	%argrw{"wrr"}
	if		$tmp4522 7717 7744 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4523 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4523 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4524 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4524 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4525 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp4525 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4526 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4526 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4527 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4527 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4528 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp4528 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4529 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4530 ___600_d $tmp4529 	%argrw{"wrr"}
	if		$tmp4530 7730 7744 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4531 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4531 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4532 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4532 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4533 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4533 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4534 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4534 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4535 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4536 ___600_d $tmp4535 	%argrw{"wrr"}
	if		$tmp4536 7739 7744 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4537 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4537 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4538 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4538 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4539 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4540 ___600_d $tmp4539 	%argrw{"wrr"}
	if		$tmp4540 7744 7744 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4541 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4542 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4543 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp4444 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp4544 $const9 $tmp4444 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp4544 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp4545 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp4545 7926 7926 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 7926 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 7924 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 7924 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 7923 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4548 $tmp4441 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4547 $tmp4548 	%argrw{"wr"}
	assign		___594_xi $tmp4547 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4550 $tmp4441 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4549 $tmp4550 	%argrw{"wr"}
	assign		___594_yi $tmp4549 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4552 $tmp4441 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4551 $tmp4552 	%argrw{"wr"}
	assign		___594_zi $tmp4551 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4554 7774 7776 7921 7923 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4553 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4554 ___594_xx $tmp4553 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4556 7778 7780 7919 7921 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4555 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4556 ___594_yy $tmp4555 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4558 7782 7784 7917 7919 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4557 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4558 ___594_zz $tmp4557 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4559 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4560 ___594_yy 	%argrw{"wr"}
	assign		$tmp4561 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4559 $tmp4560 $tmp4561 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 7801 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4564 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4565 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4566 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4563 $tmp4564 $tmp4565 $tmp4566 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4563 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4568 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4569 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4570 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4567 $tmp4568 $tmp4569 $tmp4570 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4567 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4562 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4562 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4571 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp4441 $tmp4571 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 7868 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4572 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4572 7809 7809 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4573 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4573 7812 7812 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4574 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4574 7822 7822 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4576 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4575 $tmp4576 	%argrw{"wr"}
	compref		$tmp4578 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4577 $tmp4578 	%argrw{"wr"}
	add		$tmp4579 $tmp4575 $tmp4577 	%argrw{"wrr"}
	compref		$tmp4581 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4580 $tmp4581 	%argrw{"wr"}
	add		___592_result $tmp4579 $tmp4580 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4582 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4582 7832 7832 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4584 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4583 $tmp4584 	%argrw{"wr"}
	compref		$tmp4587 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4586 $tmp4587 	%argrw{"wr"}
	compref		$tmp4589 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4588 $tmp4589 	%argrw{"wr"}
	max		$tmp4585 $tmp4586 $tmp4588 	%argrw{"wrr"}
	max		___592_result $tmp4583 $tmp4585 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4590 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4590 7845 7845 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4593 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4592 $tmp4593 	%argrw{"wr"}
	sqrt		$tmp4591 $tmp4592 	%argrw{"wr"}
	compref		$tmp4596 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4595 $tmp4596 	%argrw{"wr"}
	sqrt		$tmp4594 $tmp4595 	%argrw{"wr"}
	add		$tmp4597 $tmp4591 $tmp4594 	%argrw{"wrr"}
	compref		$tmp4600 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4599 $tmp4600 	%argrw{"wr"}
	sqrt		$tmp4598 $tmp4599 	%argrw{"wr"}
	add		___592_result $tmp4597 $tmp4598 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4601 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4601 7852 7852 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4604 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4605 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4603 $tmp4604 $tmp4605 	%argrw{"wrr"}
	sqrt		$tmp4602 $tmp4603 	%argrw{"wr"}
	sqrt		___592_result $tmp4602 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4606 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4606 7867 7867 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4609 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4608 $tmp4609 	%argrw{"wr"}
	pow		$tmp4607 $tmp4608 $const4 	%argrw{"wrr"}
	compref		$tmp4612 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4611 $tmp4612 	%argrw{"wr"}
	pow		$tmp4610 $tmp4611 $const4 	%argrw{"wrr"}
	add		$tmp4613 $tmp4607 $tmp4610 	%argrw{"wrr"}
	compref		$tmp4616 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4615 $tmp4616 	%argrw{"wr"}
	pow		$tmp4614 $tmp4615 $const4 	%argrw{"wrr"}
	add		$tmp4617 $tmp4613 $tmp4614 	%argrw{"wrr"}
	div		$tmp4618 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4617 $tmp4618 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4620 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4621 ___594_yy 	%argrw{"wr"}
	assign		$tmp4622 ___594_zz 	%argrw{"wr"}
	point		$tmp4619 $tmp4620 $tmp4621 $tmp4622 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4619 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4623 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4624 ___600_d $tmp4623 	%argrw{"wrr"}
	if		$tmp4624 7890 7917 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4625 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4625 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4626 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4626 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4627 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp4627 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4628 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4628 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4629 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4629 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4630 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp4630 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4631 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4632 ___600_d $tmp4631 	%argrw{"wrr"}
	if		$tmp4632 7903 7917 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4633 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4633 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4634 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4634 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4635 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4635 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4636 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4636 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4637 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4638 ___600_d $tmp4637 	%argrw{"wrr"}
	if		$tmp4638 7912 7917 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4639 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4639 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4640 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4640 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4641 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4642 ___600_d $tmp4641 	%argrw{"wrr"}
	if		$tmp4642 7917 7917 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4643 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4644 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4645 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp4546 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp4646 $const9 $tmp4546 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp4646 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp4647 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp4647 8099 8099 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 8099 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 8097 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 8097 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 8096 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4650 $tmp4441 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4649 $tmp4650 	%argrw{"wr"}
	assign		___594_xi $tmp4649 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4652 $tmp4441 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4651 $tmp4652 	%argrw{"wr"}
	assign		___594_yi $tmp4651 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4654 $tmp4441 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4653 $tmp4654 	%argrw{"wr"}
	assign		___594_zi $tmp4653 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4656 7947 7949 8094 8096 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4655 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4656 ___594_xx $tmp4655 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4658 7951 7953 8092 8094 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4657 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4658 ___594_yy $tmp4657 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4660 7955 7957 8090 8092 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4659 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4660 ___594_zz $tmp4659 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4661 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4662 ___594_yy 	%argrw{"wr"}
	assign		$tmp4663 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4661 $tmp4662 $tmp4663 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 7974 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4666 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4667 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4668 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4665 $tmp4666 $tmp4667 $tmp4668 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4665 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4670 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4671 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4672 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4669 $tmp4670 $tmp4671 $tmp4672 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4669 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4664 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4664 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4673 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp4441 $tmp4673 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 8041 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4674 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4674 7982 7982 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4675 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4675 7985 7985 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4676 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4676 7995 7995 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4678 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4677 $tmp4678 	%argrw{"wr"}
	compref		$tmp4680 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4679 $tmp4680 	%argrw{"wr"}
	add		$tmp4681 $tmp4677 $tmp4679 	%argrw{"wrr"}
	compref		$tmp4683 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4682 $tmp4683 	%argrw{"wr"}
	add		___592_result $tmp4681 $tmp4682 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4684 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4684 8005 8005 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4686 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4685 $tmp4686 	%argrw{"wr"}
	compref		$tmp4689 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4688 $tmp4689 	%argrw{"wr"}
	compref		$tmp4691 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4690 $tmp4691 	%argrw{"wr"}
	max		$tmp4687 $tmp4688 $tmp4690 	%argrw{"wrr"}
	max		___592_result $tmp4685 $tmp4687 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4692 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4692 8018 8018 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4695 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4694 $tmp4695 	%argrw{"wr"}
	sqrt		$tmp4693 $tmp4694 	%argrw{"wr"}
	compref		$tmp4698 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4697 $tmp4698 	%argrw{"wr"}
	sqrt		$tmp4696 $tmp4697 	%argrw{"wr"}
	add		$tmp4699 $tmp4693 $tmp4696 	%argrw{"wrr"}
	compref		$tmp4702 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4701 $tmp4702 	%argrw{"wr"}
	sqrt		$tmp4700 $tmp4701 	%argrw{"wr"}
	add		___592_result $tmp4699 $tmp4700 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4703 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4703 8025 8025 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4706 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4707 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4705 $tmp4706 $tmp4707 	%argrw{"wrr"}
	sqrt		$tmp4704 $tmp4705 	%argrw{"wr"}
	sqrt		___592_result $tmp4704 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4708 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4708 8040 8040 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4711 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4710 $tmp4711 	%argrw{"wr"}
	pow		$tmp4709 $tmp4710 $const4 	%argrw{"wrr"}
	compref		$tmp4714 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4713 $tmp4714 	%argrw{"wr"}
	pow		$tmp4712 $tmp4713 $const4 	%argrw{"wrr"}
	add		$tmp4715 $tmp4709 $tmp4712 	%argrw{"wrr"}
	compref		$tmp4718 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4717 $tmp4718 	%argrw{"wr"}
	pow		$tmp4716 $tmp4717 $const4 	%argrw{"wrr"}
	add		$tmp4719 $tmp4715 $tmp4716 	%argrw{"wrr"}
	div		$tmp4720 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4719 $tmp4720 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4722 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4723 ___594_yy 	%argrw{"wr"}
	assign		$tmp4724 ___594_zz 	%argrw{"wr"}
	point		$tmp4721 $tmp4722 $tmp4723 $tmp4724 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4721 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4725 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4726 ___600_d $tmp4725 	%argrw{"wrr"}
	if		$tmp4726 8063 8090 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4727 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4727 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4728 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4728 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4729 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp4729 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4730 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4730 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4731 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4731 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4732 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp4732 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4733 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4734 ___600_d $tmp4733 	%argrw{"wrr"}
	if		$tmp4734 8076 8090 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4735 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4735 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4736 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4736 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4737 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4737 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4738 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4738 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4739 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4740 ___600_d $tmp4739 	%argrw{"wrr"}
	if		$tmp4740 8085 8090 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4741 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4741 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4742 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4742 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4743 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4744 ___600_d $tmp4743 	%argrw{"wrr"}
	if		$tmp4744 8090 8090 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4745 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4746 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4747 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp4648 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp4748 $const9 $tmp4648 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp4748 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp4749 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp4749 8272 8272 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 8272 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 8270 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 8270 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 8269 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4752 $tmp4441 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4751 $tmp4752 	%argrw{"wr"}
	assign		___594_xi $tmp4751 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4754 $tmp4441 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4753 $tmp4754 	%argrw{"wr"}
	assign		___594_yi $tmp4753 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4756 $tmp4441 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4755 $tmp4756 	%argrw{"wr"}
	assign		___594_zi $tmp4755 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4758 8120 8122 8267 8269 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4757 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4758 ___594_xx $tmp4757 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4760 8124 8126 8265 8267 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4759 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4760 ___594_yy $tmp4759 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4762 8128 8130 8263 8265 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4761 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4762 ___594_zz $tmp4761 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4763 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4764 ___594_yy 	%argrw{"wr"}
	assign		$tmp4765 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4763 $tmp4764 $tmp4765 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 8147 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4768 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4769 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4770 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4767 $tmp4768 $tmp4769 $tmp4770 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4767 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4772 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4773 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4774 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4771 $tmp4772 $tmp4773 $tmp4774 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4771 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4766 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4766 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4775 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp4441 $tmp4775 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 8214 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4776 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4776 8155 8155 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4777 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4777 8158 8158 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4778 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4778 8168 8168 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4780 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4779 $tmp4780 	%argrw{"wr"}
	compref		$tmp4782 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4781 $tmp4782 	%argrw{"wr"}
	add		$tmp4783 $tmp4779 $tmp4781 	%argrw{"wrr"}
	compref		$tmp4785 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4784 $tmp4785 	%argrw{"wr"}
	add		___592_result $tmp4783 $tmp4784 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4786 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4786 8178 8178 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4788 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4787 $tmp4788 	%argrw{"wr"}
	compref		$tmp4791 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4790 $tmp4791 	%argrw{"wr"}
	compref		$tmp4793 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4792 $tmp4793 	%argrw{"wr"}
	max		$tmp4789 $tmp4790 $tmp4792 	%argrw{"wrr"}
	max		___592_result $tmp4787 $tmp4789 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4794 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4794 8191 8191 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4797 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4796 $tmp4797 	%argrw{"wr"}
	sqrt		$tmp4795 $tmp4796 	%argrw{"wr"}
	compref		$tmp4800 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4799 $tmp4800 	%argrw{"wr"}
	sqrt		$tmp4798 $tmp4799 	%argrw{"wr"}
	add		$tmp4801 $tmp4795 $tmp4798 	%argrw{"wrr"}
	compref		$tmp4804 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4803 $tmp4804 	%argrw{"wr"}
	sqrt		$tmp4802 $tmp4803 	%argrw{"wr"}
	add		___592_result $tmp4801 $tmp4802 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4805 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4805 8198 8198 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4808 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4809 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4807 $tmp4808 $tmp4809 	%argrw{"wrr"}
	sqrt		$tmp4806 $tmp4807 	%argrw{"wr"}
	sqrt		___592_result $tmp4806 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4810 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4810 8213 8213 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4813 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4812 $tmp4813 	%argrw{"wr"}
	pow		$tmp4811 $tmp4812 $const4 	%argrw{"wrr"}
	compref		$tmp4816 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4815 $tmp4816 	%argrw{"wr"}
	pow		$tmp4814 $tmp4815 $const4 	%argrw{"wrr"}
	add		$tmp4817 $tmp4811 $tmp4814 	%argrw{"wrr"}
	compref		$tmp4820 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4819 $tmp4820 	%argrw{"wr"}
	pow		$tmp4818 $tmp4819 $const4 	%argrw{"wrr"}
	add		$tmp4821 $tmp4817 $tmp4818 	%argrw{"wrr"}
	div		$tmp4822 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4821 $tmp4822 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4824 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4825 ___594_yy 	%argrw{"wr"}
	assign		$tmp4826 ___594_zz 	%argrw{"wr"}
	point		$tmp4823 $tmp4824 $tmp4825 $tmp4826 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4823 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4827 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4828 ___600_d $tmp4827 	%argrw{"wrr"}
	if		$tmp4828 8236 8263 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4829 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4829 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4830 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4830 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4831 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp4831 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4832 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4832 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4833 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4833 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4834 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp4834 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4835 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4836 ___600_d $tmp4835 	%argrw{"wrr"}
	if		$tmp4836 8249 8263 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4837 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4837 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4838 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp4838 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4839 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4839 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4840 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp4840 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4841 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4842 ___600_d $tmp4841 	%argrw{"wrr"}
	if		$tmp4842 8258 8263 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4843 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp4843 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4844 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp4844 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4845 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4846 ___600_d $tmp4845 	%argrw{"wrr"}
	if		$tmp4846 8263 8263 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4847 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4848 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4849 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp4750 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp4850 $const9 $tmp4750 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp4850 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp4851 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp4851 8447 8447 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 8447 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 8445 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 8445 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 8442 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4854 $tmp4441 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4853 $tmp4854 	%argrw{"wr"}
	assign		___594_xi $tmp4853 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4856 $tmp4441 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4855 $tmp4856 	%argrw{"wr"}
	assign		___594_yi $tmp4855 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4858 $tmp4441 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4857 $tmp4858 	%argrw{"wr"}
	assign		___594_zi $tmp4857 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4860 8293 8295 8440 8442 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4859 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4860 ___594_xx $tmp4859 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4862 8297 8299 8438 8440 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4861 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4862 ___594_yy $tmp4861 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4864 8301 8303 8436 8438 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4863 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4864 ___594_zz $tmp4863 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4865 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4866 ___594_yy 	%argrw{"wr"}
	assign		$tmp4867 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4865 $tmp4866 $tmp4867 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 8320 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4870 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4871 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4872 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4869 $tmp4870 $tmp4871 $tmp4872 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4869 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4874 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4875 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4876 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4873 $tmp4874 $tmp4875 $tmp4876 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4873 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4868 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4868 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4877 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp4441 $tmp4877 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 8387 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4878 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4878 8328 8328 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4879 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4879 8331 8331 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4880 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4880 8341 8341 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4882 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4881 $tmp4882 	%argrw{"wr"}
	compref		$tmp4884 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4883 $tmp4884 	%argrw{"wr"}
	add		$tmp4885 $tmp4881 $tmp4883 	%argrw{"wrr"}
	compref		$tmp4887 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4886 $tmp4887 	%argrw{"wr"}
	add		___592_result $tmp4885 $tmp4886 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4888 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4888 8351 8351 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4890 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4889 $tmp4890 	%argrw{"wr"}
	compref		$tmp4893 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4892 $tmp4893 	%argrw{"wr"}
	compref		$tmp4895 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4894 $tmp4895 	%argrw{"wr"}
	max		$tmp4891 $tmp4892 $tmp4894 	%argrw{"wrr"}
	max		___592_result $tmp4889 $tmp4891 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp4896 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp4896 8364 8364 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp4899 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp4898 $tmp4899 	%argrw{"wr"}
	sqrt		$tmp4897 $tmp4898 	%argrw{"wr"}
	compref		$tmp4902 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4901 $tmp4902 	%argrw{"wr"}
	sqrt		$tmp4900 $tmp4901 	%argrw{"wr"}
	add		$tmp4903 $tmp4897 $tmp4900 	%argrw{"wrr"}
	compref		$tmp4906 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4905 $tmp4906 	%argrw{"wr"}
	sqrt		$tmp4904 $tmp4905 	%argrw{"wr"}
	add		___592_result $tmp4903 $tmp4904 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp4907 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp4907 8371 8371 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp4910 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp4911 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp4909 $tmp4910 $tmp4911 	%argrw{"wrr"}
	sqrt		$tmp4908 $tmp4909 	%argrw{"wr"}
	sqrt		___592_result $tmp4908 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp4912 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp4912 8386 8386 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp4915 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp4914 $tmp4915 	%argrw{"wr"}
	pow		$tmp4913 $tmp4914 $const4 	%argrw{"wrr"}
	compref		$tmp4918 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4917 $tmp4918 	%argrw{"wr"}
	pow		$tmp4916 $tmp4917 $const4 	%argrw{"wrr"}
	add		$tmp4919 $tmp4913 $tmp4916 	%argrw{"wrr"}
	compref		$tmp4922 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4921 $tmp4922 	%argrw{"wr"}
	pow		$tmp4920 $tmp4921 $const4 	%argrw{"wrr"}
	add		$tmp4923 $tmp4919 $tmp4920 	%argrw{"wrr"}
	div		$tmp4924 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp4923 $tmp4924 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp4926 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp4927 ___594_yy 	%argrw{"wr"}
	assign		$tmp4928 ___594_zz 	%argrw{"wr"}
	point		$tmp4925 $tmp4926 $tmp4927 $tmp4928 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp4925 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp4929 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp4930 ___600_d $tmp4929 	%argrw{"wrr"}
	if		$tmp4930 8409 8436 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp4931 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4931 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp4932 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp4932 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp4933 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp4933 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp4934 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4934 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp4935 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp4935 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp4936 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp4936 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp4937 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp4938 ___600_d $tmp4937 	%argrw{"wrr"}
	if		$tmp4938 8422 8436 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp4939 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4939 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp4940 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp4940 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp4941 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4941 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp4942 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp4942 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp4943 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp4944 ___600_d $tmp4943 	%argrw{"wrr"}
	if		$tmp4944 8431 8436 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp4945 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp4945 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp4946 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp4946 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp4947 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp4948 ___600_d $tmp4947 	%argrw{"wrr"}
	if		$tmp4948 8436 8436 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp4949 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp4950 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp4951 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp4952 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp4953 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp4852 $tmp4952 $tmp4953 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp4954 $const9 $tmp4852 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp4954 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp4955 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp4955 8629 8629 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 8629 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 8627 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 8621 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 8621 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 8618 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp4959 $tmp4441 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp4958 $tmp4959 	%argrw{"wr"}
	assign		___594_xi $tmp4958 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp4961 $tmp4441 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp4960 $tmp4961 	%argrw{"wr"}
	assign		___594_yi $tmp4960 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp4963 $tmp4441 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp4962 $tmp4963 	%argrw{"wr"}
	assign		___594_zi $tmp4962 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp4965 8469 8471 8616 8618 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp4964 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp4965 ___594_xx $tmp4964 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp4967 8473 8475 8614 8616 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp4966 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp4967 ___594_yy $tmp4966 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp4969 8477 8479 8612 8614 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp4968 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp4969 ___594_zz $tmp4968 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp4970 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp4971 ___594_yy 	%argrw{"wr"}
	assign		$tmp4972 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp4970 $tmp4971 $tmp4972 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 8496 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp4975 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp4976 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp4977 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp4974 $tmp4975 $tmp4976 $tmp4977 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp4974 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp4979 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp4980 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp4981 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp4978 $tmp4979 $tmp4980 $tmp4981 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp4978 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp4973 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp4973 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp4982 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp4441 $tmp4982 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 8563 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp4983 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp4983 8504 8504 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp4984 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp4984 8507 8507 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp4985 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp4985 8517 8517 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp4987 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp4986 $tmp4987 	%argrw{"wr"}
	compref		$tmp4989 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4988 $tmp4989 	%argrw{"wr"}
	add		$tmp4990 $tmp4986 $tmp4988 	%argrw{"wrr"}
	compref		$tmp4992 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4991 $tmp4992 	%argrw{"wr"}
	add		___592_result $tmp4990 $tmp4991 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp4993 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp4993 8527 8527 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp4995 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp4994 $tmp4995 	%argrw{"wr"}
	compref		$tmp4998 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp4997 $tmp4998 	%argrw{"wr"}
	compref		$tmp5000 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp4999 $tmp5000 	%argrw{"wr"}
	max		$tmp4996 $tmp4997 $tmp4999 	%argrw{"wrr"}
	max		___592_result $tmp4994 $tmp4996 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp5001 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp5001 8540 8540 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp5004 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp5003 $tmp5004 	%argrw{"wr"}
	sqrt		$tmp5002 $tmp5003 	%argrw{"wr"}
	compref		$tmp5007 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5006 $tmp5007 	%argrw{"wr"}
	sqrt		$tmp5005 $tmp5006 	%argrw{"wr"}
	add		$tmp5008 $tmp5002 $tmp5005 	%argrw{"wrr"}
	compref		$tmp5011 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5010 $tmp5011 	%argrw{"wr"}
	sqrt		$tmp5009 $tmp5010 	%argrw{"wr"}
	add		___592_result $tmp5008 $tmp5009 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp5012 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp5012 8547 8547 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp5015 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp5016 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp5014 $tmp5015 $tmp5016 	%argrw{"wrr"}
	sqrt		$tmp5013 $tmp5014 	%argrw{"wr"}
	sqrt		___592_result $tmp5013 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp5017 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp5017 8562 8562 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp5020 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp5019 $tmp5020 	%argrw{"wr"}
	pow		$tmp5018 $tmp5019 $const4 	%argrw{"wrr"}
	compref		$tmp5023 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5022 $tmp5023 	%argrw{"wr"}
	pow		$tmp5021 $tmp5022 $const4 	%argrw{"wrr"}
	add		$tmp5024 $tmp5018 $tmp5021 	%argrw{"wrr"}
	compref		$tmp5027 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5026 $tmp5027 	%argrw{"wr"}
	pow		$tmp5025 $tmp5026 $const4 	%argrw{"wrr"}
	add		$tmp5028 $tmp5024 $tmp5025 	%argrw{"wrr"}
	div		$tmp5029 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp5028 $tmp5029 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp5031 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp5032 ___594_yy 	%argrw{"wr"}
	assign		$tmp5033 ___594_zz 	%argrw{"wr"}
	point		$tmp5030 $tmp5031 $tmp5032 $tmp5033 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp5030 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp5034 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp5035 ___600_d $tmp5034 	%argrw{"wrr"}
	if		$tmp5035 8585 8612 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp5036 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5036 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp5037 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp5037 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp5038 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp5038 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp5039 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5039 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp5040 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp5040 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp5041 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp5041 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp5042 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp5043 ___600_d $tmp5042 	%argrw{"wrr"}
	if		$tmp5043 8598 8612 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp5044 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5044 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp5045 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp5045 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp5046 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5046 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp5047 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp5047 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp5048 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp5049 ___600_d $tmp5048 	%argrw{"wrr"}
	if		$tmp5049 8607 8612 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp5050 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5050 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp5051 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5051 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp5052 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp5053 ___600_d $tmp5052 	%argrw{"wrr"}
	if		$tmp5053 8612 8612 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp5054 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp5055 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp5056 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp5057 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp5058 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp4957 $tmp5057 $tmp5058 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp4957 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp5059 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp5059 8625 8626 	%argrw{"r"}
	assign		$tmp4956 $const26 	%argrw{"wr"}
	assign		$tmp4956 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp5060 $const9 $tmp4956 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp5060 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp5061 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp5061 8632 8632 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp4441 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___627_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:228
# 		if (hard)
	if		___631_hard 8637 8637 	%line{228} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:229
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp5062 $const9 ___627_t 	%line{229} %argrw{"wrr"}
	sub		$tmp5063 $tmp5062 $const26 	%argrw{"wrr"}
	fabs		___627_t $tmp5063 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:231
# 		sum += t * amp;
	mul		$tmp5064 ___627_t ___625_amp 	%line{231} %argrw{"wrr"}
	add		___625_sum ___625_sum $tmp5064 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:232
# 		amp *= 0.5;
	mul		___625_amp ___625_amp $const48 	%line{232} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:233
# 		fscale *= 2.0;
	mul		___625_fscale ___625_fscale $const9 	%line{233} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 	for (i = 0; i <= n; i++) {
	assign		$tmp5065 ___625_i 	%line{225} %argrw{"wr"}
	add		___625_i ___625_i $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:236
# 	float rmd = octaves - floor(octaves);
	floor		$tmp5066 ___625_octaves 	%line{236} %argrw{"wr"}
	sub		___625_rmd ___625_octaves $tmp5066 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:238
# 	if (rmd != 0.0) {
	neq		$tmp5067 ___625_rmd $const4 	%line{238} %argrw{"wrr"}
	if		$tmp5067 9734 9744 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:239
# 		float t = noise_basis(fscale * p, basis);
	mul		$tmp5068 ___625_fscale $tmp4435 	%line{239} %argrw{"wrr"}
	functioncall	$const6 9706 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const4 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp5069 Basis $const1 	%line{158} %argrw{"wrr"}
	if		$tmp5069 8653 8653 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp5068 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp5070 Basis $const7 	%line{160} %argrw{"wrr"}
	if		$tmp5070 8826 8826 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const8 8826 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const10 8824 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const11 8824 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 8823 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp5073 $tmp5068 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp5072 $tmp5073 	%argrw{"wr"}
	assign		___594_xi $tmp5072 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp5075 $tmp5068 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp5074 $tmp5075 	%argrw{"wr"}
	assign		___594_yi $tmp5074 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp5077 $tmp5068 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp5076 $tmp5077 	%argrw{"wr"}
	assign		___594_zi $tmp5076 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp5079 8674 8676 8821 8823 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp5078 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp5079 ___594_xx $tmp5078 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp5081 8678 8680 8819 8821 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp5080 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp5081 ___594_yy $tmp5080 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp5083 8682 8684 8817 8819 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp5082 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp5083 ___594_zz $tmp5082 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp5084 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp5085 ___594_yy 	%argrw{"wr"}
	assign		$tmp5086 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp5084 $tmp5085 $tmp5086 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 8701 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp5089 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp5090 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp5091 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp5088 $tmp5089 $tmp5090 $tmp5091 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp5088 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp5093 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp5094 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp5095 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp5092 $tmp5093 $tmp5094 $tmp5095 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp5092 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp5087 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp5087 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp5096 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5068 $tmp5096 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 8768 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp5097 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp5097 8709 8709 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp5098 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp5098 8712 8712 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp5099 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp5099 8722 8722 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp5101 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp5100 $tmp5101 	%argrw{"wr"}
	compref		$tmp5103 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5102 $tmp5103 	%argrw{"wr"}
	add		$tmp5104 $tmp5100 $tmp5102 	%argrw{"wrr"}
	compref		$tmp5106 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5105 $tmp5106 	%argrw{"wr"}
	add		___592_result $tmp5104 $tmp5105 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp5107 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp5107 8732 8732 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp5109 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp5108 $tmp5109 	%argrw{"wr"}
	compref		$tmp5112 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5111 $tmp5112 	%argrw{"wr"}
	compref		$tmp5114 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5113 $tmp5114 	%argrw{"wr"}
	max		$tmp5110 $tmp5111 $tmp5113 	%argrw{"wrr"}
	max		___592_result $tmp5108 $tmp5110 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp5115 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp5115 8745 8745 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp5118 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp5117 $tmp5118 	%argrw{"wr"}
	sqrt		$tmp5116 $tmp5117 	%argrw{"wr"}
	compref		$tmp5121 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5120 $tmp5121 	%argrw{"wr"}
	sqrt		$tmp5119 $tmp5120 	%argrw{"wr"}
	add		$tmp5122 $tmp5116 $tmp5119 	%argrw{"wrr"}
	compref		$tmp5125 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5124 $tmp5125 	%argrw{"wr"}
	sqrt		$tmp5123 $tmp5124 	%argrw{"wr"}
	add		___592_result $tmp5122 $tmp5123 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp5126 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp5126 8752 8752 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp5129 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp5130 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp5128 $tmp5129 $tmp5130 	%argrw{"wrr"}
	sqrt		$tmp5127 $tmp5128 	%argrw{"wr"}
	sqrt		___592_result $tmp5127 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp5131 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp5131 8767 8767 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp5134 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp5133 $tmp5134 	%argrw{"wr"}
	pow		$tmp5132 $tmp5133 $const4 	%argrw{"wrr"}
	compref		$tmp5137 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5136 $tmp5137 	%argrw{"wr"}
	pow		$tmp5135 $tmp5136 $const4 	%argrw{"wrr"}
	add		$tmp5138 $tmp5132 $tmp5135 	%argrw{"wrr"}
	compref		$tmp5141 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5140 $tmp5141 	%argrw{"wr"}
	pow		$tmp5139 $tmp5140 $const4 	%argrw{"wrr"}
	add		$tmp5142 $tmp5138 $tmp5139 	%argrw{"wrr"}
	div		$tmp5143 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp5142 $tmp5143 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp5145 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp5146 ___594_yy 	%argrw{"wr"}
	assign		$tmp5147 ___594_zz 	%argrw{"wr"}
	point		$tmp5144 $tmp5145 $tmp5146 $tmp5147 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp5144 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp5148 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp5149 ___600_d $tmp5148 	%argrw{"wrr"}
	if		$tmp5149 8790 8817 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp5150 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5150 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp5151 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5151 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp5152 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp5152 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp5153 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5153 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp5154 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5154 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp5155 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp5155 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp5156 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp5157 ___600_d $tmp5156 	%argrw{"wrr"}
	if		$tmp5157 8803 8817 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp5158 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5158 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp5159 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5159 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp5160 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5160 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp5161 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5161 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp5162 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp5163 ___600_d $tmp5162 	%argrw{"wrr"}
	if		$tmp5163 8812 8817 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp5164 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5164 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp5165 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5165 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp5166 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp5167 ___600_d $tmp5166 	%argrw{"wrr"}
	if		$tmp5167 8817 8817 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp5168 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp5169 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp5170 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp5071 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp5171 $const9 $tmp5071 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp5171 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp5172 Basis $const27 	%line{162} %argrw{"wrr"}
	if		$tmp5172 8999 8999 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const28 8999 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const29 8997 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const11 8997 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 8996 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp5175 $tmp5068 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp5174 $tmp5175 	%argrw{"wr"}
	assign		___594_xi $tmp5174 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp5177 $tmp5068 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp5176 $tmp5177 	%argrw{"wr"}
	assign		___594_yi $tmp5176 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp5179 $tmp5068 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp5178 $tmp5179 	%argrw{"wr"}
	assign		___594_zi $tmp5178 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp5181 8847 8849 8994 8996 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp5180 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp5181 ___594_xx $tmp5180 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp5183 8851 8853 8992 8994 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp5182 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp5183 ___594_yy $tmp5182 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp5185 8855 8857 8990 8992 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp5184 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp5185 ___594_zz $tmp5184 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp5186 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp5187 ___594_yy 	%argrw{"wr"}
	assign		$tmp5188 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp5186 $tmp5187 $tmp5188 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 8874 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp5191 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp5192 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp5193 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp5190 $tmp5191 $tmp5192 $tmp5193 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp5190 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp5195 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp5196 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp5197 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp5194 $tmp5195 $tmp5196 $tmp5197 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp5194 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp5189 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp5189 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp5198 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5068 $tmp5198 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 8941 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp5199 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp5199 8882 8882 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp5200 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp5200 8885 8885 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp5201 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp5201 8895 8895 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp5203 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp5202 $tmp5203 	%argrw{"wr"}
	compref		$tmp5205 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5204 $tmp5205 	%argrw{"wr"}
	add		$tmp5206 $tmp5202 $tmp5204 	%argrw{"wrr"}
	compref		$tmp5208 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5207 $tmp5208 	%argrw{"wr"}
	add		___592_result $tmp5206 $tmp5207 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp5209 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp5209 8905 8905 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp5211 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp5210 $tmp5211 	%argrw{"wr"}
	compref		$tmp5214 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5213 $tmp5214 	%argrw{"wr"}
	compref		$tmp5216 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5215 $tmp5216 	%argrw{"wr"}
	max		$tmp5212 $tmp5213 $tmp5215 	%argrw{"wrr"}
	max		___592_result $tmp5210 $tmp5212 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp5217 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp5217 8918 8918 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp5220 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp5219 $tmp5220 	%argrw{"wr"}
	sqrt		$tmp5218 $tmp5219 	%argrw{"wr"}
	compref		$tmp5223 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5222 $tmp5223 	%argrw{"wr"}
	sqrt		$tmp5221 $tmp5222 	%argrw{"wr"}
	add		$tmp5224 $tmp5218 $tmp5221 	%argrw{"wrr"}
	compref		$tmp5227 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5226 $tmp5227 	%argrw{"wr"}
	sqrt		$tmp5225 $tmp5226 	%argrw{"wr"}
	add		___592_result $tmp5224 $tmp5225 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp5228 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp5228 8925 8925 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp5231 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp5232 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp5230 $tmp5231 $tmp5232 	%argrw{"wrr"}
	sqrt		$tmp5229 $tmp5230 	%argrw{"wr"}
	sqrt		___592_result $tmp5229 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp5233 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp5233 8940 8940 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp5236 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp5235 $tmp5236 	%argrw{"wr"}
	pow		$tmp5234 $tmp5235 $const4 	%argrw{"wrr"}
	compref		$tmp5239 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5238 $tmp5239 	%argrw{"wr"}
	pow		$tmp5237 $tmp5238 $const4 	%argrw{"wrr"}
	add		$tmp5240 $tmp5234 $tmp5237 	%argrw{"wrr"}
	compref		$tmp5243 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5242 $tmp5243 	%argrw{"wr"}
	pow		$tmp5241 $tmp5242 $const4 	%argrw{"wrr"}
	add		$tmp5244 $tmp5240 $tmp5241 	%argrw{"wrr"}
	div		$tmp5245 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp5244 $tmp5245 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp5247 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp5248 ___594_yy 	%argrw{"wr"}
	assign		$tmp5249 ___594_zz 	%argrw{"wr"}
	point		$tmp5246 $tmp5247 $tmp5248 $tmp5249 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp5246 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp5250 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp5251 ___600_d $tmp5250 	%argrw{"wrr"}
	if		$tmp5251 8963 8990 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp5252 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5252 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp5253 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5253 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp5254 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp5254 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp5255 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5255 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp5256 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5256 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp5257 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp5257 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp5258 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp5259 ___600_d $tmp5258 	%argrw{"wrr"}
	if		$tmp5259 8976 8990 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp5260 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5260 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp5261 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5261 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp5262 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5262 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp5263 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5263 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp5264 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp5265 ___600_d $tmp5264 	%argrw{"wrr"}
	if		$tmp5265 8985 8990 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp5266 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5266 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp5267 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5267 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp5268 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp5269 ___600_d $tmp5268 	%argrw{"wrr"}
	if		$tmp5269 8990 8990 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp5270 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp5271 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp5272 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp5173 ___605_da $const14 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp5273 $const9 $tmp5173 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp5273 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp5274 Basis $const30 	%line{164} %argrw{"wrr"}
	if		$tmp5274 9172 9172 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const31 9172 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const32 9170 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const11 9170 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 9169 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp5277 $tmp5068 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp5276 $tmp5277 	%argrw{"wr"}
	assign		___594_xi $tmp5276 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp5279 $tmp5068 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp5278 $tmp5279 	%argrw{"wr"}
	assign		___594_yi $tmp5278 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp5281 $tmp5068 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp5280 $tmp5281 	%argrw{"wr"}
	assign		___594_zi $tmp5280 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp5283 9020 9022 9167 9169 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp5282 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp5283 ___594_xx $tmp5282 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp5285 9024 9026 9165 9167 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp5284 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp5285 ___594_yy $tmp5284 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp5287 9028 9030 9163 9165 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp5286 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp5287 ___594_zz $tmp5286 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp5288 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp5289 ___594_yy 	%argrw{"wr"}
	assign		$tmp5290 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp5288 $tmp5289 $tmp5290 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 9047 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp5293 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp5294 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp5295 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp5292 $tmp5293 $tmp5294 $tmp5295 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp5292 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp5297 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp5298 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp5299 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp5296 $tmp5297 $tmp5298 $tmp5299 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp5296 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp5291 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp5291 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp5300 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5068 $tmp5300 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 9114 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp5301 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp5301 9055 9055 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp5302 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp5302 9058 9058 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp5303 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp5303 9068 9068 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp5305 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp5304 $tmp5305 	%argrw{"wr"}
	compref		$tmp5307 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5306 $tmp5307 	%argrw{"wr"}
	add		$tmp5308 $tmp5304 $tmp5306 	%argrw{"wrr"}
	compref		$tmp5310 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5309 $tmp5310 	%argrw{"wr"}
	add		___592_result $tmp5308 $tmp5309 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp5311 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp5311 9078 9078 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp5313 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp5312 $tmp5313 	%argrw{"wr"}
	compref		$tmp5316 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5315 $tmp5316 	%argrw{"wr"}
	compref		$tmp5318 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5317 $tmp5318 	%argrw{"wr"}
	max		$tmp5314 $tmp5315 $tmp5317 	%argrw{"wrr"}
	max		___592_result $tmp5312 $tmp5314 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp5319 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp5319 9091 9091 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp5322 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp5321 $tmp5322 	%argrw{"wr"}
	sqrt		$tmp5320 $tmp5321 	%argrw{"wr"}
	compref		$tmp5325 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5324 $tmp5325 	%argrw{"wr"}
	sqrt		$tmp5323 $tmp5324 	%argrw{"wr"}
	add		$tmp5326 $tmp5320 $tmp5323 	%argrw{"wrr"}
	compref		$tmp5329 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5328 $tmp5329 	%argrw{"wr"}
	sqrt		$tmp5327 $tmp5328 	%argrw{"wr"}
	add		___592_result $tmp5326 $tmp5327 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp5330 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp5330 9098 9098 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp5333 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp5334 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp5332 $tmp5333 $tmp5334 	%argrw{"wrr"}
	sqrt		$tmp5331 $tmp5332 	%argrw{"wr"}
	sqrt		___592_result $tmp5331 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp5335 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp5335 9113 9113 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp5338 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp5337 $tmp5338 	%argrw{"wr"}
	pow		$tmp5336 $tmp5337 $const4 	%argrw{"wrr"}
	compref		$tmp5341 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5340 $tmp5341 	%argrw{"wr"}
	pow		$tmp5339 $tmp5340 $const4 	%argrw{"wrr"}
	add		$tmp5342 $tmp5336 $tmp5339 	%argrw{"wrr"}
	compref		$tmp5345 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5344 $tmp5345 	%argrw{"wr"}
	pow		$tmp5343 $tmp5344 $const4 	%argrw{"wrr"}
	add		$tmp5346 $tmp5342 $tmp5343 	%argrw{"wrr"}
	div		$tmp5347 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp5346 $tmp5347 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp5349 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp5350 ___594_yy 	%argrw{"wr"}
	assign		$tmp5351 ___594_zz 	%argrw{"wr"}
	point		$tmp5348 $tmp5349 $tmp5350 $tmp5351 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp5348 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp5352 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp5353 ___600_d $tmp5352 	%argrw{"wrr"}
	if		$tmp5353 9136 9163 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp5354 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5354 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp5355 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5355 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp5356 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp5356 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp5357 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5357 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp5358 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5358 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp5359 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp5359 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp5360 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp5361 ___600_d $tmp5360 	%argrw{"wrr"}
	if		$tmp5361 9149 9163 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp5362 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5362 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp5363 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5363 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp5364 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5364 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp5365 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5365 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp5366 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp5367 ___600_d $tmp5366 	%argrw{"wrr"}
	if		$tmp5367 9158 9163 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp5368 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5368 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp5369 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5369 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp5370 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp5371 ___600_d $tmp5370 	%argrw{"wrr"}
	if		$tmp5371 9163 9163 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp5372 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp5373 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp5374 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp5275 ___605_da $const15 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp5375 $const9 $tmp5275 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp5375 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp5376 Basis $const33 	%line{166} %argrw{"wrr"}
	if		$tmp5376 9345 9345 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const34 9345 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const35 9343 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const11 9343 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 9342 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp5379 $tmp5068 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp5378 $tmp5379 	%argrw{"wr"}
	assign		___594_xi $tmp5378 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp5381 $tmp5068 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp5380 $tmp5381 	%argrw{"wr"}
	assign		___594_yi $tmp5380 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp5383 $tmp5068 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp5382 $tmp5383 	%argrw{"wr"}
	assign		___594_zi $tmp5382 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp5385 9193 9195 9340 9342 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp5384 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp5385 ___594_xx $tmp5384 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp5387 9197 9199 9338 9340 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp5386 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp5387 ___594_yy $tmp5386 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp5389 9201 9203 9336 9338 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp5388 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp5389 ___594_zz $tmp5388 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp5390 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp5391 ___594_yy 	%argrw{"wr"}
	assign		$tmp5392 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp5390 $tmp5391 $tmp5392 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 9220 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp5395 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp5396 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp5397 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp5394 $tmp5395 $tmp5396 $tmp5397 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp5394 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp5399 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp5400 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp5401 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp5398 $tmp5399 $tmp5400 $tmp5401 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp5398 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp5393 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp5393 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp5402 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5068 $tmp5402 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 9287 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp5403 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp5403 9228 9228 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp5404 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp5404 9231 9231 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp5405 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp5405 9241 9241 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp5407 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp5406 $tmp5407 	%argrw{"wr"}
	compref		$tmp5409 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5408 $tmp5409 	%argrw{"wr"}
	add		$tmp5410 $tmp5406 $tmp5408 	%argrw{"wrr"}
	compref		$tmp5412 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5411 $tmp5412 	%argrw{"wr"}
	add		___592_result $tmp5410 $tmp5411 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp5413 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp5413 9251 9251 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp5415 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp5414 $tmp5415 	%argrw{"wr"}
	compref		$tmp5418 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5417 $tmp5418 	%argrw{"wr"}
	compref		$tmp5420 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5419 $tmp5420 	%argrw{"wr"}
	max		$tmp5416 $tmp5417 $tmp5419 	%argrw{"wrr"}
	max		___592_result $tmp5414 $tmp5416 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp5421 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp5421 9264 9264 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp5424 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp5423 $tmp5424 	%argrw{"wr"}
	sqrt		$tmp5422 $tmp5423 	%argrw{"wr"}
	compref		$tmp5427 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5426 $tmp5427 	%argrw{"wr"}
	sqrt		$tmp5425 $tmp5426 	%argrw{"wr"}
	add		$tmp5428 $tmp5422 $tmp5425 	%argrw{"wrr"}
	compref		$tmp5431 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5430 $tmp5431 	%argrw{"wr"}
	sqrt		$tmp5429 $tmp5430 	%argrw{"wr"}
	add		___592_result $tmp5428 $tmp5429 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp5432 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp5432 9271 9271 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp5435 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp5436 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp5434 $tmp5435 $tmp5436 	%argrw{"wrr"}
	sqrt		$tmp5433 $tmp5434 	%argrw{"wr"}
	sqrt		___592_result $tmp5433 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp5437 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp5437 9286 9286 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp5440 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp5439 $tmp5440 	%argrw{"wr"}
	pow		$tmp5438 $tmp5439 $const4 	%argrw{"wrr"}
	compref		$tmp5443 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5442 $tmp5443 	%argrw{"wr"}
	pow		$tmp5441 $tmp5442 $const4 	%argrw{"wrr"}
	add		$tmp5444 $tmp5438 $tmp5441 	%argrw{"wrr"}
	compref		$tmp5447 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5446 $tmp5447 	%argrw{"wr"}
	pow		$tmp5445 $tmp5446 $const4 	%argrw{"wrr"}
	add		$tmp5448 $tmp5444 $tmp5445 	%argrw{"wrr"}
	div		$tmp5449 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp5448 $tmp5449 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp5451 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp5452 ___594_yy 	%argrw{"wr"}
	assign		$tmp5453 ___594_zz 	%argrw{"wr"}
	point		$tmp5450 $tmp5451 $tmp5452 $tmp5453 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp5450 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp5454 ___605_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp5455 ___600_d $tmp5454 	%argrw{"wrr"}
	if		$tmp5455 9309 9336 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp5456 ___605_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5456 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp5457 ___605_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5457 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp5458 ___605_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const14 $tmp5458 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp5459 ___605_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5459 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp5460 ___605_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5460 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp5461 ___605_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const14 $tmp5461 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp5462 ___605_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp5463 ___600_d $tmp5462 	%argrw{"wrr"}
	if		$tmp5463 9322 9336 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp5464 ___605_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5464 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp5465 ___605_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const15 $tmp5465 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp5466 ___605_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5466 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp5467 ___605_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const15 $tmp5467 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp5468 ___605_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp5469 ___600_d $tmp5468 	%argrw{"wrr"}
	if		$tmp5469 9331 9336 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp5470 ___605_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const17 $tmp5470 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp5471 ___605_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const17 $tmp5471 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp5472 ___605_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp5473 ___600_d $tmp5472 	%argrw{"wrr"}
	if		$tmp5473 9336 9336 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp5474 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp5475 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp5476 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp5377 ___605_da $const17 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp5477 $const9 $tmp5377 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp5477 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp5478 Basis $const36 	%line{168} %argrw{"wrr"}
	if		$tmp5478 9520 9520 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const37 9520 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const38 9518 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 9518 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 9515 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp5481 $tmp5068 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp5480 $tmp5481 	%argrw{"wr"}
	assign		___594_xi $tmp5480 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp5483 $tmp5068 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp5482 $tmp5483 	%argrw{"wr"}
	assign		___594_yi $tmp5482 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp5485 $tmp5068 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp5484 $tmp5485 	%argrw{"wr"}
	assign		___594_zi $tmp5484 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp5487 9366 9368 9513 9515 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp5486 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp5487 ___594_xx $tmp5486 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp5489 9370 9372 9511 9513 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp5488 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp5489 ___594_yy $tmp5488 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp5491 9374 9376 9509 9511 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp5490 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp5491 ___594_zz $tmp5490 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp5492 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp5493 ___594_yy 	%argrw{"wr"}
	assign		$tmp5494 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp5492 $tmp5493 $tmp5494 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 9393 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp5497 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp5498 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp5499 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp5496 $tmp5497 $tmp5498 $tmp5499 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp5496 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp5501 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp5502 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp5503 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp5500 $tmp5501 $tmp5502 $tmp5503 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp5500 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp5495 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp5495 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp5504 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5068 $tmp5504 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 9460 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp5505 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp5505 9401 9401 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp5506 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp5506 9404 9404 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp5507 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp5507 9414 9414 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp5509 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp5508 $tmp5509 	%argrw{"wr"}
	compref		$tmp5511 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5510 $tmp5511 	%argrw{"wr"}
	add		$tmp5512 $tmp5508 $tmp5510 	%argrw{"wrr"}
	compref		$tmp5514 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5513 $tmp5514 	%argrw{"wr"}
	add		___592_result $tmp5512 $tmp5513 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp5515 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp5515 9424 9424 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp5517 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp5516 $tmp5517 	%argrw{"wr"}
	compref		$tmp5520 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5519 $tmp5520 	%argrw{"wr"}
	compref		$tmp5522 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5521 $tmp5522 	%argrw{"wr"}
	max		$tmp5518 $tmp5519 $tmp5521 	%argrw{"wrr"}
	max		___592_result $tmp5516 $tmp5518 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp5523 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp5523 9437 9437 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp5526 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp5525 $tmp5526 	%argrw{"wr"}
	sqrt		$tmp5524 $tmp5525 	%argrw{"wr"}
	compref		$tmp5529 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5528 $tmp5529 	%argrw{"wr"}
	sqrt		$tmp5527 $tmp5528 	%argrw{"wr"}
	add		$tmp5530 $tmp5524 $tmp5527 	%argrw{"wrr"}
	compref		$tmp5533 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5532 $tmp5533 	%argrw{"wr"}
	sqrt		$tmp5531 $tmp5532 	%argrw{"wr"}
	add		___592_result $tmp5530 $tmp5531 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp5534 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp5534 9444 9444 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp5537 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp5538 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp5536 $tmp5537 $tmp5538 	%argrw{"wrr"}
	sqrt		$tmp5535 $tmp5536 	%argrw{"wr"}
	sqrt		___592_result $tmp5535 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp5539 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp5539 9459 9459 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp5542 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp5541 $tmp5542 	%argrw{"wr"}
	pow		$tmp5540 $tmp5541 $const4 	%argrw{"wrr"}
	compref		$tmp5545 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5544 $tmp5545 	%argrw{"wr"}
	pow		$tmp5543 $tmp5544 $const4 	%argrw{"wrr"}
	add		$tmp5546 $tmp5540 $tmp5543 	%argrw{"wrr"}
	compref		$tmp5549 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5548 $tmp5549 	%argrw{"wr"}
	pow		$tmp5547 $tmp5548 $const4 	%argrw{"wrr"}
	add		$tmp5550 $tmp5546 $tmp5547 	%argrw{"wrr"}
	div		$tmp5551 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp5550 $tmp5551 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp5553 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp5554 ___594_yy 	%argrw{"wr"}
	assign		$tmp5555 ___594_zz 	%argrw{"wr"}
	point		$tmp5552 $tmp5553 $tmp5554 $tmp5555 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp5552 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp5556 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp5557 ___600_d $tmp5556 	%argrw{"wrr"}
	if		$tmp5557 9482 9509 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp5558 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5558 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp5559 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp5559 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp5560 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp5560 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp5561 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5561 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp5562 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp5562 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp5563 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp5563 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp5564 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp5565 ___600_d $tmp5564 	%argrw{"wrr"}
	if		$tmp5565 9495 9509 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp5566 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5566 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp5567 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp5567 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp5568 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5568 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp5569 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp5569 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp5570 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp5571 ___600_d $tmp5570 	%argrw{"wrr"}
	if		$tmp5571 9504 9509 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp5572 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5572 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp5573 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5573 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp5574 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp5575 ___600_d $tmp5574 	%argrw{"wrr"}
	if		$tmp5575 9509 9509 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp5576 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp5577 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp5578 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp5579 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp5580 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp5479 $tmp5579 $tmp5580 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp5581 $const9 $tmp5479 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp5581 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp5582 Basis $const40 	%line{170} %argrw{"wrr"}
	if		$tmp5582 9702 9702 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const41 9702 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const42 9700 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const38 9694 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const39 9694 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const13 9691 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp5586 $tmp5068 $const3 	%line{57} %argrw{"wrr"}
	floor		$tmp5585 $tmp5586 	%argrw{"wr"}
	assign		___594_xi $tmp5585 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp5588 $tmp5068 $const14 	%line{58} %argrw{"wrr"}
	floor		$tmp5587 $tmp5588 	%argrw{"wr"}
	assign		___594_yi $tmp5587 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp5590 $tmp5068 $const15 	%line{59} %argrw{"wrr"}
	floor		$tmp5589 $tmp5590 	%argrw{"wr"}
	assign		___594_zi $tmp5589 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const3 $const16 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const14 $const16 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const15 $const16 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const17 $const16 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp5592 9542 9544 9689 9691 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const14 	%argrw{"wrr"}
	add		$tmp5591 ___594_xi $const14 	%argrw{"wrr"}
	le		$tmp5592 ___594_xx $tmp5591 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp5594 9546 9548 9687 9689 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const14 	%argrw{"wrr"}
	add		$tmp5593 ___594_yi $const14 	%argrw{"wrr"}
	le		$tmp5594 ___594_yy $tmp5593 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp5596 9550 9552 9685 9687 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const14 	%argrw{"wrr"}
	add		$tmp5595 ___594_zi $const14 	%argrw{"wrr"}
	le		$tmp5596 ___594_zz $tmp5595 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp5597 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp5598 ___594_yy 	%argrw{"wr"}
	assign		$tmp5599 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp5597 $tmp5598 $tmp5599 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const18 9569 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp5602 ___600_ip $const14 	%line{46} %argrw{"wrr"}
	compref		$tmp5603 ___600_ip $const3 	%argrw{"wrr"}
	compref		$tmp5604 ___600_ip $const15 	%argrw{"wrr"}
	point		$tmp5601 $tmp5602 $tmp5603 $tmp5604 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp5601 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp5606 ___600_ip $const14 	%line{47} %argrw{"wrr"}
	compref		$tmp5607 ___600_ip $const15 	%argrw{"wrr"}
	compref		$tmp5608 ___600_ip $const3 	%argrw{"wrr"}
	point		$tmp5605 $tmp5606 $tmp5607 $tmp5608 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp5605 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp5600 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp5600 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp5609 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp5068 $tmp5609 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const19 9636 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const4 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp5610 $const12 $const12 	%line{23} %argrw{"wrr"}
	if		$tmp5610 9577 9577 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp5611 $const12 $const20 	%line{25} %argrw{"wrr"}
	if		$tmp5611 9580 9580 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp5612 $const12 $const21 	%line{27} %argrw{"wrr"}
	if		$tmp5612 9590 9590 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp5614 ___600_pd $const3 	%line{28} %argrw{"wrr"}
	fabs		$tmp5613 $tmp5614 	%argrw{"wr"}
	compref		$tmp5616 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5615 $tmp5616 	%argrw{"wr"}
	add		$tmp5617 $tmp5613 $tmp5615 	%argrw{"wrr"}
	compref		$tmp5619 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5618 $tmp5619 	%argrw{"wr"}
	add		___592_result $tmp5617 $tmp5618 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp5620 $const12 $const22 	%line{29} %argrw{"wrr"}
	if		$tmp5620 9600 9600 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp5622 ___600_pd $const3 	%line{30} %argrw{"wrr"}
	fabs		$tmp5621 $tmp5622 	%argrw{"wr"}
	compref		$tmp5625 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5624 $tmp5625 	%argrw{"wr"}
	compref		$tmp5627 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5626 $tmp5627 	%argrw{"wr"}
	max		$tmp5623 $tmp5624 $tmp5626 	%argrw{"wrr"}
	max		___592_result $tmp5621 $tmp5623 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp5628 $const12 $const23 	%line{31} %argrw{"wrr"}
	if		$tmp5628 9613 9613 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp5631 ___600_pd $const3 	%line{32} %argrw{"wrr"}
	fabs		$tmp5630 $tmp5631 	%argrw{"wr"}
	sqrt		$tmp5629 $tmp5630 	%argrw{"wr"}
	compref		$tmp5634 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5633 $tmp5634 	%argrw{"wr"}
	sqrt		$tmp5632 $tmp5633 	%argrw{"wr"}
	add		$tmp5635 $tmp5629 $tmp5632 	%argrw{"wrr"}
	compref		$tmp5638 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5637 $tmp5638 	%argrw{"wr"}
	sqrt		$tmp5636 $tmp5637 	%argrw{"wr"}
	add		___592_result $tmp5635 $tmp5636 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp5639 $const12 $const24 	%line{33} %argrw{"wrr"}
	if		$tmp5639 9620 9620 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp5642 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp5643 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp5641 $tmp5642 $tmp5643 	%argrw{"wrr"}
	sqrt		$tmp5640 $tmp5641 	%argrw{"wr"}
	sqrt		___592_result $tmp5640 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp5644 $const12 $const25 	%line{35} %argrw{"wrr"}
	if		$tmp5644 9635 9635 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp5647 ___600_pd $const3 	%line{36} %argrw{"wrr"}
	fabs		$tmp5646 $tmp5647 	%argrw{"wr"}
	pow		$tmp5645 $tmp5646 $const4 	%argrw{"wrr"}
	compref		$tmp5650 ___600_pd $const14 	%argrw{"wrr"}
	fabs		$tmp5649 $tmp5650 	%argrw{"wr"}
	pow		$tmp5648 $tmp5649 $const4 	%argrw{"wrr"}
	add		$tmp5651 $tmp5645 $tmp5648 	%argrw{"wrr"}
	compref		$tmp5654 ___600_pd $const15 	%argrw{"wrr"}
	fabs		$tmp5653 $tmp5654 	%argrw{"wr"}
	pow		$tmp5652 $tmp5653 $const4 	%argrw{"wrr"}
	add		$tmp5655 $tmp5651 $tmp5652 	%argrw{"wrr"}
	div		$tmp5656 $const26 $const4 	%argrw{"wrr"}
	pow		___592_result $tmp5655 $tmp5656 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp5658 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp5659 ___594_yy 	%argrw{"wr"}
	assign		$tmp5660 ___594_zz 	%argrw{"wr"}
	point		$tmp5657 $tmp5658 $tmp5659 $tmp5660 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp5657 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp5661 ___606_da $const3 	%line{76} %argrw{"wrr"}
	lt		$tmp5662 ___600_d $tmp5661 	%argrw{"wrr"}
	if		$tmp5662 9658 9685 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp5663 ___606_da $const15 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5663 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp5664 ___606_da $const14 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp5664 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp5665 ___606_da $const3 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const14 $tmp5665 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const3 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp5666 ___606_pa $const15 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5666 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp5667 ___606_pa $const14 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp5667 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp5668 ___606_pa $const3 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const14 $tmp5668 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp5669 ___606_da $const14 	%line{87} %argrw{"wrr"}
	lt		$tmp5670 ___600_d $tmp5669 	%argrw{"wrr"}
	if		$tmp5670 9671 9685 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp5671 ___606_da $const15 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5671 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp5672 ___606_da $const14 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const15 $tmp5672 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const14 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp5673 ___606_pa $const15 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5673 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp5674 ___606_pa $const14 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const15 $tmp5674 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const14 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp5675 ___606_da $const15 	%line{96} %argrw{"wrr"}
	lt		$tmp5676 ___600_d $tmp5675 	%argrw{"wrr"}
	if		$tmp5676 9680 9685 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp5677 ___606_da $const15 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const17 $tmp5677 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const15 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp5678 ___606_pa $const15 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const17 $tmp5678 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const15 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp5679 ___606_da $const17 	%line{103} %argrw{"wrr"}
	lt		$tmp5680 ___600_d $tmp5679 	%argrw{"wrr"}
	if		$tmp5680 9685 9685 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const17 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const17 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp5681 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp5682 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp5683 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp5684 ___606_da $const14 	%line{129} %argrw{"wrr"}
	aref		$tmp5685 ___606_da $const3 	%argrw{"wrr"}
	sub		$tmp5584 $tmp5684 $tmp5685 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const43 $tmp5584 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp5686 ___612_t $const26 	%line{142} %argrw{"wrr"}
	if		$tmp5686 9698 9699 	%argrw{"r"}
	assign		$tmp5583 $const26 	%argrw{"wr"}
	assign		$tmp5583 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp5687 $const9 $tmp5583 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp5687 $const26 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp5688 Basis $const44 	%line{172} %argrw{"wrr"}
	if		$tmp5688 9705 9705 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp5068 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___628_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:241
# 		if (hard)
	if		___631_hard 9710 9710 	%line{241} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:242
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp5689 $const9 ___628_t 	%line{242} %argrw{"wrr"}
	sub		$tmp5690 $tmp5689 $const26 	%argrw{"wrr"}
	fabs		___628_t $tmp5690 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:244
# 		float sum2 = sum + t*amp;
	mul		$tmp5691 ___628_t ___625_amp 	%line{244} %argrw{"wrr"}
	add		___628_sum2 ___625_sum $tmp5691 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:246
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp5692 $const14 ___625_n 	%line{246} %argrw{"wrr"}
	assign		$tmp5693 $tmp5692 	%argrw{"wr"}
	add		$tmp5694 ___625_n $const14 	%argrw{"wrr"}
	shl		$tmp5695 $const14 $tmp5694 	%argrw{"wrr"}
	sub		$tmp5696 $tmp5695 $const14 	%argrw{"wrr"}
	assign		$tmp5697 $tmp5696 	%argrw{"wr"}
	div		$tmp5698 $tmp5693 $tmp5697 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp5698 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:247
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp5699 ___625_n $const14 	%line{247} %argrw{"wrr"}
	shl		$tmp5700 $const14 $tmp5699 	%argrw{"wrr"}
	assign		$tmp5701 $tmp5700 	%argrw{"wr"}
	add		$tmp5702 ___625_n $const15 	%argrw{"wrr"}
	shl		$tmp5703 $const14 $tmp5702 	%argrw{"wrr"}
	sub		$tmp5704 $tmp5703 $const14 	%argrw{"wrr"}
	assign		$tmp5705 $tmp5704 	%argrw{"wr"}
	div		$tmp5706 $tmp5701 $tmp5705 	%argrw{"wrr"}
	mul		___628_sum2 ___628_sum2 $tmp5706 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:249
# 		return (1.0 - rmd)*sum + rmd*sum2;
	sub		$tmp5707 $const26 ___625_rmd 	%line{249} %argrw{"wrr"}
	mul		$tmp5708 $tmp5707 ___625_sum 	%argrw{"wrr"}
	mul		$tmp5709 ___625_rmd ___628_sum2 	%argrw{"wrr"}
	add		$tmp4434 $tmp5708 $tmp5709 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:252
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp5710 $const14 ___625_n 	%line{252} %argrw{"wrr"}
	assign		$tmp5711 $tmp5710 	%argrw{"wr"}
	add		$tmp5712 ___625_n $const14 	%argrw{"wrr"}
	shl		$tmp5713 $const14 $tmp5712 	%argrw{"wrr"}
	sub		$tmp5714 $tmp5713 $const14 	%argrw{"wrr"}
	assign		$tmp5715 $tmp5714 	%argrw{"wr"}
	div		$tmp5716 $tmp5711 $tmp5715 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp5716 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:253
# 		return sum;
	assign		$tmp4434 ___625_sum 	%line{253} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_noise_texture.osl:40
# 		noise_turbulence(point(p[1], p[2], p[0]), basis, detail, hard));
	color		Color Fac $tmp3151 $tmp4434 	%filename{"intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{40} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_noise_texture.osl:42
# 	return fac;
	assign		Fac Fac 	%line{42} %argrw{"wr"}
	end
