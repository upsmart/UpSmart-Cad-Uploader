OpenShadingLanguage 1.00
# Compiled by oslc 1.3.0
shader node_rgb_ramp
param	color[256]	ramp_color	0 0 0 		 %read{15,22} %write{2147483647,-1}
param	float[256]	ramp_alpha	0 		 %read{16,28} %write{2147483647,-1}
param	float	Fac	0 		 %read{1,1} %write{2147483647,-1}
oparam	color	Color	0 0 0 		 %read{20,20} %write{15,24}
oparam	float	Alpha	1 		 %read{26,26} %write{16,30}
local	float	f	 %read{6,14} %write{5,5}
local	int	i	 %read{7,27} %write{6,12}
local	float	t	 %read{17,29} %write{14,14}
temp	float	$tmp1	 %read{5,5} %write{2,2}
const	float	$const1	0		 %read{2,17} %write{2147483647,-1}
const	float	$const2	1		 %read{1,25} %write{2147483647,-1}
const	string	$const3	"clamp"		 %read{0,0} %write{2147483647,-1}
temp	float	$tmp2	 %read{2,2} %write{1,1}
const	int	$const4	256		 %read{3,12} %write{2147483647,-1}
const	int	$const5	1		 %read{3,27} %write{2147483647,-1}
temp	int	$tmp3	 %read{4,4} %write{3,3}
temp	float	$tmp4	 %read{5,5} %write{4,4}
const	int	$const6	0		 %read{7,9} %write{2147483647,-1}
temp	int	$tmp5	 %read{8,8} %write{7,7}
temp	int	$tmp6	 %read{11,11} %write{10,10}
temp	float	$tmp7	 %read{14,14} %write{13,13}
temp	int	$tmp8	 %read{18,18} %write{17,17}
temp	float	$tmp9	 %read{20,20} %write{19,19}
temp	color	$tmp10	 %read{24,24} %write{20,20}
temp	int	$tmp11	 %read{22,22} %write{21,21}
temp	color	$tmp12	 %read{23,23} %write{22,22}
temp	color	$tmp13	 %read{24,24} %write{23,23}
temp	float	$tmp14	 %read{26,26} %write{25,25}
temp	float	$tmp15	 %read{30,30} %write{26,26}
temp	int	$tmp16	 %read{28,28} %write{27,27}
temp	float	$tmp17	 %read{29,29} %write{28,28}
temp	float	$tmp18	 %read{30,30} %write{29,29}
code ___main___
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:30
# 	float f = clamp(Fac, 0.0, 1.0) * (RAMP_TABLE_SIZE - 1);
	functioncall	$const3 3 	%filename{"intern/cycles/kernel/shaders/node_rgb_ramp.osl"} %line{30} %argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# PERCOMP1 (inversesqrt)
	min		$tmp2 Fac $const2 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		$tmp1 $tmp2 $const1 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:30
# 	float f = clamp(Fac, 0.0, 1.0) * (RAMP_TABLE_SIZE - 1);
	sub		$tmp3 $const4 $const5 	%filename{"intern/cycles/kernel/shaders/node_rgb_ramp.osl"} %line{30} %argrw{"wrr"}
	assign		$tmp4 $tmp3 	%argrw{"wr"}
	mul		f $tmp1 $tmp4 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:33
# 	int i = (int)f;
	assign		i f 	%line{33} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:34
# 	if (i < 0) i = 0;
	lt		$tmp5 i $const6 	%line{34} %argrw{"wrr"}
	if		$tmp5 10 10 	%argrw{"r"}
	assign		i $const6 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:35
# 	if (i >= RAMP_TABLE_SIZE) i = RAMP_TABLE_SIZE - 1;
	ge		$tmp6 i $const4 	%line{35} %argrw{"wrr"}
	if		$tmp6 13 13 	%argrw{"r"}
	sub		i $const4 $const5 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:36
# 	float t = f - (float)i;
	assign		$tmp7 i 	%line{36} %argrw{"wr"}
	sub		t f $tmp7 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:38
# 	Color = ramp_color[i];
	aref		Color ramp_color i 	%line{38} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:39
# 	Alpha = ramp_alpha[i];
	aref		Alpha ramp_alpha i 	%line{39} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:41
# 	if (t > 0.0) {
	gt		$tmp8 t $const1 	%line{41} %argrw{"wrr"}
	if		$tmp8 31 31 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:42
# 		Color = (1.0 - t) * Color + t * ramp_color[i + 1];
	sub		$tmp9 $const2 t 	%line{42} %argrw{"wrr"}
	mul		$tmp10 $tmp9 Color 	%argrw{"wrr"}
	add		$tmp11 i $const5 	%argrw{"wrr"}
	aref		$tmp12 ramp_color $tmp11 	%argrw{"wrr"}
	mul		$tmp13 t $tmp12 	%argrw{"wrr"}
	add		Color $tmp10 $tmp13 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_rgb_ramp.osl:43
# 		Alpha = (1.0 - t) * Alpha + t * ramp_alpha[i + 1];
	sub		$tmp14 $const2 t 	%line{43} %argrw{"wrr"}
	mul		$tmp15 $tmp14 Alpha 	%argrw{"wrr"}
	add		$tmp16 i $const5 	%argrw{"wrr"}
	aref		$tmp17 ramp_alpha $tmp16 	%argrw{"wrr"}
	mul		$tmp18 t $tmp17 	%argrw{"wrr"}
	add		Alpha $tmp15 $tmp18 	%argrw{"wrr"}
	end
