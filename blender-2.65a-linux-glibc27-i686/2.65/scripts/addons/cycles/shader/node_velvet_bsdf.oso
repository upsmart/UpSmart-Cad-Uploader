OpenShadingLanguage 1.00
# Compiled by oslc 1.3.0
shader node_velvet_bsdf
param	color	Color	0.80000001 0.80000001 0.80000001 		 %read{6,6} %write{2147483647,-1}
param	float	Sigma	0 		 %read{3,3} %write{2147483647,-1}
param	normal	Normal	0 0 0 		 %read{1,5} %write{0,0}
oparam	closure color	BSDF			 %read{2147483647,-1} %write{1,6}
global	normal	N	 %read{0,0} %write{2147483647,-1}
local	float	sigma	 %read{5,5} %write{4,4}
const	string	$const1	"diffuse"		 %read{1,1} %write{2147483647,-1}
const	float	$const2	0		 %read{4,4} %write{2147483647,-1}
const	float	$const3	1		 %read{3,3} %write{2147483647,-1}
const	string	$const4	"clamp"		 %read{2,2} %write{2147483647,-1}
temp	float	$tmp1	 %read{4,4} %write{3,3}
temp	closure color	$tmp2	 %read{6,6} %write{5,5}
const	string	$const5	"ashikhmin_velvet"		 %read{5,5} %write{2147483647,-1}
code Normal
# intern/cycles/kernel/shaders/node_velvet_bsdf.osl:25
# 	normal Normal = N,
	assign		Normal N 	%filename{"intern/cycles/kernel/shaders/node_velvet_bsdf.osl"} %line{25} %argrw{"wr"}
code BSDF
# intern/cycles/kernel/shaders/node_velvet_bsdf.osl:26
# 	output closure color BSDF = diffuse(Normal))
	closure		BSDF $const1 Normal 	%filename{"intern/cycles/kernel/shaders/node_velvet_bsdf.osl"} %line{26} %argrw{"wrr"}
code ___main___
# intern/cycles/kernel/shaders/node_velvet_bsdf.osl:28
# 	float sigma = clamp(Sigma, 0.0, 1.0);
	functioncall	$const4 5 	%filename{"intern/cycles/kernel/shaders/node_velvet_bsdf.osl"} %line{28} %argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# float hypot (float a, float b, float c) { return sqrt (a*a + b*b + c*c); }
	min		$tmp1 Sigma $const3 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		sigma $tmp1 $const2 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_velvet_bsdf.osl:30
# 	BSDF = Color * ashikhmin_velvet(Normal, sigma);
	closure		$tmp2 $const5 Normal sigma 	%filename{"intern/cycles/kernel/shaders/node_velvet_bsdf.osl"} %line{30} %argrw{"wrrr"}
	mul		BSDF $tmp2 Color 	%argrw{"wrr"}
	end
