OpenShadingLanguage 1.00
# Compiled by oslc 1.3.0
shader node_wave_texture
param	int	use_mapping	0 		 %read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		 %read{3,3} %write{2147483647,-1}
param	string	Type	"Bands" 		 %read{13,18} %write{2147483647,-1}
param	float	Scale	5 		 %read{6,10} %write{2147483647,-1}
param	float	Distortion	0 		 %read{27,2211} %write{2147483647,-1}
param	float	Detail	2 		 %read{35,35} %write{2147483647,-1}
param	float	DetailScale	1 		 %read{29,29} %write{2147483647,-1}
param	point	Vector	0 0 0 		 %read{1,1} %write{0,0}
oparam	float	Fac	0 		 %read{2248,2248} %write{2247,2247}
oparam	color	Color	0 0 0 		 %read{2147483647,-1} %write{2248,2248}
global	point	P	 %read{0,0} %write{2147483647,-1}
local	float	___592_result	 %read{38,2157} %write{38,2157}
local	float	___593_r	 %read{38,2157} %write{38,2157}
local	float	___593_g	 %read{38,2157} %write{38,2157}
local	float	___593_b	 %read{38,2157} %write{38,2157}
local	int	___594_xx	 %read{38,2157} %write{38,2157}
local	int	___594_yy	 %read{38,2157} %write{38,2157}
local	int	___594_zz	 %read{38,2157} %write{38,2157}
local	int	___594_xi	 %read{38,2009} %write{38,1996}
local	int	___594_yi	 %read{38,2013} %write{38,1999}
local	int	___594_zi	 %read{38,2017} %write{38,2002}
local	point	___600_ip	 %read{38,2157} %write{38,2157}
local	point	___600_vp	 %read{38,2157} %write{38,2157}
local	point	___600_pd	 %read{38,2157} %write{38,2157}
local	float	___600_d	 %read{38,2157} %write{38,2157}
local	float[4]	___605_da	 %read{38,1809} %write{38,1808}
local	point[4]	___605_pa	 %read{38,1808} %write{38,1808}
local	float[4]	___606_da	 %read{38,2159} %write{38,2157}
local	point[4]	___606_pa	 %read{38,2157} %write{38,2157}
local	float	___612_t	 %read{38,2165} %write{38,2161}
local	float	___619_result	 %read{38,2172} %write{38,2171}
local	float	___621_result	 %read{2246,2246} %write{2214,2245}
local	float	___623_b	 %read{2223,2231} %write{2222,2222}
local	int	___623_n	 %read{2225,2225} %write{2224,2224}
local	float	___624_b	 %read{2236,2240} %write{2234,2234}
local	float	___624_rmax	 %read{2245,2245} %write{2235,2235}
local	float	___625_fscale	 %read{38,1114} %write{31,1109}
local	float	___625_amp	 %read{38,2177} %write{32,1109}
local	float	___625_sum	 %read{38,2209} %write{33,2208}
local	int	___625_i	 %read{38,1109} %write{38,1109}
local	int	___625_n	 %read{40,2203} %write{37,37}
local	float	___625_octaves	 %read{37,1111} %write{36,36}
local	float	___627_t	 %read{38,1109} %write{38,1109}
local	float	___625_rmd	 %read{1112,2198} %write{1111,1111}
local	float	___628_t	 %read{2174,2177} %write{2172,2176}
local	float	___628_sum2	 %read{2195,2198} %write{2178,2195}
local	float	___631_x	 %read{15,20} %write{6,6}
local	float	___631_y	 %read{15,21} %write{8,8}
local	float	___631_z	 %read{16,23} %write{10,10}
local	float	___631_result	 %read{38,2247} %write{11,2246}
local	float	___631_n	 %read{38,2241} %write{12,2230}
local	point	p	 %read{3,29} %write{1,3}
const	string	$const1	"wave"		 %read{4,4} %write{2147483647,-1}
const	int	$const2	0		 %read{5,2228} %write{2147483647,-1}
temp	float	$tmp1	 %read{6,6} %write{5,5}
const	int	$const3	1		 %read{7,2205} %write{2147483647,-1}
temp	float	$tmp2	 %read{8,8} %write{7,7}
const	int	$const4	2		 %read{9,2190} %write{2147483647,-1}
temp	float	$tmp3	 %read{10,10} %write{9,9}
const	float	$const5	0		 %read{11,2214} %write{2147483647,-1}
const	string	$const6	"Bands"		 %read{13,13} %write{2147483647,-1}
temp	int	$tmp4	 %read{14,14} %write{13,13}
temp	float	$tmp5	 %read{16,16} %write{15,15}
temp	float	$tmp6	 %read{17,17} %write{16,16}
const	float	$const7	10		 %read{17,2161} %write{2147483647,-1}
const	string	$const8	"Rings"		 %read{18,18} %write{2147483647,-1}
temp	int	$tmp7	 %read{19,19} %write{18,18}
temp	float	$tmp8	 %read{26,26} %write{25,25}
temp	float	$tmp9	 %read{22,22} %write{20,20}
temp	float	$tmp10	 %read{22,22} %write{21,21}
temp	float	$tmp11	 %read{24,24} %write{22,22}
temp	float	$tmp12	 %read{24,24} %write{23,23}
temp	float	$tmp13	 %read{25,25} %write{24,24}
const	float	$const9	20		 %read{26,26} %write{2147483647,-1}
temp	int	$tmp14	 %read{28,28} %write{27,27}
temp	float	$tmp15	 %read{2211,2211} %write{2199,2209}
temp	point	$tmp16	 %read{38,1114} %write{29,1109}
const	string	$const10	"Perlin"		 %read{44,2169} %write{2147483647,-1}
const	string	$const11	"noise_turbulence"		 %read{30,30} %write{2147483647,-1}
const	float	$const12	1		 %read{31,2240} %write{2147483647,-1}
const	float	$const13	16		 %read{35,35} %write{2147483647,-1}
const	string	$const14	"clamp"		 %read{34,34} %write{2147483647,-1}
temp	float	$tmp17	 %read{36,36} %write{35,35}
temp	int	$tmp18	 %read{38,1109} %write{38,1109}
temp	point	$tmp19	 %read{46,1098} %write{41,1084}
const	string	$const15	"noise_basis"		 %read{42,1115} %write{2147483647,-1}
temp	int	$tmp20	 %read{45,45} %write{44,44}
const	string	$const16	"Voronoi F1"		 %read{47,1120} %write{2147483647,-1}
temp	int	$tmp21	 %read{48,48} %write{47,47}
const	string	$const17	"voronoi_F1S"		 %read{49,1122} %write{2147483647,-1}
const	float	$const18	2		 %read{218,2244} %write{2147483647,-1}
temp	float	$tmp22	 %read{218,218} %write{217,217}
const	string	$const19	"voronoi_F1"		 %read{50,1123} %write{2147483647,-1}
const	string	$const20	"voronoi_Fn"		 %read{51,1643} %write{2147483647,-1}
const	string	$const21	"Distance Squared"		 %read{100,2087} %write{2147483647,-1}
const	string	$const22	"voronoi"		 %read{52,1993} %write{2147483647,-1}
temp	float	$tmp23	 %read{55,55} %write{54,54}
temp	float	$tmp24	 %read{54,54} %write{53,53}
temp	float	$tmp25	 %read{58,58} %write{57,57}
temp	float	$tmp26	 %read{57,57} %write{56,56}
temp	float	$tmp27	 %read{61,61} %write{60,60}
temp	float	$tmp28	 %read{60,60} %write{59,59}
const	float	$const23	1e+10		 %read{62,2006} %write{2147483647,-1}
const	int	$const24	3		 %read{65,2151} %write{2147483647,-1}
temp	int	$tmp29	 %read{69,69} %write{68,68}
temp	int	$tmp30	 %read{66,216} %write{66,216}
temp	int	$tmp31	 %read{73,73} %write{72,72}
temp	int	$tmp32	 %read{70,214} %write{70,214}
temp	int	$tmp33	 %read{77,77} %write{76,76}
temp	int	$tmp34	 %read{74,212} %write{74,212}
temp	float	$tmp35	 %read{81,81} %write{78,78}
temp	float	$tmp36	 %read{81,81} %write{79,79}
temp	float	$tmp37	 %read{81,81} %write{80,80}
temp	color	$tmp38	 %read{95,95} %write{94,94}
const	string	$const25	"cellnoise_color"		 %read{82,2023} %write{2147483647,-1}
temp	point	$tmp39	 %read{88,88} %write{87,87}
temp	float	$tmp40	 %read{87,87} %write{84,84}
temp	float	$tmp41	 %read{87,87} %write{85,85}
temp	float	$tmp42	 %read{87,87} %write{86,86}
temp	point	$tmp43	 %read{93,93} %write{92,92}
temp	float	$tmp44	 %read{92,92} %write{89,89}
temp	float	$tmp45	 %read{92,92} %write{90,90}
temp	float	$tmp46	 %read{92,92} %write{91,91}
temp	point	$tmp47	 %read{97,97} %write{96,96}
const	string	$const26	"voronoi_distance"		 %read{98,2039} %write{2147483647,-1}
temp	int	$tmp48	 %read{101,101} %write{100,100}
const	string	$const27	"Actual Distance"		 %read{103,2044} %write{2147483647,-1}
temp	int	$tmp49	 %read{104,104} %write{103,103}
const	string	$const28	"Manhattan"		 %read{106,2047} %write{2147483647,-1}
temp	int	$tmp50	 %read{107,107} %write{106,106}
temp	float	$tmp51	 %read{112,112} %write{109,109}
temp	float	$tmp52	 %read{109,109} %write{108,108}
temp	float	$tmp53	 %read{112,112} %write{111,111}
temp	float	$tmp54	 %read{111,111} %write{110,110}
temp	float	$tmp55	 %read{115,115} %write{112,112}
temp	float	$tmp56	 %read{115,115} %write{114,114}
temp	float	$tmp57	 %read{114,114} %write{113,113}
const	string	$const29	"Chebychev"		 %read{116,2057} %write{2147483647,-1}
temp	int	$tmp58	 %read{117,117} %write{116,116}
temp	float	$tmp59	 %read{125,125} %write{119,119}
temp	float	$tmp60	 %read{119,119} %write{118,118}
temp	float	$tmp61	 %read{125,125} %write{124,124}
temp	float	$tmp62	 %read{124,124} %write{121,121}
temp	float	$tmp63	 %read{121,121} %write{120,120}
temp	float	$tmp64	 %read{124,124} %write{123,123}
temp	float	$tmp65	 %read{123,123} %write{122,122}
const	string	$const30	"Minkovsky 1/2"		 %read{126,2067} %write{2147483647,-1}
temp	int	$tmp66	 %read{127,127} %write{126,126}
temp	float	$tmp67	 %read{134,134} %write{130,130}
temp	float	$tmp68	 %read{130,130} %write{129,129}
temp	float	$tmp69	 %read{129,129} %write{128,128}
temp	float	$tmp70	 %read{134,134} %write{133,133}
temp	float	$tmp71	 %read{133,133} %write{132,132}
temp	float	$tmp72	 %read{132,132} %write{131,131}
temp	float	$tmp73	 %read{138,138} %write{134,134}
temp	float	$tmp74	 %read{138,138} %write{137,137}
temp	float	$tmp75	 %read{137,137} %write{136,136}
temp	float	$tmp76	 %read{136,136} %write{135,135}
const	string	$const31	"Minkovsky 4"		 %read{139,2080} %write{2147483647,-1}
temp	int	$tmp77	 %read{140,140} %write{139,139}
temp	float	$tmp78	 %read{145,145} %write{144,144}
temp	float	$tmp79	 %read{144,144} %write{143,143}
temp	vector	$tmp80	 %read{143,143} %write{141,141}
temp	vector	$tmp81	 %read{143,143} %write{142,142}
const	string	$const32	"Minkovsky"		 %read{146,2087} %write{2147483647,-1}
temp	int	$tmp82	 %read{147,147} %write{146,146}
temp	float	$tmp83	 %read{154,154} %write{150,150}
temp	float	$tmp84	 %read{150,150} %write{149,149}
temp	float	$tmp85	 %read{149,149} %write{148,148}
temp	float	$tmp86	 %read{154,154} %write{153,153}
temp	float	$tmp87	 %read{153,153} %write{152,152}
temp	float	$tmp88	 %read{152,152} %write{151,151}
temp	float	$tmp89	 %read{158,158} %write{154,154}
temp	float	$tmp90	 %read{158,158} %write{157,157}
temp	float	$tmp91	 %read{157,157} %write{156,156}
temp	float	$tmp92	 %read{156,156} %write{155,155}
temp	float	$tmp93	 %read{160,160} %write{158,158}
temp	float	$tmp94	 %read{160,160} %write{159,159}
temp	point	$tmp95	 %read{166,166} %write{165,165}
temp	float	$tmp96	 %read{165,165} %write{162,162}
temp	float	$tmp97	 %read{165,165} %write{163,163}
temp	float	$tmp98	 %read{165,165} %write{164,164}
temp	float	$tmp99	 %read{168,168} %write{167,167}
temp	int	$tmp100	 %read{169,169} %write{168,168}
temp	float	$tmp101	 %read{171,171} %write{170,170}
temp	float	$tmp102	 %read{173,173} %write{172,172}
temp	float	$tmp103	 %read{175,175} %write{174,174}
temp	point	$tmp104	 %read{178,178} %write{177,177}
temp	point	$tmp105	 %read{180,180} %write{179,179}
temp	point	$tmp106	 %read{182,182} %write{181,181}
temp	float	$tmp107	 %read{185,185} %write{184,184}
temp	int	$tmp108	 %read{186,186} %write{185,185}
temp	float	$tmp109	 %read{188,188} %write{187,187}
temp	float	$tmp110	 %read{190,190} %write{189,189}
temp	point	$tmp111	 %read{193,193} %write{192,192}
temp	point	$tmp112	 %read{195,195} %write{194,194}
temp	float	$tmp113	 %read{198,198} %write{197,197}
temp	int	$tmp114	 %read{199,199} %write{198,198}
temp	float	$tmp115	 %read{201,201} %write{200,200}
temp	point	$tmp116	 %read{204,204} %write{203,203}
temp	float	$tmp117	 %read{207,207} %write{206,206}
temp	int	$tmp118	 %read{208,208} %write{207,207}
temp	int	$tmp119	 %read{2147483647,-1} %write{211,211}
temp	int	$tmp120	 %read{2147483647,-1} %write{213,213}
temp	int	$tmp121	 %read{2147483647,-1} %write{215,215}
temp	float	$tmp122	 %read{219,219} %write{218,218}
const	string	$const33	"Voronoi F2"		 %read{220,1293} %write{2147483647,-1}
temp	int	$tmp123	 %read{221,221} %write{220,220}
const	string	$const34	"voronoi_F2S"		 %read{222,1295} %write{2147483647,-1}
temp	float	$tmp124	 %read{391,391} %write{390,390}
const	string	$const35	"voronoi_F2"		 %read{223,1296} %write{2147483647,-1}
temp	float	$tmp125	 %read{228,228} %write{227,227}
temp	float	$tmp126	 %read{227,227} %write{226,226}
temp	float	$tmp127	 %read{231,231} %write{230,230}
temp	float	$tmp128	 %read{230,230} %write{229,229}
temp	float	$tmp129	 %read{234,234} %write{233,233}
temp	float	$tmp130	 %read{233,233} %write{232,232}
temp	int	$tmp131	 %read{242,242} %write{241,241}
temp	int	$tmp132	 %read{239,389} %write{239,389}
temp	int	$tmp133	 %read{246,246} %write{245,245}
temp	int	$tmp134	 %read{243,387} %write{243,387}
temp	int	$tmp135	 %read{250,250} %write{249,249}
temp	int	$tmp136	 %read{247,385} %write{247,385}
temp	float	$tmp137	 %read{254,254} %write{251,251}
temp	float	$tmp138	 %read{254,254} %write{252,252}
temp	float	$tmp139	 %read{254,254} %write{253,253}
temp	color	$tmp140	 %read{268,268} %write{267,267}
temp	point	$tmp141	 %read{261,261} %write{260,260}
temp	float	$tmp142	 %read{260,260} %write{257,257}
temp	float	$tmp143	 %read{260,260} %write{258,258}
temp	float	$tmp144	 %read{260,260} %write{259,259}
temp	point	$tmp145	 %read{266,266} %write{265,265}
temp	float	$tmp146	 %read{265,265} %write{262,262}
temp	float	$tmp147	 %read{265,265} %write{263,263}
temp	float	$tmp148	 %read{265,265} %write{264,264}
temp	point	$tmp149	 %read{270,270} %write{269,269}
temp	int	$tmp150	 %read{274,274} %write{273,273}
temp	int	$tmp151	 %read{277,277} %write{276,276}
temp	int	$tmp152	 %read{280,280} %write{279,279}
temp	float	$tmp153	 %read{285,285} %write{282,282}
temp	float	$tmp154	 %read{282,282} %write{281,281}
temp	float	$tmp155	 %read{285,285} %write{284,284}
temp	float	$tmp156	 %read{284,284} %write{283,283}
temp	float	$tmp157	 %read{288,288} %write{285,285}
temp	float	$tmp158	 %read{288,288} %write{287,287}
temp	float	$tmp159	 %read{287,287} %write{286,286}
temp	int	$tmp160	 %read{290,290} %write{289,289}
temp	float	$tmp161	 %read{298,298} %write{292,292}
temp	float	$tmp162	 %read{292,292} %write{291,291}
temp	float	$tmp163	 %read{298,298} %write{297,297}
temp	float	$tmp164	 %read{297,297} %write{294,294}
temp	float	$tmp165	 %read{294,294} %write{293,293}
temp	float	$tmp166	 %read{297,297} %write{296,296}
temp	float	$tmp167	 %read{296,296} %write{295,295}
temp	int	$tmp168	 %read{300,300} %write{299,299}
temp	float	$tmp169	 %read{307,307} %write{303,303}
temp	float	$tmp170	 %read{303,303} %write{302,302}
temp	float	$tmp171	 %read{302,302} %write{301,301}
temp	float	$tmp172	 %read{307,307} %write{306,306}
temp	float	$tmp173	 %read{306,306} %write{305,305}
temp	float	$tmp174	 %read{305,305} %write{304,304}
temp	float	$tmp175	 %read{311,311} %write{307,307}
temp	float	$tmp176	 %read{311,311} %write{310,310}
temp	float	$tmp177	 %read{310,310} %write{309,309}
temp	float	$tmp178	 %read{309,309} %write{308,308}
temp	int	$tmp179	 %read{313,313} %write{312,312}
temp	float	$tmp180	 %read{318,318} %write{317,317}
temp	float	$tmp181	 %read{317,317} %write{316,316}
temp	vector	$tmp182	 %read{316,316} %write{314,314}
temp	vector	$tmp183	 %read{316,316} %write{315,315}
temp	int	$tmp184	 %read{320,320} %write{319,319}
temp	float	$tmp185	 %read{327,327} %write{323,323}
temp	float	$tmp186	 %read{323,323} %write{322,322}
temp	float	$tmp187	 %read{322,322} %write{321,321}
temp	float	$tmp188	 %read{327,327} %write{326,326}
temp	float	$tmp189	 %read{326,326} %write{325,325}
temp	float	$tmp190	 %read{325,325} %write{324,324}
temp	float	$tmp191	 %read{331,331} %write{327,327}
temp	float	$tmp192	 %read{331,331} %write{330,330}
temp	float	$tmp193	 %read{330,330} %write{329,329}
temp	float	$tmp194	 %read{329,329} %write{328,328}
temp	float	$tmp195	 %read{333,333} %write{331,331}
temp	float	$tmp196	 %read{333,333} %write{332,332}
temp	point	$tmp197	 %read{339,339} %write{338,338}
temp	float	$tmp198	 %read{338,338} %write{335,335}
temp	float	$tmp199	 %read{338,338} %write{336,336}
temp	float	$tmp200	 %read{338,338} %write{337,337}
temp	float	$tmp201	 %read{341,341} %write{340,340}
temp	int	$tmp202	 %read{342,342} %write{341,341}
temp	float	$tmp203	 %read{344,344} %write{343,343}
temp	float	$tmp204	 %read{346,346} %write{345,345}
temp	float	$tmp205	 %read{348,348} %write{347,347}
temp	point	$tmp206	 %read{351,351} %write{350,350}
temp	point	$tmp207	 %read{353,353} %write{352,352}
temp	point	$tmp208	 %read{355,355} %write{354,354}
temp	float	$tmp209	 %read{358,358} %write{357,357}
temp	int	$tmp210	 %read{359,359} %write{358,358}
temp	float	$tmp211	 %read{361,361} %write{360,360}
temp	float	$tmp212	 %read{363,363} %write{362,362}
temp	point	$tmp213	 %read{366,366} %write{365,365}
temp	point	$tmp214	 %read{368,368} %write{367,367}
temp	float	$tmp215	 %read{371,371} %write{370,370}
temp	int	$tmp216	 %read{372,372} %write{371,371}
temp	float	$tmp217	 %read{374,374} %write{373,373}
temp	point	$tmp218	 %read{377,377} %write{376,376}
temp	float	$tmp219	 %read{380,380} %write{379,379}
temp	int	$tmp220	 %read{381,381} %write{380,380}
temp	int	$tmp221	 %read{2147483647,-1} %write{384,384}
temp	int	$tmp222	 %read{2147483647,-1} %write{386,386}
temp	int	$tmp223	 %read{2147483647,-1} %write{388,388}
temp	float	$tmp224	 %read{392,392} %write{391,391}
const	string	$const36	"Voronoi F3"		 %read{393,1466} %write{2147483647,-1}
temp	int	$tmp225	 %read{394,394} %write{393,393}
const	string	$const37	"voronoi_F3S"		 %read{395,1468} %write{2147483647,-1}
temp	float	$tmp226	 %read{564,564} %write{563,563}
const	string	$const38	"voronoi_F3"		 %read{396,1469} %write{2147483647,-1}
temp	float	$tmp227	 %read{401,401} %write{400,400}
temp	float	$tmp228	 %read{400,400} %write{399,399}
temp	float	$tmp229	 %read{404,404} %write{403,403}
temp	float	$tmp230	 %read{403,403} %write{402,402}
temp	float	$tmp231	 %read{407,407} %write{406,406}
temp	float	$tmp232	 %read{406,406} %write{405,405}
temp	int	$tmp233	 %read{415,415} %write{414,414}
temp	int	$tmp234	 %read{412,562} %write{412,562}
temp	int	$tmp235	 %read{419,419} %write{418,418}
temp	int	$tmp236	 %read{416,560} %write{416,560}
temp	int	$tmp237	 %read{423,423} %write{422,422}
temp	int	$tmp238	 %read{420,558} %write{420,558}
temp	float	$tmp239	 %read{427,427} %write{424,424}
temp	float	$tmp240	 %read{427,427} %write{425,425}
temp	float	$tmp241	 %read{427,427} %write{426,426}
temp	color	$tmp242	 %read{441,441} %write{440,440}
temp	point	$tmp243	 %read{434,434} %write{433,433}
temp	float	$tmp244	 %read{433,433} %write{430,430}
temp	float	$tmp245	 %read{433,433} %write{431,431}
temp	float	$tmp246	 %read{433,433} %write{432,432}
temp	point	$tmp247	 %read{439,439} %write{438,438}
temp	float	$tmp248	 %read{438,438} %write{435,435}
temp	float	$tmp249	 %read{438,438} %write{436,436}
temp	float	$tmp250	 %read{438,438} %write{437,437}
temp	point	$tmp251	 %read{443,443} %write{442,442}
temp	int	$tmp252	 %read{447,447} %write{446,446}
temp	int	$tmp253	 %read{450,450} %write{449,449}
temp	int	$tmp254	 %read{453,453} %write{452,452}
temp	float	$tmp255	 %read{458,458} %write{455,455}
temp	float	$tmp256	 %read{455,455} %write{454,454}
temp	float	$tmp257	 %read{458,458} %write{457,457}
temp	float	$tmp258	 %read{457,457} %write{456,456}
temp	float	$tmp259	 %read{461,461} %write{458,458}
temp	float	$tmp260	 %read{461,461} %write{460,460}
temp	float	$tmp261	 %read{460,460} %write{459,459}
temp	int	$tmp262	 %read{463,463} %write{462,462}
temp	float	$tmp263	 %read{471,471} %write{465,465}
temp	float	$tmp264	 %read{465,465} %write{464,464}
temp	float	$tmp265	 %read{471,471} %write{470,470}
temp	float	$tmp266	 %read{470,470} %write{467,467}
temp	float	$tmp267	 %read{467,467} %write{466,466}
temp	float	$tmp268	 %read{470,470} %write{469,469}
temp	float	$tmp269	 %read{469,469} %write{468,468}
temp	int	$tmp270	 %read{473,473} %write{472,472}
temp	float	$tmp271	 %read{480,480} %write{476,476}
temp	float	$tmp272	 %read{476,476} %write{475,475}
temp	float	$tmp273	 %read{475,475} %write{474,474}
temp	float	$tmp274	 %read{480,480} %write{479,479}
temp	float	$tmp275	 %read{479,479} %write{478,478}
temp	float	$tmp276	 %read{478,478} %write{477,477}
temp	float	$tmp277	 %read{484,484} %write{480,480}
temp	float	$tmp278	 %read{484,484} %write{483,483}
temp	float	$tmp279	 %read{483,483} %write{482,482}
temp	float	$tmp280	 %read{482,482} %write{481,481}
temp	int	$tmp281	 %read{486,486} %write{485,485}
temp	float	$tmp282	 %read{491,491} %write{490,490}
temp	float	$tmp283	 %read{490,490} %write{489,489}
temp	vector	$tmp284	 %read{489,489} %write{487,487}
temp	vector	$tmp285	 %read{489,489} %write{488,488}
temp	int	$tmp286	 %read{493,493} %write{492,492}
temp	float	$tmp287	 %read{500,500} %write{496,496}
temp	float	$tmp288	 %read{496,496} %write{495,495}
temp	float	$tmp289	 %read{495,495} %write{494,494}
temp	float	$tmp290	 %read{500,500} %write{499,499}
temp	float	$tmp291	 %read{499,499} %write{498,498}
temp	float	$tmp292	 %read{498,498} %write{497,497}
temp	float	$tmp293	 %read{504,504} %write{500,500}
temp	float	$tmp294	 %read{504,504} %write{503,503}
temp	float	$tmp295	 %read{503,503} %write{502,502}
temp	float	$tmp296	 %read{502,502} %write{501,501}
temp	float	$tmp297	 %read{506,506} %write{504,504}
temp	float	$tmp298	 %read{506,506} %write{505,505}
temp	point	$tmp299	 %read{512,512} %write{511,511}
temp	float	$tmp300	 %read{511,511} %write{508,508}
temp	float	$tmp301	 %read{511,511} %write{509,509}
temp	float	$tmp302	 %read{511,511} %write{510,510}
temp	float	$tmp303	 %read{514,514} %write{513,513}
temp	int	$tmp304	 %read{515,515} %write{514,514}
temp	float	$tmp305	 %read{517,517} %write{516,516}
temp	float	$tmp306	 %read{519,519} %write{518,518}
temp	float	$tmp307	 %read{521,521} %write{520,520}
temp	point	$tmp308	 %read{524,524} %write{523,523}
temp	point	$tmp309	 %read{526,526} %write{525,525}
temp	point	$tmp310	 %read{528,528} %write{527,527}
temp	float	$tmp311	 %read{531,531} %write{530,530}
temp	int	$tmp312	 %read{532,532} %write{531,531}
temp	float	$tmp313	 %read{534,534} %write{533,533}
temp	float	$tmp314	 %read{536,536} %write{535,535}
temp	point	$tmp315	 %read{539,539} %write{538,538}
temp	point	$tmp316	 %read{541,541} %write{540,540}
temp	float	$tmp317	 %read{544,544} %write{543,543}
temp	int	$tmp318	 %read{545,545} %write{544,544}
temp	float	$tmp319	 %read{547,547} %write{546,546}
temp	point	$tmp320	 %read{550,550} %write{549,549}
temp	float	$tmp321	 %read{553,553} %write{552,552}
temp	int	$tmp322	 %read{554,554} %write{553,553}
temp	int	$tmp323	 %read{2147483647,-1} %write{557,557}
temp	int	$tmp324	 %read{2147483647,-1} %write{559,559}
temp	int	$tmp325	 %read{2147483647,-1} %write{561,561}
temp	float	$tmp326	 %read{565,565} %write{564,564}
const	string	$const39	"Voronoi F4"		 %read{566,1639} %write{2147483647,-1}
temp	int	$tmp327	 %read{567,567} %write{566,566}
const	string	$const40	"voronoi_F4S"		 %read{568,1641} %write{2147483647,-1}
temp	float	$tmp328	 %read{737,737} %write{736,736}
const	string	$const41	"voronoi_F4"		 %read{569,1642} %write{2147483647,-1}
temp	float	$tmp329	 %read{574,574} %write{573,573}
temp	float	$tmp330	 %read{573,573} %write{572,572}
temp	float	$tmp331	 %read{577,577} %write{576,576}
temp	float	$tmp332	 %read{576,576} %write{575,575}
temp	float	$tmp333	 %read{580,580} %write{579,579}
temp	float	$tmp334	 %read{579,579} %write{578,578}
temp	int	$tmp335	 %read{588,588} %write{587,587}
temp	int	$tmp336	 %read{585,735} %write{585,735}
temp	int	$tmp337	 %read{592,592} %write{591,591}
temp	int	$tmp338	 %read{589,733} %write{589,733}
temp	int	$tmp339	 %read{596,596} %write{595,595}
temp	int	$tmp340	 %read{593,731} %write{593,731}
temp	float	$tmp341	 %read{600,600} %write{597,597}
temp	float	$tmp342	 %read{600,600} %write{598,598}
temp	float	$tmp343	 %read{600,600} %write{599,599}
temp	color	$tmp344	 %read{614,614} %write{613,613}
temp	point	$tmp345	 %read{607,607} %write{606,606}
temp	float	$tmp346	 %read{606,606} %write{603,603}
temp	float	$tmp347	 %read{606,606} %write{604,604}
temp	float	$tmp348	 %read{606,606} %write{605,605}
temp	point	$tmp349	 %read{612,612} %write{611,611}
temp	float	$tmp350	 %read{611,611} %write{608,608}
temp	float	$tmp351	 %read{611,611} %write{609,609}
temp	float	$tmp352	 %read{611,611} %write{610,610}
temp	point	$tmp353	 %read{616,616} %write{615,615}
temp	int	$tmp354	 %read{620,620} %write{619,619}
temp	int	$tmp355	 %read{623,623} %write{622,622}
temp	int	$tmp356	 %read{626,626} %write{625,625}
temp	float	$tmp357	 %read{631,631} %write{628,628}
temp	float	$tmp358	 %read{628,628} %write{627,627}
temp	float	$tmp359	 %read{631,631} %write{630,630}
temp	float	$tmp360	 %read{630,630} %write{629,629}
temp	float	$tmp361	 %read{634,634} %write{631,631}
temp	float	$tmp362	 %read{634,634} %write{633,633}
temp	float	$tmp363	 %read{633,633} %write{632,632}
temp	int	$tmp364	 %read{636,636} %write{635,635}
temp	float	$tmp365	 %read{644,644} %write{638,638}
temp	float	$tmp366	 %read{638,638} %write{637,637}
temp	float	$tmp367	 %read{644,644} %write{643,643}
temp	float	$tmp368	 %read{643,643} %write{640,640}
temp	float	$tmp369	 %read{640,640} %write{639,639}
temp	float	$tmp370	 %read{643,643} %write{642,642}
temp	float	$tmp371	 %read{642,642} %write{641,641}
temp	int	$tmp372	 %read{646,646} %write{645,645}
temp	float	$tmp373	 %read{653,653} %write{649,649}
temp	float	$tmp374	 %read{649,649} %write{648,648}
temp	float	$tmp375	 %read{648,648} %write{647,647}
temp	float	$tmp376	 %read{653,653} %write{652,652}
temp	float	$tmp377	 %read{652,652} %write{651,651}
temp	float	$tmp378	 %read{651,651} %write{650,650}
temp	float	$tmp379	 %read{657,657} %write{653,653}
temp	float	$tmp380	 %read{657,657} %write{656,656}
temp	float	$tmp381	 %read{656,656} %write{655,655}
temp	float	$tmp382	 %read{655,655} %write{654,654}
temp	int	$tmp383	 %read{659,659} %write{658,658}
temp	float	$tmp384	 %read{664,664} %write{663,663}
temp	float	$tmp385	 %read{663,663} %write{662,662}
temp	vector	$tmp386	 %read{662,662} %write{660,660}
temp	vector	$tmp387	 %read{662,662} %write{661,661}
temp	int	$tmp388	 %read{666,666} %write{665,665}
temp	float	$tmp389	 %read{673,673} %write{669,669}
temp	float	$tmp390	 %read{669,669} %write{668,668}
temp	float	$tmp391	 %read{668,668} %write{667,667}
temp	float	$tmp392	 %read{673,673} %write{672,672}
temp	float	$tmp393	 %read{672,672} %write{671,671}
temp	float	$tmp394	 %read{671,671} %write{670,670}
temp	float	$tmp395	 %read{677,677} %write{673,673}
temp	float	$tmp396	 %read{677,677} %write{676,676}
temp	float	$tmp397	 %read{676,676} %write{675,675}
temp	float	$tmp398	 %read{675,675} %write{674,674}
temp	float	$tmp399	 %read{679,679} %write{677,677}
temp	float	$tmp400	 %read{679,679} %write{678,678}
temp	point	$tmp401	 %read{685,685} %write{684,684}
temp	float	$tmp402	 %read{684,684} %write{681,681}
temp	float	$tmp403	 %read{684,684} %write{682,682}
temp	float	$tmp404	 %read{684,684} %write{683,683}
temp	float	$tmp405	 %read{687,687} %write{686,686}
temp	int	$tmp406	 %read{688,688} %write{687,687}
temp	float	$tmp407	 %read{690,690} %write{689,689}
temp	float	$tmp408	 %read{692,692} %write{691,691}
temp	float	$tmp409	 %read{694,694} %write{693,693}
temp	point	$tmp410	 %read{697,697} %write{696,696}
temp	point	$tmp411	 %read{699,699} %write{698,698}
temp	point	$tmp412	 %read{701,701} %write{700,700}
temp	float	$tmp413	 %read{704,704} %write{703,703}
temp	int	$tmp414	 %read{705,705} %write{704,704}
temp	float	$tmp415	 %read{707,707} %write{706,706}
temp	float	$tmp416	 %read{709,709} %write{708,708}
temp	point	$tmp417	 %read{712,712} %write{711,711}
temp	point	$tmp418	 %read{714,714} %write{713,713}
temp	float	$tmp419	 %read{717,717} %write{716,716}
temp	int	$tmp420	 %read{718,718} %write{717,717}
temp	float	$tmp421	 %read{720,720} %write{719,719}
temp	point	$tmp422	 %read{723,723} %write{722,722}
temp	float	$tmp423	 %read{726,726} %write{725,725}
temp	int	$tmp424	 %read{727,727} %write{726,726}
temp	int	$tmp425	 %read{2147483647,-1} %write{730,730}
temp	int	$tmp426	 %read{2147483647,-1} %write{732,732}
temp	int	$tmp427	 %read{2147483647,-1} %write{734,734}
temp	float	$tmp428	 %read{738,738} %write{737,737}
const	string	$const42	"Voronoi F2-F1"		 %read{739,1812} %write{2147483647,-1}
temp	int	$tmp429	 %read{740,740} %write{739,739}
const	string	$const43	"voronoi_F1F2S"		 %read{741,1814} %write{2147483647,-1}
temp	float	$tmp430	 %read{912,912} %write{911,911}
const	string	$const44	"voronoi_F1F2"		 %read{742,1991} %write{2147483647,-1}
const	string	$const45	"voronoi_FnFn"		 %read{743,1992} %write{2147483647,-1}
temp	float	$tmp431	 %read{747,747} %write{746,746}
temp	float	$tmp432	 %read{746,746} %write{745,745}
temp	float	$tmp433	 %read{750,750} %write{749,749}
temp	float	$tmp434	 %read{749,749} %write{748,748}
temp	float	$tmp435	 %read{753,753} %write{752,752}
temp	float	$tmp436	 %read{752,752} %write{751,751}
temp	int	$tmp437	 %read{761,761} %write{760,760}
temp	int	$tmp438	 %read{758,908} %write{758,908}
temp	int	$tmp439	 %read{765,765} %write{764,764}
temp	int	$tmp440	 %read{762,906} %write{762,906}
temp	int	$tmp441	 %read{769,769} %write{768,768}
temp	int	$tmp442	 %read{766,904} %write{766,904}
temp	float	$tmp443	 %read{773,773} %write{770,770}
temp	float	$tmp444	 %read{773,773} %write{771,771}
temp	float	$tmp445	 %read{773,773} %write{772,772}
temp	color	$tmp446	 %read{787,787} %write{786,786}
temp	point	$tmp447	 %read{780,780} %write{779,779}
temp	float	$tmp448	 %read{779,779} %write{776,776}
temp	float	$tmp449	 %read{779,779} %write{777,777}
temp	float	$tmp450	 %read{779,779} %write{778,778}
temp	point	$tmp451	 %read{785,785} %write{784,784}
temp	float	$tmp452	 %read{784,784} %write{781,781}
temp	float	$tmp453	 %read{784,784} %write{782,782}
temp	float	$tmp454	 %read{784,784} %write{783,783}
temp	point	$tmp455	 %read{789,789} %write{788,788}
temp	int	$tmp456	 %read{793,793} %write{792,792}
temp	int	$tmp457	 %read{796,796} %write{795,795}
temp	int	$tmp458	 %read{799,799} %write{798,798}
temp	float	$tmp459	 %read{804,804} %write{801,801}
temp	float	$tmp460	 %read{801,801} %write{800,800}
temp	float	$tmp461	 %read{804,804} %write{803,803}
temp	float	$tmp462	 %read{803,803} %write{802,802}
temp	float	$tmp463	 %read{807,807} %write{804,804}
temp	float	$tmp464	 %read{807,807} %write{806,806}
temp	float	$tmp465	 %read{806,806} %write{805,805}
temp	int	$tmp466	 %read{809,809} %write{808,808}
temp	float	$tmp467	 %read{817,817} %write{811,811}
temp	float	$tmp468	 %read{811,811} %write{810,810}
temp	float	$tmp469	 %read{817,817} %write{816,816}
temp	float	$tmp470	 %read{816,816} %write{813,813}
temp	float	$tmp471	 %read{813,813} %write{812,812}
temp	float	$tmp472	 %read{816,816} %write{815,815}
temp	float	$tmp473	 %read{815,815} %write{814,814}
temp	int	$tmp474	 %read{819,819} %write{818,818}
temp	float	$tmp475	 %read{826,826} %write{822,822}
temp	float	$tmp476	 %read{822,822} %write{821,821}
temp	float	$tmp477	 %read{821,821} %write{820,820}
temp	float	$tmp478	 %read{826,826} %write{825,825}
temp	float	$tmp479	 %read{825,825} %write{824,824}
temp	float	$tmp480	 %read{824,824} %write{823,823}
temp	float	$tmp481	 %read{830,830} %write{826,826}
temp	float	$tmp482	 %read{830,830} %write{829,829}
temp	float	$tmp483	 %read{829,829} %write{828,828}
temp	float	$tmp484	 %read{828,828} %write{827,827}
temp	int	$tmp485	 %read{832,832} %write{831,831}
temp	float	$tmp486	 %read{837,837} %write{836,836}
temp	float	$tmp487	 %read{836,836} %write{835,835}
temp	vector	$tmp488	 %read{835,835} %write{833,833}
temp	vector	$tmp489	 %read{835,835} %write{834,834}
temp	int	$tmp490	 %read{839,839} %write{838,838}
temp	float	$tmp491	 %read{846,846} %write{842,842}
temp	float	$tmp492	 %read{842,842} %write{841,841}
temp	float	$tmp493	 %read{841,841} %write{840,840}
temp	float	$tmp494	 %read{846,846} %write{845,845}
temp	float	$tmp495	 %read{845,845} %write{844,844}
temp	float	$tmp496	 %read{844,844} %write{843,843}
temp	float	$tmp497	 %read{850,850} %write{846,846}
temp	float	$tmp498	 %read{850,850} %write{849,849}
temp	float	$tmp499	 %read{849,849} %write{848,848}
temp	float	$tmp500	 %read{848,848} %write{847,847}
temp	float	$tmp501	 %read{852,852} %write{850,850}
temp	float	$tmp502	 %read{852,852} %write{851,851}
temp	point	$tmp503	 %read{858,858} %write{857,857}
temp	float	$tmp504	 %read{857,857} %write{854,854}
temp	float	$tmp505	 %read{857,857} %write{855,855}
temp	float	$tmp506	 %read{857,857} %write{856,856}
temp	float	$tmp507	 %read{860,860} %write{859,859}
temp	int	$tmp508	 %read{861,861} %write{860,860}
temp	float	$tmp509	 %read{863,863} %write{862,862}
temp	float	$tmp510	 %read{865,865} %write{864,864}
temp	float	$tmp511	 %read{867,867} %write{866,866}
temp	point	$tmp512	 %read{870,870} %write{869,869}
temp	point	$tmp513	 %read{872,872} %write{871,871}
temp	point	$tmp514	 %read{874,874} %write{873,873}
temp	float	$tmp515	 %read{877,877} %write{876,876}
temp	int	$tmp516	 %read{878,878} %write{877,877}
temp	float	$tmp517	 %read{880,880} %write{879,879}
temp	float	$tmp518	 %read{882,882} %write{881,881}
temp	point	$tmp519	 %read{885,885} %write{884,884}
temp	point	$tmp520	 %read{887,887} %write{886,886}
temp	float	$tmp521	 %read{890,890} %write{889,889}
temp	int	$tmp522	 %read{891,891} %write{890,890}
temp	float	$tmp523	 %read{893,893} %write{892,892}
temp	point	$tmp524	 %read{896,896} %write{895,895}
temp	float	$tmp525	 %read{899,899} %write{898,898}
temp	int	$tmp526	 %read{900,900} %write{899,899}
temp	int	$tmp527	 %read{2147483647,-1} %write{903,903}
temp	int	$tmp528	 %read{2147483647,-1} %write{905,905}
temp	int	$tmp529	 %read{2147483647,-1} %write{907,907}
temp	float	$tmp530	 %read{911,911} %write{909,909}
temp	float	$tmp531	 %read{911,911} %write{910,910}
temp	float	$tmp532	 %read{913,913} %write{912,912}
const	string	$const46	"Voronoi Crackle"		 %read{914,1987} %write{2147483647,-1}
temp	int	$tmp533	 %read{915,915} %write{914,914}
const	string	$const47	"voronoi_CrS"		 %read{916,1989} %write{2147483647,-1}
temp	float	$tmp534	 %read{1094,1094} %write{1091,1092}
const	string	$const48	"voronoi_Cr"		 %read{917,1990} %write{2147483647,-1}
temp	float	$tmp535	 %read{1088,1088} %write{1087,1087}
temp	float	$tmp536	 %read{923,923} %write{922,922}
temp	float	$tmp537	 %read{922,922} %write{921,921}
temp	float	$tmp538	 %read{926,926} %write{925,925}
temp	float	$tmp539	 %read{925,925} %write{924,924}
temp	float	$tmp540	 %read{929,929} %write{928,928}
temp	float	$tmp541	 %read{928,928} %write{927,927}
temp	int	$tmp542	 %read{937,937} %write{936,936}
temp	int	$tmp543	 %read{934,1084} %write{934,1084}
temp	int	$tmp544	 %read{941,941} %write{940,940}
temp	int	$tmp545	 %read{938,1082} %write{938,1082}
temp	int	$tmp546	 %read{945,945} %write{944,944}
temp	int	$tmp547	 %read{942,1080} %write{942,1080}
temp	float	$tmp548	 %read{949,949} %write{946,946}
temp	float	$tmp549	 %read{949,949} %write{947,947}
temp	float	$tmp550	 %read{949,949} %write{948,948}
temp	color	$tmp551	 %read{963,963} %write{962,962}
temp	point	$tmp552	 %read{956,956} %write{955,955}
temp	float	$tmp553	 %read{955,955} %write{952,952}
temp	float	$tmp554	 %read{955,955} %write{953,953}
temp	float	$tmp555	 %read{955,955} %write{954,954}
temp	point	$tmp556	 %read{961,961} %write{960,960}
temp	float	$tmp557	 %read{960,960} %write{957,957}
temp	float	$tmp558	 %read{960,960} %write{958,958}
temp	float	$tmp559	 %read{960,960} %write{959,959}
temp	point	$tmp560	 %read{965,965} %write{964,964}
temp	int	$tmp561	 %read{969,969} %write{968,968}
temp	int	$tmp562	 %read{972,972} %write{971,971}
temp	int	$tmp563	 %read{975,975} %write{974,974}
temp	float	$tmp564	 %read{980,980} %write{977,977}
temp	float	$tmp565	 %read{977,977} %write{976,976}
temp	float	$tmp566	 %read{980,980} %write{979,979}
temp	float	$tmp567	 %read{979,979} %write{978,978}
temp	float	$tmp568	 %read{983,983} %write{980,980}
temp	float	$tmp569	 %read{983,983} %write{982,982}
temp	float	$tmp570	 %read{982,982} %write{981,981}
temp	int	$tmp571	 %read{985,985} %write{984,984}
temp	float	$tmp572	 %read{993,993} %write{987,987}
temp	float	$tmp573	 %read{987,987} %write{986,986}
temp	float	$tmp574	 %read{993,993} %write{992,992}
temp	float	$tmp575	 %read{992,992} %write{989,989}
temp	float	$tmp576	 %read{989,989} %write{988,988}
temp	float	$tmp577	 %read{992,992} %write{991,991}
temp	float	$tmp578	 %read{991,991} %write{990,990}
temp	int	$tmp579	 %read{995,995} %write{994,994}
temp	float	$tmp580	 %read{1002,1002} %write{998,998}
temp	float	$tmp581	 %read{998,998} %write{997,997}
temp	float	$tmp582	 %read{997,997} %write{996,996}
temp	float	$tmp583	 %read{1002,1002} %write{1001,1001}
temp	float	$tmp584	 %read{1001,1001} %write{1000,1000}
temp	float	$tmp585	 %read{1000,1000} %write{999,999}
temp	float	$tmp586	 %read{1006,1006} %write{1002,1002}
temp	float	$tmp587	 %read{1006,1006} %write{1005,1005}
temp	float	$tmp588	 %read{1005,1005} %write{1004,1004}
temp	float	$tmp589	 %read{1004,1004} %write{1003,1003}
temp	int	$tmp590	 %read{1008,1008} %write{1007,1007}
temp	float	$tmp591	 %read{1013,1013} %write{1012,1012}
temp	float	$tmp592	 %read{1012,1012} %write{1011,1011}
temp	vector	$tmp593	 %read{1011,1011} %write{1009,1009}
temp	vector	$tmp594	 %read{1011,1011} %write{1010,1010}
temp	int	$tmp595	 %read{1015,1015} %write{1014,1014}
temp	float	$tmp596	 %read{1022,1022} %write{1018,1018}
temp	float	$tmp597	 %read{1018,1018} %write{1017,1017}
temp	float	$tmp598	 %read{1017,1017} %write{1016,1016}
temp	float	$tmp599	 %read{1022,1022} %write{1021,1021}
temp	float	$tmp600	 %read{1021,1021} %write{1020,1020}
temp	float	$tmp601	 %read{1020,1020} %write{1019,1019}
temp	float	$tmp602	 %read{1026,1026} %write{1022,1022}
temp	float	$tmp603	 %read{1026,1026} %write{1025,1025}
temp	float	$tmp604	 %read{1025,1025} %write{1024,1024}
temp	float	$tmp605	 %read{1024,1024} %write{1023,1023}
temp	float	$tmp606	 %read{1028,1028} %write{1026,1026}
temp	float	$tmp607	 %read{1028,1028} %write{1027,1027}
temp	point	$tmp608	 %read{1034,1034} %write{1033,1033}
temp	float	$tmp609	 %read{1033,1033} %write{1030,1030}
temp	float	$tmp610	 %read{1033,1033} %write{1031,1031}
temp	float	$tmp611	 %read{1033,1033} %write{1032,1032}
temp	float	$tmp612	 %read{1036,1036} %write{1035,1035}
temp	int	$tmp613	 %read{1037,1037} %write{1036,1036}
temp	float	$tmp614	 %read{1039,1039} %write{1038,1038}
temp	float	$tmp615	 %read{1041,1041} %write{1040,1040}
temp	float	$tmp616	 %read{1043,1043} %write{1042,1042}
temp	point	$tmp617	 %read{1046,1046} %write{1045,1045}
temp	point	$tmp618	 %read{1048,1048} %write{1047,1047}
temp	point	$tmp619	 %read{1050,1050} %write{1049,1049}
temp	float	$tmp620	 %read{1053,1053} %write{1052,1052}
temp	int	$tmp621	 %read{1054,1054} %write{1053,1053}
temp	float	$tmp622	 %read{1056,1056} %write{1055,1055}
temp	float	$tmp623	 %read{1058,1058} %write{1057,1057}
temp	point	$tmp624	 %read{1061,1061} %write{1060,1060}
temp	point	$tmp625	 %read{1063,1063} %write{1062,1062}
temp	float	$tmp626	 %read{1066,1066} %write{1065,1065}
temp	int	$tmp627	 %read{1067,1067} %write{1066,1066}
temp	float	$tmp628	 %read{1069,1069} %write{1068,1068}
temp	point	$tmp629	 %read{1072,1072} %write{1071,1071}
temp	float	$tmp630	 %read{1075,1075} %write{1074,1074}
temp	int	$tmp631	 %read{1076,1076} %write{1075,1075}
temp	int	$tmp632	 %read{2147483647,-1} %write{1079,1079}
temp	int	$tmp633	 %read{2147483647,-1} %write{1081,1081}
temp	int	$tmp634	 %read{2147483647,-1} %write{1083,1083}
temp	float	$tmp635	 %read{1087,1087} %write{1085,1085}
temp	float	$tmp636	 %read{1087,1087} %write{1086,1086}
temp	int	$tmp637	 %read{1090,1090} %write{1089,1089}
temp	float	$tmp638	 %read{1095,1095} %write{1094,1094}
const	string	$const49	"Cell Noise"		 %read{1096,2169} %write{2147483647,-1}
temp	int	$tmp639	 %read{1097,1097} %write{1096,1096}
temp	float	$tmp640	 %read{1102,1102} %write{1101,1101}
temp	float	$tmp641	 %read{1103,1103} %write{1102,1102}
temp	float	$tmp642	 %read{1105,1105} %write{1104,1104}
const	float	$const50	0.5		 %read{1106,2238} %write{2147483647,-1}
temp	int	$tmp643	 %read{2147483647,-1} %write{1108,1108}
temp	float	$tmp644	 %read{1111,1111} %write{1110,1110}
temp	int	$tmp645	 %read{1113,1113} %write{1112,1112}
temp	point	$tmp646	 %read{1119,2171} %write{1114,2157}
temp	int	$tmp647	 %read{1118,1118} %write{1117,1117}
temp	int	$tmp648	 %read{1121,1121} %write{1120,1120}
temp	float	$tmp649	 %read{1291,1291} %write{1290,1290}
temp	float	$tmp650	 %read{1128,1128} %write{1127,1127}
temp	float	$tmp651	 %read{1127,1127} %write{1126,1126}
temp	float	$tmp652	 %read{1131,1131} %write{1130,1130}
temp	float	$tmp653	 %read{1130,1130} %write{1129,1129}
temp	float	$tmp654	 %read{1134,1134} %write{1133,1133}
temp	float	$tmp655	 %read{1133,1133} %write{1132,1132}
temp	int	$tmp656	 %read{1142,1142} %write{1141,1141}
temp	int	$tmp657	 %read{1139,1289} %write{1139,1289}
temp	int	$tmp658	 %read{1146,1146} %write{1145,1145}
temp	int	$tmp659	 %read{1143,1287} %write{1143,1287}
temp	int	$tmp660	 %read{1150,1150} %write{1149,1149}
temp	int	$tmp661	 %read{1147,1285} %write{1147,1285}
temp	float	$tmp662	 %read{1154,1154} %write{1151,1151}
temp	float	$tmp663	 %read{1154,1154} %write{1152,1152}
temp	float	$tmp664	 %read{1154,1154} %write{1153,1153}
temp	color	$tmp665	 %read{1168,1168} %write{1167,1167}
temp	point	$tmp666	 %read{1161,1161} %write{1160,1160}
temp	float	$tmp667	 %read{1160,1160} %write{1157,1157}
temp	float	$tmp668	 %read{1160,1160} %write{1158,1158}
temp	float	$tmp669	 %read{1160,1160} %write{1159,1159}
temp	point	$tmp670	 %read{1166,1166} %write{1165,1165}
temp	float	$tmp671	 %read{1165,1165} %write{1162,1162}
temp	float	$tmp672	 %read{1165,1165} %write{1163,1163}
temp	float	$tmp673	 %read{1165,1165} %write{1164,1164}
temp	point	$tmp674	 %read{1170,1170} %write{1169,1169}
temp	int	$tmp675	 %read{1174,1174} %write{1173,1173}
temp	int	$tmp676	 %read{1177,1177} %write{1176,1176}
temp	int	$tmp677	 %read{1180,1180} %write{1179,1179}
temp	float	$tmp678	 %read{1185,1185} %write{1182,1182}
temp	float	$tmp679	 %read{1182,1182} %write{1181,1181}
temp	float	$tmp680	 %read{1185,1185} %write{1184,1184}
temp	float	$tmp681	 %read{1184,1184} %write{1183,1183}
temp	float	$tmp682	 %read{1188,1188} %write{1185,1185}
temp	float	$tmp683	 %read{1188,1188} %write{1187,1187}
temp	float	$tmp684	 %read{1187,1187} %write{1186,1186}
temp	int	$tmp685	 %read{1190,1190} %write{1189,1189}
temp	float	$tmp686	 %read{1198,1198} %write{1192,1192}
temp	float	$tmp687	 %read{1192,1192} %write{1191,1191}
temp	float	$tmp688	 %read{1198,1198} %write{1197,1197}
temp	float	$tmp689	 %read{1197,1197} %write{1194,1194}
temp	float	$tmp690	 %read{1194,1194} %write{1193,1193}
temp	float	$tmp691	 %read{1197,1197} %write{1196,1196}
temp	float	$tmp692	 %read{1196,1196} %write{1195,1195}
temp	int	$tmp693	 %read{1200,1200} %write{1199,1199}
temp	float	$tmp694	 %read{1207,1207} %write{1203,1203}
temp	float	$tmp695	 %read{1203,1203} %write{1202,1202}
temp	float	$tmp696	 %read{1202,1202} %write{1201,1201}
temp	float	$tmp697	 %read{1207,1207} %write{1206,1206}
temp	float	$tmp698	 %read{1206,1206} %write{1205,1205}
temp	float	$tmp699	 %read{1205,1205} %write{1204,1204}
temp	float	$tmp700	 %read{1211,1211} %write{1207,1207}
temp	float	$tmp701	 %read{1211,1211} %write{1210,1210}
temp	float	$tmp702	 %read{1210,1210} %write{1209,1209}
temp	float	$tmp703	 %read{1209,1209} %write{1208,1208}
temp	int	$tmp704	 %read{1213,1213} %write{1212,1212}
temp	float	$tmp705	 %read{1218,1218} %write{1217,1217}
temp	float	$tmp706	 %read{1217,1217} %write{1216,1216}
temp	vector	$tmp707	 %read{1216,1216} %write{1214,1214}
temp	vector	$tmp708	 %read{1216,1216} %write{1215,1215}
temp	int	$tmp709	 %read{1220,1220} %write{1219,1219}
temp	float	$tmp710	 %read{1227,1227} %write{1223,1223}
temp	float	$tmp711	 %read{1223,1223} %write{1222,1222}
temp	float	$tmp712	 %read{1222,1222} %write{1221,1221}
temp	float	$tmp713	 %read{1227,1227} %write{1226,1226}
temp	float	$tmp714	 %read{1226,1226} %write{1225,1225}
temp	float	$tmp715	 %read{1225,1225} %write{1224,1224}
temp	float	$tmp716	 %read{1231,1231} %write{1227,1227}
temp	float	$tmp717	 %read{1231,1231} %write{1230,1230}
temp	float	$tmp718	 %read{1230,1230} %write{1229,1229}
temp	float	$tmp719	 %read{1229,1229} %write{1228,1228}
temp	float	$tmp720	 %read{1233,1233} %write{1231,1231}
temp	float	$tmp721	 %read{1233,1233} %write{1232,1232}
temp	point	$tmp722	 %read{1239,1239} %write{1238,1238}
temp	float	$tmp723	 %read{1238,1238} %write{1235,1235}
temp	float	$tmp724	 %read{1238,1238} %write{1236,1236}
temp	float	$tmp725	 %read{1238,1238} %write{1237,1237}
temp	float	$tmp726	 %read{1241,1241} %write{1240,1240}
temp	int	$tmp727	 %read{1242,1242} %write{1241,1241}
temp	float	$tmp728	 %read{1244,1244} %write{1243,1243}
temp	float	$tmp729	 %read{1246,1246} %write{1245,1245}
temp	float	$tmp730	 %read{1248,1248} %write{1247,1247}
temp	point	$tmp731	 %read{1251,1251} %write{1250,1250}
temp	point	$tmp732	 %read{1253,1253} %write{1252,1252}
temp	point	$tmp733	 %read{1255,1255} %write{1254,1254}
temp	float	$tmp734	 %read{1258,1258} %write{1257,1257}
temp	int	$tmp735	 %read{1259,1259} %write{1258,1258}
temp	float	$tmp736	 %read{1261,1261} %write{1260,1260}
temp	float	$tmp737	 %read{1263,1263} %write{1262,1262}
temp	point	$tmp738	 %read{1266,1266} %write{1265,1265}
temp	point	$tmp739	 %read{1268,1268} %write{1267,1267}
temp	float	$tmp740	 %read{1271,1271} %write{1270,1270}
temp	int	$tmp741	 %read{1272,1272} %write{1271,1271}
temp	float	$tmp742	 %read{1274,1274} %write{1273,1273}
temp	point	$tmp743	 %read{1277,1277} %write{1276,1276}
temp	float	$tmp744	 %read{1280,1280} %write{1279,1279}
temp	int	$tmp745	 %read{1281,1281} %write{1280,1280}
temp	int	$tmp746	 %read{2147483647,-1} %write{1284,1284}
temp	int	$tmp747	 %read{2147483647,-1} %write{1286,1286}
temp	int	$tmp748	 %read{2147483647,-1} %write{1288,1288}
temp	float	$tmp749	 %read{1292,1292} %write{1291,1291}
temp	int	$tmp750	 %read{1294,1294} %write{1293,1293}
temp	float	$tmp751	 %read{1464,1464} %write{1463,1463}
temp	float	$tmp752	 %read{1301,1301} %write{1300,1300}
temp	float	$tmp753	 %read{1300,1300} %write{1299,1299}
temp	float	$tmp754	 %read{1304,1304} %write{1303,1303}
temp	float	$tmp755	 %read{1303,1303} %write{1302,1302}
temp	float	$tmp756	 %read{1307,1307} %write{1306,1306}
temp	float	$tmp757	 %read{1306,1306} %write{1305,1305}
temp	int	$tmp758	 %read{1315,1315} %write{1314,1314}
temp	int	$tmp759	 %read{1312,1462} %write{1312,1462}
temp	int	$tmp760	 %read{1319,1319} %write{1318,1318}
temp	int	$tmp761	 %read{1316,1460} %write{1316,1460}
temp	int	$tmp762	 %read{1323,1323} %write{1322,1322}
temp	int	$tmp763	 %read{1320,1458} %write{1320,1458}
temp	float	$tmp764	 %read{1327,1327} %write{1324,1324}
temp	float	$tmp765	 %read{1327,1327} %write{1325,1325}
temp	float	$tmp766	 %read{1327,1327} %write{1326,1326}
temp	color	$tmp767	 %read{1341,1341} %write{1340,1340}
temp	point	$tmp768	 %read{1334,1334} %write{1333,1333}
temp	float	$tmp769	 %read{1333,1333} %write{1330,1330}
temp	float	$tmp770	 %read{1333,1333} %write{1331,1331}
temp	float	$tmp771	 %read{1333,1333} %write{1332,1332}
temp	point	$tmp772	 %read{1339,1339} %write{1338,1338}
temp	float	$tmp773	 %read{1338,1338} %write{1335,1335}
temp	float	$tmp774	 %read{1338,1338} %write{1336,1336}
temp	float	$tmp775	 %read{1338,1338} %write{1337,1337}
temp	point	$tmp776	 %read{1343,1343} %write{1342,1342}
temp	int	$tmp777	 %read{1347,1347} %write{1346,1346}
temp	int	$tmp778	 %read{1350,1350} %write{1349,1349}
temp	int	$tmp779	 %read{1353,1353} %write{1352,1352}
temp	float	$tmp780	 %read{1358,1358} %write{1355,1355}
temp	float	$tmp781	 %read{1355,1355} %write{1354,1354}
temp	float	$tmp782	 %read{1358,1358} %write{1357,1357}
temp	float	$tmp783	 %read{1357,1357} %write{1356,1356}
temp	float	$tmp784	 %read{1361,1361} %write{1358,1358}
temp	float	$tmp785	 %read{1361,1361} %write{1360,1360}
temp	float	$tmp786	 %read{1360,1360} %write{1359,1359}
temp	int	$tmp787	 %read{1363,1363} %write{1362,1362}
temp	float	$tmp788	 %read{1371,1371} %write{1365,1365}
temp	float	$tmp789	 %read{1365,1365} %write{1364,1364}
temp	float	$tmp790	 %read{1371,1371} %write{1370,1370}
temp	float	$tmp791	 %read{1370,1370} %write{1367,1367}
temp	float	$tmp792	 %read{1367,1367} %write{1366,1366}
temp	float	$tmp793	 %read{1370,1370} %write{1369,1369}
temp	float	$tmp794	 %read{1369,1369} %write{1368,1368}
temp	int	$tmp795	 %read{1373,1373} %write{1372,1372}
temp	float	$tmp796	 %read{1380,1380} %write{1376,1376}
temp	float	$tmp797	 %read{1376,1376} %write{1375,1375}
temp	float	$tmp798	 %read{1375,1375} %write{1374,1374}
temp	float	$tmp799	 %read{1380,1380} %write{1379,1379}
temp	float	$tmp800	 %read{1379,1379} %write{1378,1378}
temp	float	$tmp801	 %read{1378,1378} %write{1377,1377}
temp	float	$tmp802	 %read{1384,1384} %write{1380,1380}
temp	float	$tmp803	 %read{1384,1384} %write{1383,1383}
temp	float	$tmp804	 %read{1383,1383} %write{1382,1382}
temp	float	$tmp805	 %read{1382,1382} %write{1381,1381}
temp	int	$tmp806	 %read{1386,1386} %write{1385,1385}
temp	float	$tmp807	 %read{1391,1391} %write{1390,1390}
temp	float	$tmp808	 %read{1390,1390} %write{1389,1389}
temp	vector	$tmp809	 %read{1389,1389} %write{1387,1387}
temp	vector	$tmp810	 %read{1389,1389} %write{1388,1388}
temp	int	$tmp811	 %read{1393,1393} %write{1392,1392}
temp	float	$tmp812	 %read{1400,1400} %write{1396,1396}
temp	float	$tmp813	 %read{1396,1396} %write{1395,1395}
temp	float	$tmp814	 %read{1395,1395} %write{1394,1394}
temp	float	$tmp815	 %read{1400,1400} %write{1399,1399}
temp	float	$tmp816	 %read{1399,1399} %write{1398,1398}
temp	float	$tmp817	 %read{1398,1398} %write{1397,1397}
temp	float	$tmp818	 %read{1404,1404} %write{1400,1400}
temp	float	$tmp819	 %read{1404,1404} %write{1403,1403}
temp	float	$tmp820	 %read{1403,1403} %write{1402,1402}
temp	float	$tmp821	 %read{1402,1402} %write{1401,1401}
temp	float	$tmp822	 %read{1406,1406} %write{1404,1404}
temp	float	$tmp823	 %read{1406,1406} %write{1405,1405}
temp	point	$tmp824	 %read{1412,1412} %write{1411,1411}
temp	float	$tmp825	 %read{1411,1411} %write{1408,1408}
temp	float	$tmp826	 %read{1411,1411} %write{1409,1409}
temp	float	$tmp827	 %read{1411,1411} %write{1410,1410}
temp	float	$tmp828	 %read{1414,1414} %write{1413,1413}
temp	int	$tmp829	 %read{1415,1415} %write{1414,1414}
temp	float	$tmp830	 %read{1417,1417} %write{1416,1416}
temp	float	$tmp831	 %read{1419,1419} %write{1418,1418}
temp	float	$tmp832	 %read{1421,1421} %write{1420,1420}
temp	point	$tmp833	 %read{1424,1424} %write{1423,1423}
temp	point	$tmp834	 %read{1426,1426} %write{1425,1425}
temp	point	$tmp835	 %read{1428,1428} %write{1427,1427}
temp	float	$tmp836	 %read{1431,1431} %write{1430,1430}
temp	int	$tmp837	 %read{1432,1432} %write{1431,1431}
temp	float	$tmp838	 %read{1434,1434} %write{1433,1433}
temp	float	$tmp839	 %read{1436,1436} %write{1435,1435}
temp	point	$tmp840	 %read{1439,1439} %write{1438,1438}
temp	point	$tmp841	 %read{1441,1441} %write{1440,1440}
temp	float	$tmp842	 %read{1444,1444} %write{1443,1443}
temp	int	$tmp843	 %read{1445,1445} %write{1444,1444}
temp	float	$tmp844	 %read{1447,1447} %write{1446,1446}
temp	point	$tmp845	 %read{1450,1450} %write{1449,1449}
temp	float	$tmp846	 %read{1453,1453} %write{1452,1452}
temp	int	$tmp847	 %read{1454,1454} %write{1453,1453}
temp	int	$tmp848	 %read{2147483647,-1} %write{1457,1457}
temp	int	$tmp849	 %read{2147483647,-1} %write{1459,1459}
temp	int	$tmp850	 %read{2147483647,-1} %write{1461,1461}
temp	float	$tmp851	 %read{1465,1465} %write{1464,1464}
temp	int	$tmp852	 %read{1467,1467} %write{1466,1466}
temp	float	$tmp853	 %read{1637,1637} %write{1636,1636}
temp	float	$tmp854	 %read{1474,1474} %write{1473,1473}
temp	float	$tmp855	 %read{1473,1473} %write{1472,1472}
temp	float	$tmp856	 %read{1477,1477} %write{1476,1476}
temp	float	$tmp857	 %read{1476,1476} %write{1475,1475}
temp	float	$tmp858	 %read{1480,1480} %write{1479,1479}
temp	float	$tmp859	 %read{1479,1479} %write{1478,1478}
temp	int	$tmp860	 %read{1488,1488} %write{1487,1487}
temp	int	$tmp861	 %read{1485,1635} %write{1485,1635}
temp	int	$tmp862	 %read{1492,1492} %write{1491,1491}
temp	int	$tmp863	 %read{1489,1633} %write{1489,1633}
temp	int	$tmp864	 %read{1496,1496} %write{1495,1495}
temp	int	$tmp865	 %read{1493,1631} %write{1493,1631}
temp	float	$tmp866	 %read{1500,1500} %write{1497,1497}
temp	float	$tmp867	 %read{1500,1500} %write{1498,1498}
temp	float	$tmp868	 %read{1500,1500} %write{1499,1499}
temp	color	$tmp869	 %read{1514,1514} %write{1513,1513}
temp	point	$tmp870	 %read{1507,1507} %write{1506,1506}
temp	float	$tmp871	 %read{1506,1506} %write{1503,1503}
temp	float	$tmp872	 %read{1506,1506} %write{1504,1504}
temp	float	$tmp873	 %read{1506,1506} %write{1505,1505}
temp	point	$tmp874	 %read{1512,1512} %write{1511,1511}
temp	float	$tmp875	 %read{1511,1511} %write{1508,1508}
temp	float	$tmp876	 %read{1511,1511} %write{1509,1509}
temp	float	$tmp877	 %read{1511,1511} %write{1510,1510}
temp	point	$tmp878	 %read{1516,1516} %write{1515,1515}
temp	int	$tmp879	 %read{1520,1520} %write{1519,1519}
temp	int	$tmp880	 %read{1523,1523} %write{1522,1522}
temp	int	$tmp881	 %read{1526,1526} %write{1525,1525}
temp	float	$tmp882	 %read{1531,1531} %write{1528,1528}
temp	float	$tmp883	 %read{1528,1528} %write{1527,1527}
temp	float	$tmp884	 %read{1531,1531} %write{1530,1530}
temp	float	$tmp885	 %read{1530,1530} %write{1529,1529}
temp	float	$tmp886	 %read{1534,1534} %write{1531,1531}
temp	float	$tmp887	 %read{1534,1534} %write{1533,1533}
temp	float	$tmp888	 %read{1533,1533} %write{1532,1532}
temp	int	$tmp889	 %read{1536,1536} %write{1535,1535}
temp	float	$tmp890	 %read{1544,1544} %write{1538,1538}
temp	float	$tmp891	 %read{1538,1538} %write{1537,1537}
temp	float	$tmp892	 %read{1544,1544} %write{1543,1543}
temp	float	$tmp893	 %read{1543,1543} %write{1540,1540}
temp	float	$tmp894	 %read{1540,1540} %write{1539,1539}
temp	float	$tmp895	 %read{1543,1543} %write{1542,1542}
temp	float	$tmp896	 %read{1542,1542} %write{1541,1541}
temp	int	$tmp897	 %read{1546,1546} %write{1545,1545}
temp	float	$tmp898	 %read{1553,1553} %write{1549,1549}
temp	float	$tmp899	 %read{1549,1549} %write{1548,1548}
temp	float	$tmp900	 %read{1548,1548} %write{1547,1547}
temp	float	$tmp901	 %read{1553,1553} %write{1552,1552}
temp	float	$tmp902	 %read{1552,1552} %write{1551,1551}
temp	float	$tmp903	 %read{1551,1551} %write{1550,1550}
temp	float	$tmp904	 %read{1557,1557} %write{1553,1553}
temp	float	$tmp905	 %read{1557,1557} %write{1556,1556}
temp	float	$tmp906	 %read{1556,1556} %write{1555,1555}
temp	float	$tmp907	 %read{1555,1555} %write{1554,1554}
temp	int	$tmp908	 %read{1559,1559} %write{1558,1558}
temp	float	$tmp909	 %read{1564,1564} %write{1563,1563}
temp	float	$tmp910	 %read{1563,1563} %write{1562,1562}
temp	vector	$tmp911	 %read{1562,1562} %write{1560,1560}
temp	vector	$tmp912	 %read{1562,1562} %write{1561,1561}
temp	int	$tmp913	 %read{1566,1566} %write{1565,1565}
temp	float	$tmp914	 %read{1573,1573} %write{1569,1569}
temp	float	$tmp915	 %read{1569,1569} %write{1568,1568}
temp	float	$tmp916	 %read{1568,1568} %write{1567,1567}
temp	float	$tmp917	 %read{1573,1573} %write{1572,1572}
temp	float	$tmp918	 %read{1572,1572} %write{1571,1571}
temp	float	$tmp919	 %read{1571,1571} %write{1570,1570}
temp	float	$tmp920	 %read{1577,1577} %write{1573,1573}
temp	float	$tmp921	 %read{1577,1577} %write{1576,1576}
temp	float	$tmp922	 %read{1576,1576} %write{1575,1575}
temp	float	$tmp923	 %read{1575,1575} %write{1574,1574}
temp	float	$tmp924	 %read{1579,1579} %write{1577,1577}
temp	float	$tmp925	 %read{1579,1579} %write{1578,1578}
temp	point	$tmp926	 %read{1585,1585} %write{1584,1584}
temp	float	$tmp927	 %read{1584,1584} %write{1581,1581}
temp	float	$tmp928	 %read{1584,1584} %write{1582,1582}
temp	float	$tmp929	 %read{1584,1584} %write{1583,1583}
temp	float	$tmp930	 %read{1587,1587} %write{1586,1586}
temp	int	$tmp931	 %read{1588,1588} %write{1587,1587}
temp	float	$tmp932	 %read{1590,1590} %write{1589,1589}
temp	float	$tmp933	 %read{1592,1592} %write{1591,1591}
temp	float	$tmp934	 %read{1594,1594} %write{1593,1593}
temp	point	$tmp935	 %read{1597,1597} %write{1596,1596}
temp	point	$tmp936	 %read{1599,1599} %write{1598,1598}
temp	point	$tmp937	 %read{1601,1601} %write{1600,1600}
temp	float	$tmp938	 %read{1604,1604} %write{1603,1603}
temp	int	$tmp939	 %read{1605,1605} %write{1604,1604}
temp	float	$tmp940	 %read{1607,1607} %write{1606,1606}
temp	float	$tmp941	 %read{1609,1609} %write{1608,1608}
temp	point	$tmp942	 %read{1612,1612} %write{1611,1611}
temp	point	$tmp943	 %read{1614,1614} %write{1613,1613}
temp	float	$tmp944	 %read{1617,1617} %write{1616,1616}
temp	int	$tmp945	 %read{1618,1618} %write{1617,1617}
temp	float	$tmp946	 %read{1620,1620} %write{1619,1619}
temp	point	$tmp947	 %read{1623,1623} %write{1622,1622}
temp	float	$tmp948	 %read{1626,1626} %write{1625,1625}
temp	int	$tmp949	 %read{1627,1627} %write{1626,1626}
temp	int	$tmp950	 %read{2147483647,-1} %write{1630,1630}
temp	int	$tmp951	 %read{2147483647,-1} %write{1632,1632}
temp	int	$tmp952	 %read{2147483647,-1} %write{1634,1634}
temp	float	$tmp953	 %read{1638,1638} %write{1637,1637}
temp	int	$tmp954	 %read{1640,1640} %write{1639,1639}
temp	float	$tmp955	 %read{1810,1810} %write{1809,1809}
temp	float	$tmp956	 %read{1647,1647} %write{1646,1646}
temp	float	$tmp957	 %read{1646,1646} %write{1645,1645}
temp	float	$tmp958	 %read{1650,1650} %write{1649,1649}
temp	float	$tmp959	 %read{1649,1649} %write{1648,1648}
temp	float	$tmp960	 %read{1653,1653} %write{1652,1652}
temp	float	$tmp961	 %read{1652,1652} %write{1651,1651}
temp	int	$tmp962	 %read{1661,1661} %write{1660,1660}
temp	int	$tmp963	 %read{1658,1808} %write{1658,1808}
temp	int	$tmp964	 %read{1665,1665} %write{1664,1664}
temp	int	$tmp965	 %read{1662,1806} %write{1662,1806}
temp	int	$tmp966	 %read{1669,1669} %write{1668,1668}
temp	int	$tmp967	 %read{1666,1804} %write{1666,1804}
temp	float	$tmp968	 %read{1673,1673} %write{1670,1670}
temp	float	$tmp969	 %read{1673,1673} %write{1671,1671}
temp	float	$tmp970	 %read{1673,1673} %write{1672,1672}
temp	color	$tmp971	 %read{1687,1687} %write{1686,1686}
temp	point	$tmp972	 %read{1680,1680} %write{1679,1679}
temp	float	$tmp973	 %read{1679,1679} %write{1676,1676}
temp	float	$tmp974	 %read{1679,1679} %write{1677,1677}
temp	float	$tmp975	 %read{1679,1679} %write{1678,1678}
temp	point	$tmp976	 %read{1685,1685} %write{1684,1684}
temp	float	$tmp977	 %read{1684,1684} %write{1681,1681}
temp	float	$tmp978	 %read{1684,1684} %write{1682,1682}
temp	float	$tmp979	 %read{1684,1684} %write{1683,1683}
temp	point	$tmp980	 %read{1689,1689} %write{1688,1688}
temp	int	$tmp981	 %read{1693,1693} %write{1692,1692}
temp	int	$tmp982	 %read{1696,1696} %write{1695,1695}
temp	int	$tmp983	 %read{1699,1699} %write{1698,1698}
temp	float	$tmp984	 %read{1704,1704} %write{1701,1701}
temp	float	$tmp985	 %read{1701,1701} %write{1700,1700}
temp	float	$tmp986	 %read{1704,1704} %write{1703,1703}
temp	float	$tmp987	 %read{1703,1703} %write{1702,1702}
temp	float	$tmp988	 %read{1707,1707} %write{1704,1704}
temp	float	$tmp989	 %read{1707,1707} %write{1706,1706}
temp	float	$tmp990	 %read{1706,1706} %write{1705,1705}
temp	int	$tmp991	 %read{1709,1709} %write{1708,1708}
temp	float	$tmp992	 %read{1717,1717} %write{1711,1711}
temp	float	$tmp993	 %read{1711,1711} %write{1710,1710}
temp	float	$tmp994	 %read{1717,1717} %write{1716,1716}
temp	float	$tmp995	 %read{1716,1716} %write{1713,1713}
temp	float	$tmp996	 %read{1713,1713} %write{1712,1712}
temp	float	$tmp997	 %read{1716,1716} %write{1715,1715}
temp	float	$tmp998	 %read{1715,1715} %write{1714,1714}
temp	int	$tmp999	 %read{1719,1719} %write{1718,1718}
temp	float	$tmp1000	 %read{1726,1726} %write{1722,1722}
temp	float	$tmp1001	 %read{1722,1722} %write{1721,1721}
temp	float	$tmp1002	 %read{1721,1721} %write{1720,1720}
temp	float	$tmp1003	 %read{1726,1726} %write{1725,1725}
temp	float	$tmp1004	 %read{1725,1725} %write{1724,1724}
temp	float	$tmp1005	 %read{1724,1724} %write{1723,1723}
temp	float	$tmp1006	 %read{1730,1730} %write{1726,1726}
temp	float	$tmp1007	 %read{1730,1730} %write{1729,1729}
temp	float	$tmp1008	 %read{1729,1729} %write{1728,1728}
temp	float	$tmp1009	 %read{1728,1728} %write{1727,1727}
temp	int	$tmp1010	 %read{1732,1732} %write{1731,1731}
temp	float	$tmp1011	 %read{1737,1737} %write{1736,1736}
temp	float	$tmp1012	 %read{1736,1736} %write{1735,1735}
temp	vector	$tmp1013	 %read{1735,1735} %write{1733,1733}
temp	vector	$tmp1014	 %read{1735,1735} %write{1734,1734}
temp	int	$tmp1015	 %read{1739,1739} %write{1738,1738}
temp	float	$tmp1016	 %read{1746,1746} %write{1742,1742}
temp	float	$tmp1017	 %read{1742,1742} %write{1741,1741}
temp	float	$tmp1018	 %read{1741,1741} %write{1740,1740}
temp	float	$tmp1019	 %read{1746,1746} %write{1745,1745}
temp	float	$tmp1020	 %read{1745,1745} %write{1744,1744}
temp	float	$tmp1021	 %read{1744,1744} %write{1743,1743}
temp	float	$tmp1022	 %read{1750,1750} %write{1746,1746}
temp	float	$tmp1023	 %read{1750,1750} %write{1749,1749}
temp	float	$tmp1024	 %read{1749,1749} %write{1748,1748}
temp	float	$tmp1025	 %read{1748,1748} %write{1747,1747}
temp	float	$tmp1026	 %read{1752,1752} %write{1750,1750}
temp	float	$tmp1027	 %read{1752,1752} %write{1751,1751}
temp	point	$tmp1028	 %read{1758,1758} %write{1757,1757}
temp	float	$tmp1029	 %read{1757,1757} %write{1754,1754}
temp	float	$tmp1030	 %read{1757,1757} %write{1755,1755}
temp	float	$tmp1031	 %read{1757,1757} %write{1756,1756}
temp	float	$tmp1032	 %read{1760,1760} %write{1759,1759}
temp	int	$tmp1033	 %read{1761,1761} %write{1760,1760}
temp	float	$tmp1034	 %read{1763,1763} %write{1762,1762}
temp	float	$tmp1035	 %read{1765,1765} %write{1764,1764}
temp	float	$tmp1036	 %read{1767,1767} %write{1766,1766}
temp	point	$tmp1037	 %read{1770,1770} %write{1769,1769}
temp	point	$tmp1038	 %read{1772,1772} %write{1771,1771}
temp	point	$tmp1039	 %read{1774,1774} %write{1773,1773}
temp	float	$tmp1040	 %read{1777,1777} %write{1776,1776}
temp	int	$tmp1041	 %read{1778,1778} %write{1777,1777}
temp	float	$tmp1042	 %read{1780,1780} %write{1779,1779}
temp	float	$tmp1043	 %read{1782,1782} %write{1781,1781}
temp	point	$tmp1044	 %read{1785,1785} %write{1784,1784}
temp	point	$tmp1045	 %read{1787,1787} %write{1786,1786}
temp	float	$tmp1046	 %read{1790,1790} %write{1789,1789}
temp	int	$tmp1047	 %read{1791,1791} %write{1790,1790}
temp	float	$tmp1048	 %read{1793,1793} %write{1792,1792}
temp	point	$tmp1049	 %read{1796,1796} %write{1795,1795}
temp	float	$tmp1050	 %read{1799,1799} %write{1798,1798}
temp	int	$tmp1051	 %read{1800,1800} %write{1799,1799}
temp	int	$tmp1052	 %read{2147483647,-1} %write{1803,1803}
temp	int	$tmp1053	 %read{2147483647,-1} %write{1805,1805}
temp	int	$tmp1054	 %read{2147483647,-1} %write{1807,1807}
temp	float	$tmp1055	 %read{1811,1811} %write{1810,1810}
temp	int	$tmp1056	 %read{1813,1813} %write{1812,1812}
temp	float	$tmp1057	 %read{1985,1985} %write{1984,1984}
temp	float	$tmp1058	 %read{1820,1820} %write{1819,1819}
temp	float	$tmp1059	 %read{1819,1819} %write{1818,1818}
temp	float	$tmp1060	 %read{1823,1823} %write{1822,1822}
temp	float	$tmp1061	 %read{1822,1822} %write{1821,1821}
temp	float	$tmp1062	 %read{1826,1826} %write{1825,1825}
temp	float	$tmp1063	 %read{1825,1825} %write{1824,1824}
temp	int	$tmp1064	 %read{1834,1834} %write{1833,1833}
temp	int	$tmp1065	 %read{1831,1981} %write{1831,1981}
temp	int	$tmp1066	 %read{1838,1838} %write{1837,1837}
temp	int	$tmp1067	 %read{1835,1979} %write{1835,1979}
temp	int	$tmp1068	 %read{1842,1842} %write{1841,1841}
temp	int	$tmp1069	 %read{1839,1977} %write{1839,1977}
temp	float	$tmp1070	 %read{1846,1846} %write{1843,1843}
temp	float	$tmp1071	 %read{1846,1846} %write{1844,1844}
temp	float	$tmp1072	 %read{1846,1846} %write{1845,1845}
temp	color	$tmp1073	 %read{1860,1860} %write{1859,1859}
temp	point	$tmp1074	 %read{1853,1853} %write{1852,1852}
temp	float	$tmp1075	 %read{1852,1852} %write{1849,1849}
temp	float	$tmp1076	 %read{1852,1852} %write{1850,1850}
temp	float	$tmp1077	 %read{1852,1852} %write{1851,1851}
temp	point	$tmp1078	 %read{1858,1858} %write{1857,1857}
temp	float	$tmp1079	 %read{1857,1857} %write{1854,1854}
temp	float	$tmp1080	 %read{1857,1857} %write{1855,1855}
temp	float	$tmp1081	 %read{1857,1857} %write{1856,1856}
temp	point	$tmp1082	 %read{1862,1862} %write{1861,1861}
temp	int	$tmp1083	 %read{1866,1866} %write{1865,1865}
temp	int	$tmp1084	 %read{1869,1869} %write{1868,1868}
temp	int	$tmp1085	 %read{1872,1872} %write{1871,1871}
temp	float	$tmp1086	 %read{1877,1877} %write{1874,1874}
temp	float	$tmp1087	 %read{1874,1874} %write{1873,1873}
temp	float	$tmp1088	 %read{1877,1877} %write{1876,1876}
temp	float	$tmp1089	 %read{1876,1876} %write{1875,1875}
temp	float	$tmp1090	 %read{1880,1880} %write{1877,1877}
temp	float	$tmp1091	 %read{1880,1880} %write{1879,1879}
temp	float	$tmp1092	 %read{1879,1879} %write{1878,1878}
temp	int	$tmp1093	 %read{1882,1882} %write{1881,1881}
temp	float	$tmp1094	 %read{1890,1890} %write{1884,1884}
temp	float	$tmp1095	 %read{1884,1884} %write{1883,1883}
temp	float	$tmp1096	 %read{1890,1890} %write{1889,1889}
temp	float	$tmp1097	 %read{1889,1889} %write{1886,1886}
temp	float	$tmp1098	 %read{1886,1886} %write{1885,1885}
temp	float	$tmp1099	 %read{1889,1889} %write{1888,1888}
temp	float	$tmp1100	 %read{1888,1888} %write{1887,1887}
temp	int	$tmp1101	 %read{1892,1892} %write{1891,1891}
temp	float	$tmp1102	 %read{1899,1899} %write{1895,1895}
temp	float	$tmp1103	 %read{1895,1895} %write{1894,1894}
temp	float	$tmp1104	 %read{1894,1894} %write{1893,1893}
temp	float	$tmp1105	 %read{1899,1899} %write{1898,1898}
temp	float	$tmp1106	 %read{1898,1898} %write{1897,1897}
temp	float	$tmp1107	 %read{1897,1897} %write{1896,1896}
temp	float	$tmp1108	 %read{1903,1903} %write{1899,1899}
temp	float	$tmp1109	 %read{1903,1903} %write{1902,1902}
temp	float	$tmp1110	 %read{1902,1902} %write{1901,1901}
temp	float	$tmp1111	 %read{1901,1901} %write{1900,1900}
temp	int	$tmp1112	 %read{1905,1905} %write{1904,1904}
temp	float	$tmp1113	 %read{1910,1910} %write{1909,1909}
temp	float	$tmp1114	 %read{1909,1909} %write{1908,1908}
temp	vector	$tmp1115	 %read{1908,1908} %write{1906,1906}
temp	vector	$tmp1116	 %read{1908,1908} %write{1907,1907}
temp	int	$tmp1117	 %read{1912,1912} %write{1911,1911}
temp	float	$tmp1118	 %read{1919,1919} %write{1915,1915}
temp	float	$tmp1119	 %read{1915,1915} %write{1914,1914}
temp	float	$tmp1120	 %read{1914,1914} %write{1913,1913}
temp	float	$tmp1121	 %read{1919,1919} %write{1918,1918}
temp	float	$tmp1122	 %read{1918,1918} %write{1917,1917}
temp	float	$tmp1123	 %read{1917,1917} %write{1916,1916}
temp	float	$tmp1124	 %read{1923,1923} %write{1919,1919}
temp	float	$tmp1125	 %read{1923,1923} %write{1922,1922}
temp	float	$tmp1126	 %read{1922,1922} %write{1921,1921}
temp	float	$tmp1127	 %read{1921,1921} %write{1920,1920}
temp	float	$tmp1128	 %read{1925,1925} %write{1923,1923}
temp	float	$tmp1129	 %read{1925,1925} %write{1924,1924}
temp	point	$tmp1130	 %read{1931,1931} %write{1930,1930}
temp	float	$tmp1131	 %read{1930,1930} %write{1927,1927}
temp	float	$tmp1132	 %read{1930,1930} %write{1928,1928}
temp	float	$tmp1133	 %read{1930,1930} %write{1929,1929}
temp	float	$tmp1134	 %read{1933,1933} %write{1932,1932}
temp	int	$tmp1135	 %read{1934,1934} %write{1933,1933}
temp	float	$tmp1136	 %read{1936,1936} %write{1935,1935}
temp	float	$tmp1137	 %read{1938,1938} %write{1937,1937}
temp	float	$tmp1138	 %read{1940,1940} %write{1939,1939}
temp	point	$tmp1139	 %read{1943,1943} %write{1942,1942}
temp	point	$tmp1140	 %read{1945,1945} %write{1944,1944}
temp	point	$tmp1141	 %read{1947,1947} %write{1946,1946}
temp	float	$tmp1142	 %read{1950,1950} %write{1949,1949}
temp	int	$tmp1143	 %read{1951,1951} %write{1950,1950}
temp	float	$tmp1144	 %read{1953,1953} %write{1952,1952}
temp	float	$tmp1145	 %read{1955,1955} %write{1954,1954}
temp	point	$tmp1146	 %read{1958,1958} %write{1957,1957}
temp	point	$tmp1147	 %read{1960,1960} %write{1959,1959}
temp	float	$tmp1148	 %read{1963,1963} %write{1962,1962}
temp	int	$tmp1149	 %read{1964,1964} %write{1963,1963}
temp	float	$tmp1150	 %read{1966,1966} %write{1965,1965}
temp	point	$tmp1151	 %read{1969,1969} %write{1968,1968}
temp	float	$tmp1152	 %read{1972,1972} %write{1971,1971}
temp	int	$tmp1153	 %read{1973,1973} %write{1972,1972}
temp	int	$tmp1154	 %read{2147483647,-1} %write{1976,1976}
temp	int	$tmp1155	 %read{2147483647,-1} %write{1978,1978}
temp	int	$tmp1156	 %read{2147483647,-1} %write{1980,1980}
temp	float	$tmp1157	 %read{1984,1984} %write{1982,1982}
temp	float	$tmp1158	 %read{1984,1984} %write{1983,1983}
temp	float	$tmp1159	 %read{1986,1986} %write{1985,1985}
temp	int	$tmp1160	 %read{1988,1988} %write{1987,1987}
temp	float	$tmp1161	 %read{2167,2167} %write{2164,2165}
temp	float	$tmp1162	 %read{2161,2161} %write{2160,2160}
temp	float	$tmp1163	 %read{1996,1996} %write{1995,1995}
temp	float	$tmp1164	 %read{1995,1995} %write{1994,1994}
temp	float	$tmp1165	 %read{1999,1999} %write{1998,1998}
temp	float	$tmp1166	 %read{1998,1998} %write{1997,1997}
temp	float	$tmp1167	 %read{2002,2002} %write{2001,2001}
temp	float	$tmp1168	 %read{2001,2001} %write{2000,2000}
temp	int	$tmp1169	 %read{2010,2010} %write{2009,2009}
temp	int	$tmp1170	 %read{2007,2157} %write{2007,2157}
temp	int	$tmp1171	 %read{2014,2014} %write{2013,2013}
temp	int	$tmp1172	 %read{2011,2155} %write{2011,2155}
temp	int	$tmp1173	 %read{2018,2018} %write{2017,2017}
temp	int	$tmp1174	 %read{2015,2153} %write{2015,2153}
temp	float	$tmp1175	 %read{2022,2022} %write{2019,2019}
temp	float	$tmp1176	 %read{2022,2022} %write{2020,2020}
temp	float	$tmp1177	 %read{2022,2022} %write{2021,2021}
temp	color	$tmp1178	 %read{2036,2036} %write{2035,2035}
temp	point	$tmp1179	 %read{2029,2029} %write{2028,2028}
temp	float	$tmp1180	 %read{2028,2028} %write{2025,2025}
temp	float	$tmp1181	 %read{2028,2028} %write{2026,2026}
temp	float	$tmp1182	 %read{2028,2028} %write{2027,2027}
temp	point	$tmp1183	 %read{2034,2034} %write{2033,2033}
temp	float	$tmp1184	 %read{2033,2033} %write{2030,2030}
temp	float	$tmp1185	 %read{2033,2033} %write{2031,2031}
temp	float	$tmp1186	 %read{2033,2033} %write{2032,2032}
temp	point	$tmp1187	 %read{2038,2038} %write{2037,2037}
temp	int	$tmp1188	 %read{2042,2042} %write{2041,2041}
temp	int	$tmp1189	 %read{2045,2045} %write{2044,2044}
temp	int	$tmp1190	 %read{2048,2048} %write{2047,2047}
temp	float	$tmp1191	 %read{2053,2053} %write{2050,2050}
temp	float	$tmp1192	 %read{2050,2050} %write{2049,2049}
temp	float	$tmp1193	 %read{2053,2053} %write{2052,2052}
temp	float	$tmp1194	 %read{2052,2052} %write{2051,2051}
temp	float	$tmp1195	 %read{2056,2056} %write{2053,2053}
temp	float	$tmp1196	 %read{2056,2056} %write{2055,2055}
temp	float	$tmp1197	 %read{2055,2055} %write{2054,2054}
temp	int	$tmp1198	 %read{2058,2058} %write{2057,2057}
temp	float	$tmp1199	 %read{2066,2066} %write{2060,2060}
temp	float	$tmp1200	 %read{2060,2060} %write{2059,2059}
temp	float	$tmp1201	 %read{2066,2066} %write{2065,2065}
temp	float	$tmp1202	 %read{2065,2065} %write{2062,2062}
temp	float	$tmp1203	 %read{2062,2062} %write{2061,2061}
temp	float	$tmp1204	 %read{2065,2065} %write{2064,2064}
temp	float	$tmp1205	 %read{2064,2064} %write{2063,2063}
temp	int	$tmp1206	 %read{2068,2068} %write{2067,2067}
temp	float	$tmp1207	 %read{2075,2075} %write{2071,2071}
temp	float	$tmp1208	 %read{2071,2071} %write{2070,2070}
temp	float	$tmp1209	 %read{2070,2070} %write{2069,2069}
temp	float	$tmp1210	 %read{2075,2075} %write{2074,2074}
temp	float	$tmp1211	 %read{2074,2074} %write{2073,2073}
temp	float	$tmp1212	 %read{2073,2073} %write{2072,2072}
temp	float	$tmp1213	 %read{2079,2079} %write{2075,2075}
temp	float	$tmp1214	 %read{2079,2079} %write{2078,2078}
temp	float	$tmp1215	 %read{2078,2078} %write{2077,2077}
temp	float	$tmp1216	 %read{2077,2077} %write{2076,2076}
temp	int	$tmp1217	 %read{2081,2081} %write{2080,2080}
temp	float	$tmp1218	 %read{2086,2086} %write{2085,2085}
temp	float	$tmp1219	 %read{2085,2085} %write{2084,2084}
temp	vector	$tmp1220	 %read{2084,2084} %write{2082,2082}
temp	vector	$tmp1221	 %read{2084,2084} %write{2083,2083}
temp	int	$tmp1222	 %read{2088,2088} %write{2087,2087}
temp	float	$tmp1223	 %read{2095,2095} %write{2091,2091}
temp	float	$tmp1224	 %read{2091,2091} %write{2090,2090}
temp	float	$tmp1225	 %read{2090,2090} %write{2089,2089}
temp	float	$tmp1226	 %read{2095,2095} %write{2094,2094}
temp	float	$tmp1227	 %read{2094,2094} %write{2093,2093}
temp	float	$tmp1228	 %read{2093,2093} %write{2092,2092}
temp	float	$tmp1229	 %read{2099,2099} %write{2095,2095}
temp	float	$tmp1230	 %read{2099,2099} %write{2098,2098}
temp	float	$tmp1231	 %read{2098,2098} %write{2097,2097}
temp	float	$tmp1232	 %read{2097,2097} %write{2096,2096}
temp	float	$tmp1233	 %read{2101,2101} %write{2099,2099}
temp	float	$tmp1234	 %read{2101,2101} %write{2100,2100}
temp	point	$tmp1235	 %read{2107,2107} %write{2106,2106}
temp	float	$tmp1236	 %read{2106,2106} %write{2103,2103}
temp	float	$tmp1237	 %read{2106,2106} %write{2104,2104}
temp	float	$tmp1238	 %read{2106,2106} %write{2105,2105}
temp	float	$tmp1239	 %read{2109,2109} %write{2108,2108}
temp	int	$tmp1240	 %read{2110,2110} %write{2109,2109}
temp	float	$tmp1241	 %read{2112,2112} %write{2111,2111}
temp	float	$tmp1242	 %read{2114,2114} %write{2113,2113}
temp	float	$tmp1243	 %read{2116,2116} %write{2115,2115}
temp	point	$tmp1244	 %read{2119,2119} %write{2118,2118}
temp	point	$tmp1245	 %read{2121,2121} %write{2120,2120}
temp	point	$tmp1246	 %read{2123,2123} %write{2122,2122}
temp	float	$tmp1247	 %read{2126,2126} %write{2125,2125}
temp	int	$tmp1248	 %read{2127,2127} %write{2126,2126}
temp	float	$tmp1249	 %read{2129,2129} %write{2128,2128}
temp	float	$tmp1250	 %read{2131,2131} %write{2130,2130}
temp	point	$tmp1251	 %read{2134,2134} %write{2133,2133}
temp	point	$tmp1252	 %read{2136,2136} %write{2135,2135}
temp	float	$tmp1253	 %read{2139,2139} %write{2138,2138}
temp	int	$tmp1254	 %read{2140,2140} %write{2139,2139}
temp	float	$tmp1255	 %read{2142,2142} %write{2141,2141}
temp	point	$tmp1256	 %read{2145,2145} %write{2144,2144}
temp	float	$tmp1257	 %read{2148,2148} %write{2147,2147}
temp	int	$tmp1258	 %read{2149,2149} %write{2148,2148}
temp	int	$tmp1259	 %read{2147483647,-1} %write{2152,2152}
temp	int	$tmp1260	 %read{2147483647,-1} %write{2154,2154}
temp	int	$tmp1261	 %read{2147483647,-1} %write{2156,2156}
temp	float	$tmp1262	 %read{2160,2160} %write{2158,2158}
temp	float	$tmp1263	 %read{2160,2160} %write{2159,2159}
temp	int	$tmp1264	 %read{2163,2163} %write{2162,2162}
temp	float	$tmp1265	 %read{2168,2168} %write{2167,2167}
temp	int	$tmp1266	 %read{2170,2170} %write{2169,2169}
temp	float	$tmp1267	 %read{2175,2175} %write{2174,2174}
temp	float	$tmp1268	 %read{2176,2176} %write{2175,2175}
temp	float	$tmp1269	 %read{2178,2178} %write{2177,2177}
temp	int	$tmp1270	 %read{2180,2180} %write{2179,2179}
temp	float	$tmp1271	 %read{2185,2185} %write{2180,2180}
temp	int	$tmp1272	 %read{2182,2182} %write{2181,2181}
temp	int	$tmp1273	 %read{2183,2183} %write{2182,2182}
temp	int	$tmp1274	 %read{2184,2184} %write{2183,2183}
temp	float	$tmp1275	 %read{2185,2185} %write{2184,2184}
temp	float	$tmp1276	 %read{2186,2186} %write{2185,2185}
temp	int	$tmp1277	 %read{2188,2188} %write{2187,2187}
temp	int	$tmp1278	 %read{2189,2189} %write{2188,2188}
temp	float	$tmp1279	 %read{2194,2194} %write{2189,2189}
temp	int	$tmp1280	 %read{2191,2191} %write{2190,2190}
temp	int	$tmp1281	 %read{2192,2192} %write{2191,2191}
temp	int	$tmp1282	 %read{2193,2193} %write{2192,2192}
temp	float	$tmp1283	 %read{2194,2194} %write{2193,2193}
temp	float	$tmp1284	 %read{2195,2195} %write{2194,2194}
temp	float	$tmp1285	 %read{2197,2197} %write{2196,2196}
temp	float	$tmp1286	 %read{2199,2199} %write{2197,2197}
temp	float	$tmp1287	 %read{2199,2199} %write{2198,2198}
temp	int	$tmp1288	 %read{2202,2202} %write{2201,2201}
temp	float	$tmp1289	 %read{2207,2207} %write{2202,2202}
temp	int	$tmp1290	 %read{2204,2204} %write{2203,2203}
temp	int	$tmp1291	 %read{2205,2205} %write{2204,2204}
temp	int	$tmp1292	 %read{2206,2206} %write{2205,2205}
temp	float	$tmp1293	 %read{2207,2207} %write{2206,2206}
temp	float	$tmp1294	 %read{2208,2208} %write{2207,2207}
temp	float	$tmp1295	 %read{2212,2212} %write{2211,2211}
const	string	$const51	"Sine"		 %read{2215,2232} %write{2147483647,-1}
const	string	$const52	"noise_wave"		 %read{2213,2213} %write{2147483647,-1}
temp	int	$tmp1296	 %read{2216,2216} %write{2215,2215}
temp	float	$tmp1297	 %read{2218,2218} %write{2217,2217}
temp	float	$tmp1298	 %read{2219,2219} %write{2218,2218}
const	string	$const53	"Saw"		 %read{2220,2220} %write{2147483647,-1}
temp	int	$tmp1299	 %read{2221,2221} %write{2220,2220}
const	float	$const54	3.1415927		 %read{2222,2234} %write{2147483647,-1}
temp	float	$tmp1300	 %read{2224,2224} %write{2223,2223}
temp	float	$tmp1301	 %read{2227,2227} %write{2226,2226}
temp	float	$tmp1302	 %read{2226,2226} %write{2225,2225}
temp	int	$tmp1303	 %read{2229,2229} %write{2228,2228}
const	string	$const55	"Tri"		 %read{2232,2232} %write{2147483647,-1}
temp	int	$tmp1304	 %read{2233,2233} %write{2232,2232}
temp	float	$tmp1305	 %read{2244,2244} %write{2243,2243}
temp	float	$tmp1306	 %read{2242,2242} %write{2239,2239}
temp	float	$tmp1307	 %read{2237,2237} %write{2236,2236}
temp	float	$tmp1308	 %read{2238,2238} %write{2237,2237}
temp	float	$tmp1309	 %read{2239,2239} %write{2238,2238}
temp	float	$tmp1310	 %read{2241,2241} %write{2240,2240}
temp	float	$tmp1311	 %read{2242,2242} %write{2241,2241}
temp	float	$tmp1312	 %read{2243,2243} %write{2242,2242}
temp	float	$tmp1313	 %read{2245,2245} %write{2244,2244}
code Vector
# intern/cycles/kernel/shaders/node_wave_texture.osl:56
# 	point Vector = P,
	assign		Vector P 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{56} %argrw{"wr"}
code ___main___
# intern/cycles/kernel/shaders/node_wave_texture.osl:60
# 	point p = Vector;
	assign		p Vector 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{60} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:62
# 	if (use_mapping)
	if		use_mapping 4 4 	%line{62} %argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:63
# 		p = transform(mapping, p);
	transform	p mapping p 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:65
# 	Fac = wave(p, Scale, Type, Detail, Distortion, DetailScale);
	functioncall	$const1 2248 	%line{65} %argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:26
# 	float x = p[0] * scale;
	compref		$tmp1 p $const2 	%line{26} %argrw{"wrr"}
	mul		___631_x $tmp1 Scale 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:27
# 	float y = p[1] * scale;
	compref		$tmp2 p $const3 	%line{27} %argrw{"wrr"}
	mul		___631_y $tmp2 Scale 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:28
# 	float z = p[2] * scale;
	compref		$tmp3 p $const4 	%line{28} %argrw{"wrr"}
	mul		___631_z $tmp3 Scale 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:30
# 	float result = 0.0;
	assign		___631_result $const5 	%line{30} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:31
# 	float n = 0.0;
	assign		___631_n $const5 	%line{31} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:33
# 	if (type == "Bands") {
	eq		$tmp4 Type $const6 	%line{33} %argrw{"wrr"}
	if		$tmp4 18 27 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:34
# 		n = (x + y + z) * 10.0;
	add		$tmp5 ___631_x ___631_y 	%line{34} %argrw{"wrr"}
	add		$tmp6 $tmp5 ___631_z 	%argrw{"wrr"}
	mul		___631_n $tmp6 $const7 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:36
# 	else if (type == "Rings") {
	eq		$tmp7 Type $const8 	%line{36} %argrw{"wrr"}
	if		$tmp7 27 27 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:37
# 		n = (sqrt(x * x + y * y + z * z) * 20.0);
	mul		$tmp9 ___631_x ___631_x 	%line{37} %argrw{"wrr"}
	mul		$tmp10 ___631_y ___631_y 	%argrw{"wrr"}
	add		$tmp11 $tmp9 $tmp10 	%argrw{"wrr"}
	mul		$tmp12 ___631_z ___631_z 	%argrw{"wrr"}
	add		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
	sqrt		$tmp8 $tmp13 	%argrw{"wr"}
	mul		___631_n $tmp8 $const9 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:40
# 	if (distortion != 0.0) {
	neq		$tmp14 Distortion $const5 	%line{40} %argrw{"wrr"}
	if		$tmp14 2213 2213 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:41
# 		n = n + (distortion * noise_turbulence(p * dscale, "Perlin", detail, 0));
	mul		$tmp16 p DetailScale 	%line{41} %argrw{"wrr"}
	functioncall	$const11 2211 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:217
# }
	assign		___625_fscale $const12 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{217} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:218
# 
	assign		___625_amp $const12 	%line{218} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:219
# /* Soft/Hard Noise */
	assign		___625_sum $const5 	%line{219} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:222
# {
	functioncall	$const14 37 	%line{222} %argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp17 Detail $const13 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		___625_octaves $tmp17 $const5 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:223
# 
	assign		___625_n ___625_octaves 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{223} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 					pa[2] = pa[1];
	for		$tmp18 40 41 1108 1110 	%line{225} %argrw{"r"}
	assign		___625_i $const2 	%argrw{"wr"}
	le		$tmp18 ___625_i ___625_n 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:226
# 					pa[1] = pa[0];
	mul		$tmp19 ___625_fscale $tmp16 	%line{226} %argrw{"wrr"}
	functioncall	$const15 1100 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const5 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp20 $const10 $const10 	%line{158} %argrw{"wrr"}
	if		$tmp20 47 47 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp19 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp21 $const10 $const16 	%line{160} %argrw{"wrr"}
	if		$tmp21 220 220 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const17 220 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const19 218 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const20 218 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 217 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp24 $tmp19 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp23 $tmp24 	%argrw{"wr"}
	assign		___594_xi $tmp23 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp26 $tmp19 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp25 $tmp26 	%argrw{"wr"}
	assign		___594_yi $tmp25 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp28 $tmp19 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp27 $tmp28 	%argrw{"wr"}
	assign		___594_zi $tmp27 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp30 68 70 215 217 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp29 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp30 ___594_xx $tmp29 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp32 72 74 213 215 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp31 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp32 ___594_yy $tmp31 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp34 76 78 211 213 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp33 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp34 ___594_zz $tmp33 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp35 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp36 ___594_yy 	%argrw{"wr"}
	assign		$tmp37 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp35 $tmp36 $tmp37 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 95 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp40 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp41 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp42 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp39 $tmp40 $tmp41 $tmp42 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp39 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp44 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp45 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp46 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp43 $tmp44 $tmp45 $tmp46 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp43 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp38 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp38 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp47 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp19 $tmp47 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 162 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp48 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp48 103 103 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp49 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp49 106 106 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp50 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp50 116 116 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp52 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp51 $tmp52 	%argrw{"wr"}
	compref		$tmp54 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp53 $tmp54 	%argrw{"wr"}
	add		$tmp55 $tmp51 $tmp53 	%argrw{"wrr"}
	compref		$tmp57 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp56 $tmp57 	%argrw{"wr"}
	add		___592_result $tmp55 $tmp56 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp58 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp58 126 126 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp60 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp59 $tmp60 	%argrw{"wr"}
	compref		$tmp63 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp62 $tmp63 	%argrw{"wr"}
	compref		$tmp65 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp64 $tmp65 	%argrw{"wr"}
	max		$tmp61 $tmp62 $tmp64 	%argrw{"wrr"}
	max		___592_result $tmp59 $tmp61 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp66 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp66 139 139 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp69 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp68 $tmp69 	%argrw{"wr"}
	sqrt		$tmp67 $tmp68 	%argrw{"wr"}
	compref		$tmp72 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp71 $tmp72 	%argrw{"wr"}
	sqrt		$tmp70 $tmp71 	%argrw{"wr"}
	add		$tmp73 $tmp67 $tmp70 	%argrw{"wrr"}
	compref		$tmp76 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp75 $tmp76 	%argrw{"wr"}
	sqrt		$tmp74 $tmp75 	%argrw{"wr"}
	add		___592_result $tmp73 $tmp74 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp77 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp77 146 146 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp80 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp81 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp79 $tmp80 $tmp81 	%argrw{"wrr"}
	sqrt		$tmp78 $tmp79 	%argrw{"wr"}
	sqrt		___592_result $tmp78 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp82 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp82 161 161 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp85 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp84 $tmp85 	%argrw{"wr"}
	pow		$tmp83 $tmp84 $const5 	%argrw{"wrr"}
	compref		$tmp88 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp87 $tmp88 	%argrw{"wr"}
	pow		$tmp86 $tmp87 $const5 	%argrw{"wrr"}
	add		$tmp89 $tmp83 $tmp86 	%argrw{"wrr"}
	compref		$tmp92 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp91 $tmp92 	%argrw{"wr"}
	pow		$tmp90 $tmp91 $const5 	%argrw{"wrr"}
	add		$tmp93 $tmp89 $tmp90 	%argrw{"wrr"}
	div		$tmp94 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp93 $tmp94 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp96 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp97 ___594_yy 	%argrw{"wr"}
	assign		$tmp98 ___594_zz 	%argrw{"wr"}
	point		$tmp95 $tmp96 $tmp97 $tmp98 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp95 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp99 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp100 ___600_d $tmp99 	%argrw{"wrr"}
	if		$tmp100 184 211 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp101 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp101 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp102 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp102 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp103 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp103 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp104 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp104 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp105 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp105 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp106 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp106 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp107 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp108 ___600_d $tmp107 	%argrw{"wrr"}
	if		$tmp108 197 211 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp109 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp109 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp110 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp110 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp111 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp111 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp112 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp112 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp113 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp114 ___600_d $tmp113 	%argrw{"wrr"}
	if		$tmp114 206 211 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp115 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp115 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp116 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp116 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp117 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp118 ___600_d $tmp117 	%argrw{"wrr"}
	if		$tmp118 211 211 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp119 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp120 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp121 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp22 ___605_da $const2 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp122 $const18 $tmp22 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp122 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp123 $const10 $const33 	%line{162} %argrw{"wrr"}
	if		$tmp123 393 393 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const34 393 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const35 391 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const20 391 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 390 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp126 $tmp19 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp125 $tmp126 	%argrw{"wr"}
	assign		___594_xi $tmp125 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp128 $tmp19 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp127 $tmp128 	%argrw{"wr"}
	assign		___594_yi $tmp127 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp130 $tmp19 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp129 $tmp130 	%argrw{"wr"}
	assign		___594_zi $tmp129 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp132 241 243 388 390 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp131 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp132 ___594_xx $tmp131 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp134 245 247 386 388 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp133 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp134 ___594_yy $tmp133 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp136 249 251 384 386 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp135 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp136 ___594_zz $tmp135 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp137 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp138 ___594_yy 	%argrw{"wr"}
	assign		$tmp139 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp137 $tmp138 $tmp139 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 268 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp142 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp143 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp144 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp141 $tmp142 $tmp143 $tmp144 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp141 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp146 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp147 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp148 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp145 $tmp146 $tmp147 $tmp148 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp145 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp140 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp140 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp149 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp19 $tmp149 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 335 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp150 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp150 276 276 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp151 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp151 279 279 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp152 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp152 289 289 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp154 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp153 $tmp154 	%argrw{"wr"}
	compref		$tmp156 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp155 $tmp156 	%argrw{"wr"}
	add		$tmp157 $tmp153 $tmp155 	%argrw{"wrr"}
	compref		$tmp159 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp158 $tmp159 	%argrw{"wr"}
	add		___592_result $tmp157 $tmp158 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp160 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp160 299 299 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp162 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp161 $tmp162 	%argrw{"wr"}
	compref		$tmp165 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp164 $tmp165 	%argrw{"wr"}
	compref		$tmp167 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp166 $tmp167 	%argrw{"wr"}
	max		$tmp163 $tmp164 $tmp166 	%argrw{"wrr"}
	max		___592_result $tmp161 $tmp163 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp168 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp168 312 312 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp171 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp170 $tmp171 	%argrw{"wr"}
	sqrt		$tmp169 $tmp170 	%argrw{"wr"}
	compref		$tmp174 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp173 $tmp174 	%argrw{"wr"}
	sqrt		$tmp172 $tmp173 	%argrw{"wr"}
	add		$tmp175 $tmp169 $tmp172 	%argrw{"wrr"}
	compref		$tmp178 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp177 $tmp178 	%argrw{"wr"}
	sqrt		$tmp176 $tmp177 	%argrw{"wr"}
	add		___592_result $tmp175 $tmp176 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp179 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp179 319 319 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp182 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp183 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp181 $tmp182 $tmp183 	%argrw{"wrr"}
	sqrt		$tmp180 $tmp181 	%argrw{"wr"}
	sqrt		___592_result $tmp180 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp184 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp184 334 334 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp187 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp186 $tmp187 	%argrw{"wr"}
	pow		$tmp185 $tmp186 $const5 	%argrw{"wrr"}
	compref		$tmp190 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp189 $tmp190 	%argrw{"wr"}
	pow		$tmp188 $tmp189 $const5 	%argrw{"wrr"}
	add		$tmp191 $tmp185 $tmp188 	%argrw{"wrr"}
	compref		$tmp194 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp193 $tmp194 	%argrw{"wr"}
	pow		$tmp192 $tmp193 $const5 	%argrw{"wrr"}
	add		$tmp195 $tmp191 $tmp192 	%argrw{"wrr"}
	div		$tmp196 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp195 $tmp196 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp198 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp199 ___594_yy 	%argrw{"wr"}
	assign		$tmp200 ___594_zz 	%argrw{"wr"}
	point		$tmp197 $tmp198 $tmp199 $tmp200 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp197 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp201 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp202 ___600_d $tmp201 	%argrw{"wrr"}
	if		$tmp202 357 384 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp203 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp203 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp204 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp204 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp205 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp205 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp206 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp206 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp207 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp207 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp208 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp208 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp209 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp210 ___600_d $tmp209 	%argrw{"wrr"}
	if		$tmp210 370 384 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp211 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp211 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp212 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp212 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp213 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp213 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp214 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp214 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp215 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp216 ___600_d $tmp215 	%argrw{"wrr"}
	if		$tmp216 379 384 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp217 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp217 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp218 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp218 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp219 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp220 ___600_d $tmp219 	%argrw{"wrr"}
	if		$tmp220 384 384 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp221 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp222 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp223 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp124 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp224 $const18 $tmp124 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp224 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp225 $const10 $const36 	%line{164} %argrw{"wrr"}
	if		$tmp225 566 566 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const37 566 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const38 564 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const20 564 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 563 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp228 $tmp19 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp227 $tmp228 	%argrw{"wr"}
	assign		___594_xi $tmp227 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp230 $tmp19 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp229 $tmp230 	%argrw{"wr"}
	assign		___594_yi $tmp229 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp232 $tmp19 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp231 $tmp232 	%argrw{"wr"}
	assign		___594_zi $tmp231 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp234 414 416 561 563 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp233 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp234 ___594_xx $tmp233 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp236 418 420 559 561 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp235 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp236 ___594_yy $tmp235 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp238 422 424 557 559 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp237 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp238 ___594_zz $tmp237 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp239 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp240 ___594_yy 	%argrw{"wr"}
	assign		$tmp241 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp239 $tmp240 $tmp241 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 441 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp244 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp245 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp246 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp243 $tmp244 $tmp245 $tmp246 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp243 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp248 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp249 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp250 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp247 $tmp248 $tmp249 $tmp250 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp247 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp242 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp242 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp251 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp19 $tmp251 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 508 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp252 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp252 449 449 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp253 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp253 452 452 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp254 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp254 462 462 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp256 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp255 $tmp256 	%argrw{"wr"}
	compref		$tmp258 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp257 $tmp258 	%argrw{"wr"}
	add		$tmp259 $tmp255 $tmp257 	%argrw{"wrr"}
	compref		$tmp261 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp260 $tmp261 	%argrw{"wr"}
	add		___592_result $tmp259 $tmp260 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp262 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp262 472 472 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp264 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp263 $tmp264 	%argrw{"wr"}
	compref		$tmp267 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp266 $tmp267 	%argrw{"wr"}
	compref		$tmp269 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp268 $tmp269 	%argrw{"wr"}
	max		$tmp265 $tmp266 $tmp268 	%argrw{"wrr"}
	max		___592_result $tmp263 $tmp265 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp270 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp270 485 485 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp273 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp272 $tmp273 	%argrw{"wr"}
	sqrt		$tmp271 $tmp272 	%argrw{"wr"}
	compref		$tmp276 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp275 $tmp276 	%argrw{"wr"}
	sqrt		$tmp274 $tmp275 	%argrw{"wr"}
	add		$tmp277 $tmp271 $tmp274 	%argrw{"wrr"}
	compref		$tmp280 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp279 $tmp280 	%argrw{"wr"}
	sqrt		$tmp278 $tmp279 	%argrw{"wr"}
	add		___592_result $tmp277 $tmp278 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp281 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp281 492 492 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp284 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp285 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp283 $tmp284 $tmp285 	%argrw{"wrr"}
	sqrt		$tmp282 $tmp283 	%argrw{"wr"}
	sqrt		___592_result $tmp282 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp286 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp286 507 507 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp289 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp288 $tmp289 	%argrw{"wr"}
	pow		$tmp287 $tmp288 $const5 	%argrw{"wrr"}
	compref		$tmp292 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp291 $tmp292 	%argrw{"wr"}
	pow		$tmp290 $tmp291 $const5 	%argrw{"wrr"}
	add		$tmp293 $tmp287 $tmp290 	%argrw{"wrr"}
	compref		$tmp296 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp295 $tmp296 	%argrw{"wr"}
	pow		$tmp294 $tmp295 $const5 	%argrw{"wrr"}
	add		$tmp297 $tmp293 $tmp294 	%argrw{"wrr"}
	div		$tmp298 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp297 $tmp298 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp300 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp301 ___594_yy 	%argrw{"wr"}
	assign		$tmp302 ___594_zz 	%argrw{"wr"}
	point		$tmp299 $tmp300 $tmp301 $tmp302 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp299 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp303 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp304 ___600_d $tmp303 	%argrw{"wrr"}
	if		$tmp304 530 557 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp305 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp305 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp306 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp306 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp307 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp307 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp308 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp308 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp309 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp309 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp310 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp310 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp311 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp312 ___600_d $tmp311 	%argrw{"wrr"}
	if		$tmp312 543 557 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp313 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp313 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp314 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp314 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp315 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp315 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp316 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp316 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp317 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp318 ___600_d $tmp317 	%argrw{"wrr"}
	if		$tmp318 552 557 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp319 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp319 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp320 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp320 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp321 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp322 ___600_d $tmp321 	%argrw{"wrr"}
	if		$tmp322 557 557 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp323 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp324 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp325 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp226 ___605_da $const4 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp326 $const18 $tmp226 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp326 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp327 $const10 $const39 	%line{166} %argrw{"wrr"}
	if		$tmp327 739 739 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const40 739 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const41 737 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const20 737 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 736 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp330 $tmp19 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp329 $tmp330 	%argrw{"wr"}
	assign		___594_xi $tmp329 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp332 $tmp19 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp331 $tmp332 	%argrw{"wr"}
	assign		___594_yi $tmp331 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp334 $tmp19 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp333 $tmp334 	%argrw{"wr"}
	assign		___594_zi $tmp333 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp336 587 589 734 736 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp335 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp336 ___594_xx $tmp335 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp338 591 593 732 734 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp337 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp338 ___594_yy $tmp337 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp340 595 597 730 732 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp339 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp340 ___594_zz $tmp339 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp341 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp342 ___594_yy 	%argrw{"wr"}
	assign		$tmp343 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp341 $tmp342 $tmp343 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 614 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp346 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp347 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp348 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp345 $tmp346 $tmp347 $tmp348 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp345 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp350 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp351 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp352 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp349 $tmp350 $tmp351 $tmp352 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp349 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp344 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp344 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp353 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp19 $tmp353 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 681 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp354 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp354 622 622 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp355 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp355 625 625 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp356 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp356 635 635 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp358 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp357 $tmp358 	%argrw{"wr"}
	compref		$tmp360 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp359 $tmp360 	%argrw{"wr"}
	add		$tmp361 $tmp357 $tmp359 	%argrw{"wrr"}
	compref		$tmp363 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp362 $tmp363 	%argrw{"wr"}
	add		___592_result $tmp361 $tmp362 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp364 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp364 645 645 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp366 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp365 $tmp366 	%argrw{"wr"}
	compref		$tmp369 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp368 $tmp369 	%argrw{"wr"}
	compref		$tmp371 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp370 $tmp371 	%argrw{"wr"}
	max		$tmp367 $tmp368 $tmp370 	%argrw{"wrr"}
	max		___592_result $tmp365 $tmp367 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp372 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp372 658 658 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp375 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp374 $tmp375 	%argrw{"wr"}
	sqrt		$tmp373 $tmp374 	%argrw{"wr"}
	compref		$tmp378 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp377 $tmp378 	%argrw{"wr"}
	sqrt		$tmp376 $tmp377 	%argrw{"wr"}
	add		$tmp379 $tmp373 $tmp376 	%argrw{"wrr"}
	compref		$tmp382 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp381 $tmp382 	%argrw{"wr"}
	sqrt		$tmp380 $tmp381 	%argrw{"wr"}
	add		___592_result $tmp379 $tmp380 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp383 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp383 665 665 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp386 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp387 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp385 $tmp386 $tmp387 	%argrw{"wrr"}
	sqrt		$tmp384 $tmp385 	%argrw{"wr"}
	sqrt		___592_result $tmp384 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp388 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp388 680 680 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp391 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp390 $tmp391 	%argrw{"wr"}
	pow		$tmp389 $tmp390 $const5 	%argrw{"wrr"}
	compref		$tmp394 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp393 $tmp394 	%argrw{"wr"}
	pow		$tmp392 $tmp393 $const5 	%argrw{"wrr"}
	add		$tmp395 $tmp389 $tmp392 	%argrw{"wrr"}
	compref		$tmp398 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp397 $tmp398 	%argrw{"wr"}
	pow		$tmp396 $tmp397 $const5 	%argrw{"wrr"}
	add		$tmp399 $tmp395 $tmp396 	%argrw{"wrr"}
	div		$tmp400 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp399 $tmp400 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp402 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp403 ___594_yy 	%argrw{"wr"}
	assign		$tmp404 ___594_zz 	%argrw{"wr"}
	point		$tmp401 $tmp402 $tmp403 $tmp404 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp401 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp405 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp406 ___600_d $tmp405 	%argrw{"wrr"}
	if		$tmp406 703 730 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp407 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp407 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp408 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp408 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp409 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp409 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp410 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp410 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp411 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp411 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp412 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp412 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp413 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp414 ___600_d $tmp413 	%argrw{"wrr"}
	if		$tmp414 716 730 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp415 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp415 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp416 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp416 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp417 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp417 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp418 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp418 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp419 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp420 ___600_d $tmp419 	%argrw{"wrr"}
	if		$tmp420 725 730 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp421 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp421 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp422 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp422 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp423 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp424 ___600_d $tmp423 	%argrw{"wrr"}
	if		$tmp424 730 730 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp425 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp426 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp427 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp328 ___605_da $const24 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp428 $const18 $tmp328 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp428 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp429 $const10 $const42 	%line{168} %argrw{"wrr"}
	if		$tmp429 914 914 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const43 914 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const44 912 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const45 912 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 909 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp432 $tmp19 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp431 $tmp432 	%argrw{"wr"}
	assign		___594_xi $tmp431 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp434 $tmp19 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp433 $tmp434 	%argrw{"wr"}
	assign		___594_yi $tmp433 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp436 $tmp19 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp435 $tmp436 	%argrw{"wr"}
	assign		___594_zi $tmp435 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp438 760 762 907 909 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp437 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp438 ___594_xx $tmp437 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp440 764 766 905 907 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp439 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp440 ___594_yy $tmp439 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp442 768 770 903 905 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp441 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp442 ___594_zz $tmp441 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp443 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp444 ___594_yy 	%argrw{"wr"}
	assign		$tmp445 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp443 $tmp444 $tmp445 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 787 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp448 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp449 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp450 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp447 $tmp448 $tmp449 $tmp450 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp447 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp452 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp453 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp454 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp451 $tmp452 $tmp453 $tmp454 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp451 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp446 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp446 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp455 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp19 $tmp455 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 854 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp456 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp456 795 795 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp457 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp457 798 798 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp458 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp458 808 808 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp460 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp459 $tmp460 	%argrw{"wr"}
	compref		$tmp462 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp461 $tmp462 	%argrw{"wr"}
	add		$tmp463 $tmp459 $tmp461 	%argrw{"wrr"}
	compref		$tmp465 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp464 $tmp465 	%argrw{"wr"}
	add		___592_result $tmp463 $tmp464 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp466 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp466 818 818 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp468 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp467 $tmp468 	%argrw{"wr"}
	compref		$tmp471 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp470 $tmp471 	%argrw{"wr"}
	compref		$tmp473 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp472 $tmp473 	%argrw{"wr"}
	max		$tmp469 $tmp470 $tmp472 	%argrw{"wrr"}
	max		___592_result $tmp467 $tmp469 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp474 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp474 831 831 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp477 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp476 $tmp477 	%argrw{"wr"}
	sqrt		$tmp475 $tmp476 	%argrw{"wr"}
	compref		$tmp480 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp479 $tmp480 	%argrw{"wr"}
	sqrt		$tmp478 $tmp479 	%argrw{"wr"}
	add		$tmp481 $tmp475 $tmp478 	%argrw{"wrr"}
	compref		$tmp484 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp483 $tmp484 	%argrw{"wr"}
	sqrt		$tmp482 $tmp483 	%argrw{"wr"}
	add		___592_result $tmp481 $tmp482 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp485 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp485 838 838 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp488 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp489 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp487 $tmp488 $tmp489 	%argrw{"wrr"}
	sqrt		$tmp486 $tmp487 	%argrw{"wr"}
	sqrt		___592_result $tmp486 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp490 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp490 853 853 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp493 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp492 $tmp493 	%argrw{"wr"}
	pow		$tmp491 $tmp492 $const5 	%argrw{"wrr"}
	compref		$tmp496 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp495 $tmp496 	%argrw{"wr"}
	pow		$tmp494 $tmp495 $const5 	%argrw{"wrr"}
	add		$tmp497 $tmp491 $tmp494 	%argrw{"wrr"}
	compref		$tmp500 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp499 $tmp500 	%argrw{"wr"}
	pow		$tmp498 $tmp499 $const5 	%argrw{"wrr"}
	add		$tmp501 $tmp497 $tmp498 	%argrw{"wrr"}
	div		$tmp502 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp501 $tmp502 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp504 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp505 ___594_yy 	%argrw{"wr"}
	assign		$tmp506 ___594_zz 	%argrw{"wr"}
	point		$tmp503 $tmp504 $tmp505 $tmp506 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp503 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp507 ___606_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp508 ___600_d $tmp507 	%argrw{"wrr"}
	if		$tmp508 876 903 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp509 ___606_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp509 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp510 ___606_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp510 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp511 ___606_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const3 $tmp511 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp512 ___606_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp512 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp513 ___606_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp513 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp514 ___606_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const3 $tmp514 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp515 ___606_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp516 ___600_d $tmp515 	%argrw{"wrr"}
	if		$tmp516 889 903 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp517 ___606_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp517 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp518 ___606_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp518 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp519 ___606_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp519 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp520 ___606_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp520 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp521 ___606_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp522 ___600_d $tmp521 	%argrw{"wrr"}
	if		$tmp522 898 903 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp523 ___606_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp523 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp524 ___606_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp524 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp525 ___606_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp526 ___600_d $tmp525 	%argrw{"wrr"}
	if		$tmp526 903 903 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp527 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp528 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp529 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp530 ___606_da $const3 	%line{129} %argrw{"wrr"}
	aref		$tmp531 ___606_da $const2 	%argrw{"wrr"}
	sub		$tmp430 $tmp530 $tmp531 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp532 $const18 $tmp430 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp532 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp533 $const10 $const46 	%line{170} %argrw{"wrr"}
	if		$tmp533 1096 1096 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const47 1096 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const48 1094 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const44 1088 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const45 1088 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 1085 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp537 $tmp19 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp536 $tmp537 	%argrw{"wr"}
	assign		___594_xi $tmp536 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp539 $tmp19 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp538 $tmp539 	%argrw{"wr"}
	assign		___594_yi $tmp538 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp541 $tmp19 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp540 $tmp541 	%argrw{"wr"}
	assign		___594_zi $tmp540 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp543 936 938 1083 1085 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp542 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp543 ___594_xx $tmp542 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp545 940 942 1081 1083 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp544 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp545 ___594_yy $tmp544 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp547 944 946 1079 1081 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp546 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp547 ___594_zz $tmp546 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp548 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp549 ___594_yy 	%argrw{"wr"}
	assign		$tmp550 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp548 $tmp549 $tmp550 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 963 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp553 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp554 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp555 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp552 $tmp553 $tmp554 $tmp555 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp552 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp557 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp558 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp559 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp556 $tmp557 $tmp558 $tmp559 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp556 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp551 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp551 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp560 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp19 $tmp560 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 1030 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp561 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp561 971 971 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp562 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp562 974 974 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp563 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp563 984 984 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp565 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp564 $tmp565 	%argrw{"wr"}
	compref		$tmp567 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp566 $tmp567 	%argrw{"wr"}
	add		$tmp568 $tmp564 $tmp566 	%argrw{"wrr"}
	compref		$tmp570 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp569 $tmp570 	%argrw{"wr"}
	add		___592_result $tmp568 $tmp569 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp571 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp571 994 994 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp573 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp572 $tmp573 	%argrw{"wr"}
	compref		$tmp576 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp575 $tmp576 	%argrw{"wr"}
	compref		$tmp578 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp577 $tmp578 	%argrw{"wr"}
	max		$tmp574 $tmp575 $tmp577 	%argrw{"wrr"}
	max		___592_result $tmp572 $tmp574 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp579 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp579 1007 1007 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp582 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp581 $tmp582 	%argrw{"wr"}
	sqrt		$tmp580 $tmp581 	%argrw{"wr"}
	compref		$tmp585 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp584 $tmp585 	%argrw{"wr"}
	sqrt		$tmp583 $tmp584 	%argrw{"wr"}
	add		$tmp586 $tmp580 $tmp583 	%argrw{"wrr"}
	compref		$tmp589 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp588 $tmp589 	%argrw{"wr"}
	sqrt		$tmp587 $tmp588 	%argrw{"wr"}
	add		___592_result $tmp586 $tmp587 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp590 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp590 1014 1014 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp593 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp594 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp592 $tmp593 $tmp594 	%argrw{"wrr"}
	sqrt		$tmp591 $tmp592 	%argrw{"wr"}
	sqrt		___592_result $tmp591 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp595 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp595 1029 1029 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp598 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp597 $tmp598 	%argrw{"wr"}
	pow		$tmp596 $tmp597 $const5 	%argrw{"wrr"}
	compref		$tmp601 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp600 $tmp601 	%argrw{"wr"}
	pow		$tmp599 $tmp600 $const5 	%argrw{"wrr"}
	add		$tmp602 $tmp596 $tmp599 	%argrw{"wrr"}
	compref		$tmp605 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp604 $tmp605 	%argrw{"wr"}
	pow		$tmp603 $tmp604 $const5 	%argrw{"wrr"}
	add		$tmp606 $tmp602 $tmp603 	%argrw{"wrr"}
	div		$tmp607 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp606 $tmp607 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp609 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp610 ___594_yy 	%argrw{"wr"}
	assign		$tmp611 ___594_zz 	%argrw{"wr"}
	point		$tmp608 $tmp609 $tmp610 $tmp611 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp608 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp612 ___606_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp613 ___600_d $tmp612 	%argrw{"wrr"}
	if		$tmp613 1052 1079 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp614 ___606_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp614 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp615 ___606_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp615 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp616 ___606_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const3 $tmp616 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp617 ___606_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp617 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp618 ___606_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp618 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp619 ___606_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const3 $tmp619 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp620 ___606_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp621 ___600_d $tmp620 	%argrw{"wrr"}
	if		$tmp621 1065 1079 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp622 ___606_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp622 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp623 ___606_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp623 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp624 ___606_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp624 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp625 ___606_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp625 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp626 ___606_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp627 ___600_d $tmp626 	%argrw{"wrr"}
	if		$tmp627 1074 1079 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp628 ___606_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp628 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp629 ___606_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp629 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp630 ___606_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp631 ___600_d $tmp630 	%argrw{"wrr"}
	if		$tmp631 1079 1079 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp632 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp633 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp634 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp635 ___606_da $const3 	%line{129} %argrw{"wrr"}
	aref		$tmp636 ___606_da $const2 	%argrw{"wrr"}
	sub		$tmp535 $tmp635 $tmp636 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const7 $tmp535 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp637 ___612_t $const12 	%line{142} %argrw{"wrr"}
	if		$tmp637 1092 1093 	%argrw{"r"}
	assign		$tmp534 $const12 	%argrw{"wr"}
	assign		$tmp534 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp638 $const18 $tmp534 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp638 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp639 $const10 $const49 	%line{172} %argrw{"wrr"}
	if		$tmp639 1099 1099 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp19 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___627_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:228
# 		if (hard)
	if		$const2 1104 1104 	%line{228} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:229
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp640 $const18 ___627_t 	%line{229} %argrw{"wrr"}
	sub		$tmp641 $tmp640 $const12 	%argrw{"wrr"}
	fabs		___627_t $tmp641 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:231
# 		sum += t * amp;
	mul		$tmp642 ___627_t ___625_amp 	%line{231} %argrw{"wrr"}
	add		___625_sum ___625_sum $tmp642 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:232
# 		amp *= 0.5;
	mul		___625_amp ___625_amp $const50 	%line{232} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:233
# 		fscale *= 2.0;
	mul		___625_fscale ___625_fscale $const18 	%line{233} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:225
# 	for (i = 0; i <= n; i++) {
	assign		$tmp643 ___625_i 	%line{225} %argrw{"wr"}
	add		___625_i ___625_i $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:236
# 	float rmd = octaves - floor(octaves);
	floor		$tmp644 ___625_octaves 	%line{236} %argrw{"wr"}
	sub		___625_rmd ___625_octaves $tmp644 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:238
# 	if (rmd != 0.0) {
	neq		$tmp645 ___625_rmd $const5 	%line{238} %argrw{"wrr"}
	if		$tmp645 2201 2211 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:239
# 		float t = noise_basis(fscale * p, basis);
	mul		$tmp646 ___625_fscale $tmp16 	%line{239} %argrw{"wrr"}
	functioncall	$const15 2173 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:156
# 	float result = 0.0;
	assign		___619_result $const5 	%line{156} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 	if (basis == "Perlin")
	eq		$tmp647 $const10 $const10 	%line{158} %argrw{"wrr"}
	if		$tmp647 1120 1120 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:159
# 		result = noise(p); /* returns perlin noise in range 0..1 */
	noise		___619_result $tmp646 	%line{159} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:160
# 	if (basis == "Voronoi F1")
	eq		$tmp648 $const10 $const16 	%line{160} %argrw{"wrr"}
	if		$tmp648 1293 1293 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:161
# 		result = voronoi_F1S(p);
	functioncall	$const17 1293 	%line{161} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const19 1291 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const20 1291 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 1290 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp651 $tmp646 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp650 $tmp651 	%argrw{"wr"}
	assign		___594_xi $tmp650 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp653 $tmp646 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp652 $tmp653 	%argrw{"wr"}
	assign		___594_yi $tmp652 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp655 $tmp646 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp654 $tmp655 	%argrw{"wr"}
	assign		___594_zi $tmp654 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp657 1141 1143 1288 1290 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp656 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp657 ___594_xx $tmp656 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp659 1145 1147 1286 1288 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp658 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp659 ___594_yy $tmp658 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp661 1149 1151 1284 1286 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp660 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp661 ___594_zz $tmp660 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp662 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp663 ___594_yy 	%argrw{"wr"}
	assign		$tmp664 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp662 $tmp663 $tmp664 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 1168 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp667 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp668 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp669 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp666 $tmp667 $tmp668 $tmp669 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp666 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp671 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp672 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp673 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp670 $tmp671 $tmp672 $tmp673 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp670 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp665 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp665 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp674 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp646 $tmp674 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 1235 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp675 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp675 1176 1176 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp676 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp676 1179 1179 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp677 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp677 1189 1189 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp679 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp678 $tmp679 	%argrw{"wr"}
	compref		$tmp681 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp680 $tmp681 	%argrw{"wr"}
	add		$tmp682 $tmp678 $tmp680 	%argrw{"wrr"}
	compref		$tmp684 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp683 $tmp684 	%argrw{"wr"}
	add		___592_result $tmp682 $tmp683 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp685 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp685 1199 1199 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp687 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp686 $tmp687 	%argrw{"wr"}
	compref		$tmp690 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp689 $tmp690 	%argrw{"wr"}
	compref		$tmp692 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp691 $tmp692 	%argrw{"wr"}
	max		$tmp688 $tmp689 $tmp691 	%argrw{"wrr"}
	max		___592_result $tmp686 $tmp688 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp693 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp693 1212 1212 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp696 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp695 $tmp696 	%argrw{"wr"}
	sqrt		$tmp694 $tmp695 	%argrw{"wr"}
	compref		$tmp699 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp698 $tmp699 	%argrw{"wr"}
	sqrt		$tmp697 $tmp698 	%argrw{"wr"}
	add		$tmp700 $tmp694 $tmp697 	%argrw{"wrr"}
	compref		$tmp703 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp702 $tmp703 	%argrw{"wr"}
	sqrt		$tmp701 $tmp702 	%argrw{"wr"}
	add		___592_result $tmp700 $tmp701 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp704 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp704 1219 1219 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp707 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp708 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp706 $tmp707 $tmp708 	%argrw{"wrr"}
	sqrt		$tmp705 $tmp706 	%argrw{"wr"}
	sqrt		___592_result $tmp705 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp709 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp709 1234 1234 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp712 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp711 $tmp712 	%argrw{"wr"}
	pow		$tmp710 $tmp711 $const5 	%argrw{"wrr"}
	compref		$tmp715 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp714 $tmp715 	%argrw{"wr"}
	pow		$tmp713 $tmp714 $const5 	%argrw{"wrr"}
	add		$tmp716 $tmp710 $tmp713 	%argrw{"wrr"}
	compref		$tmp719 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp718 $tmp719 	%argrw{"wr"}
	pow		$tmp717 $tmp718 $const5 	%argrw{"wrr"}
	add		$tmp720 $tmp716 $tmp717 	%argrw{"wrr"}
	div		$tmp721 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp720 $tmp721 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp723 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp724 ___594_yy 	%argrw{"wr"}
	assign		$tmp725 ___594_zz 	%argrw{"wr"}
	point		$tmp722 $tmp723 $tmp724 $tmp725 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp722 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp726 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp727 ___600_d $tmp726 	%argrw{"wrr"}
	if		$tmp727 1257 1284 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp728 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp728 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp729 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp729 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp730 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp730 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp731 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp731 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp732 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp732 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp733 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp733 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp734 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp735 ___600_d $tmp734 	%argrw{"wrr"}
	if		$tmp735 1270 1284 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp736 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp736 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp737 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp737 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp738 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp738 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp739 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp739 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp740 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp741 ___600_d $tmp740 	%argrw{"wrr"}
	if		$tmp741 1279 1284 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp742 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp742 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp743 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp743 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp744 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp745 ___600_d $tmp744 	%argrw{"wrr"}
	if		$tmp745 1284 1284 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp746 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp747 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp748 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp649 ___605_da $const2 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp749 $const18 $tmp649 	%line{145} %argrw{"wrr"}
	sub		___619_result $tmp749 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 	if (basis == "Voronoi F2")
	eq		$tmp750 $const10 $const33 	%line{162} %argrw{"wrr"}
	if		$tmp750 1466 1466 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:163
# 		result = voronoi_F2S(p);
	functioncall	$const34 1466 	%line{163} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const35 1464 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const20 1464 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 1463 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp753 $tmp646 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp752 $tmp753 	%argrw{"wr"}
	assign		___594_xi $tmp752 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp755 $tmp646 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp754 $tmp755 	%argrw{"wr"}
	assign		___594_yi $tmp754 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp757 $tmp646 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp756 $tmp757 	%argrw{"wr"}
	assign		___594_zi $tmp756 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp759 1314 1316 1461 1463 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp758 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp759 ___594_xx $tmp758 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp761 1318 1320 1459 1461 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp760 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp761 ___594_yy $tmp760 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp763 1322 1324 1457 1459 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp762 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp763 ___594_zz $tmp762 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp764 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp765 ___594_yy 	%argrw{"wr"}
	assign		$tmp766 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp764 $tmp765 $tmp766 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 1341 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp769 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp770 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp771 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp768 $tmp769 $tmp770 $tmp771 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp768 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp773 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp774 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp775 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp772 $tmp773 $tmp774 $tmp775 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp772 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp767 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp767 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp776 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp646 $tmp776 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 1408 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp777 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp777 1349 1349 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp778 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp778 1352 1352 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp779 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp779 1362 1362 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp781 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp780 $tmp781 	%argrw{"wr"}
	compref		$tmp783 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp782 $tmp783 	%argrw{"wr"}
	add		$tmp784 $tmp780 $tmp782 	%argrw{"wrr"}
	compref		$tmp786 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp785 $tmp786 	%argrw{"wr"}
	add		___592_result $tmp784 $tmp785 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp787 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp787 1372 1372 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp789 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp788 $tmp789 	%argrw{"wr"}
	compref		$tmp792 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp791 $tmp792 	%argrw{"wr"}
	compref		$tmp794 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp793 $tmp794 	%argrw{"wr"}
	max		$tmp790 $tmp791 $tmp793 	%argrw{"wrr"}
	max		___592_result $tmp788 $tmp790 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp795 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp795 1385 1385 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp798 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp797 $tmp798 	%argrw{"wr"}
	sqrt		$tmp796 $tmp797 	%argrw{"wr"}
	compref		$tmp801 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp800 $tmp801 	%argrw{"wr"}
	sqrt		$tmp799 $tmp800 	%argrw{"wr"}
	add		$tmp802 $tmp796 $tmp799 	%argrw{"wrr"}
	compref		$tmp805 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp804 $tmp805 	%argrw{"wr"}
	sqrt		$tmp803 $tmp804 	%argrw{"wr"}
	add		___592_result $tmp802 $tmp803 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp806 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp806 1392 1392 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp809 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp810 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp808 $tmp809 $tmp810 	%argrw{"wrr"}
	sqrt		$tmp807 $tmp808 	%argrw{"wr"}
	sqrt		___592_result $tmp807 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp811 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp811 1407 1407 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp814 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp813 $tmp814 	%argrw{"wr"}
	pow		$tmp812 $tmp813 $const5 	%argrw{"wrr"}
	compref		$tmp817 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp816 $tmp817 	%argrw{"wr"}
	pow		$tmp815 $tmp816 $const5 	%argrw{"wrr"}
	add		$tmp818 $tmp812 $tmp815 	%argrw{"wrr"}
	compref		$tmp821 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp820 $tmp821 	%argrw{"wr"}
	pow		$tmp819 $tmp820 $const5 	%argrw{"wrr"}
	add		$tmp822 $tmp818 $tmp819 	%argrw{"wrr"}
	div		$tmp823 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp822 $tmp823 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp825 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp826 ___594_yy 	%argrw{"wr"}
	assign		$tmp827 ___594_zz 	%argrw{"wr"}
	point		$tmp824 $tmp825 $tmp826 $tmp827 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp824 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp828 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp829 ___600_d $tmp828 	%argrw{"wrr"}
	if		$tmp829 1430 1457 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp830 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp830 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp831 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp831 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp832 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp832 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp833 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp833 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp834 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp834 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp835 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp835 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp836 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp837 ___600_d $tmp836 	%argrw{"wrr"}
	if		$tmp837 1443 1457 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp838 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp838 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp839 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp839 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp840 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp840 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp841 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp841 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp842 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp843 ___600_d $tmp842 	%argrw{"wrr"}
	if		$tmp843 1452 1457 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp844 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp844 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp845 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp845 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp846 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp847 ___600_d $tmp846 	%argrw{"wrr"}
	if		$tmp847 1457 1457 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp848 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp849 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp850 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp751 ___605_da $const3 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp851 $const18 $tmp751 	%line{146} %argrw{"wrr"}
	sub		___619_result $tmp851 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:164
# 	if (basis == "Voronoi F3")
	eq		$tmp852 $const10 $const36 	%line{164} %argrw{"wrr"}
	if		$tmp852 1639 1639 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 		result = voronoi_F3S(p);
	functioncall	$const37 1639 	%line{165} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const38 1637 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const20 1637 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 1636 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp855 $tmp646 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp854 $tmp855 	%argrw{"wr"}
	assign		___594_xi $tmp854 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp857 $tmp646 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp856 $tmp857 	%argrw{"wr"}
	assign		___594_yi $tmp856 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp859 $tmp646 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp858 $tmp859 	%argrw{"wr"}
	assign		___594_zi $tmp858 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp861 1487 1489 1634 1636 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp860 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp861 ___594_xx $tmp860 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp863 1491 1493 1632 1634 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp862 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp863 ___594_yy $tmp862 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp865 1495 1497 1630 1632 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp864 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp865 ___594_zz $tmp864 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp866 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp867 ___594_yy 	%argrw{"wr"}
	assign		$tmp868 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp866 $tmp867 $tmp868 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 1514 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp871 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp872 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp873 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp870 $tmp871 $tmp872 $tmp873 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp870 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp875 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp876 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp877 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp874 $tmp875 $tmp876 $tmp877 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp874 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp869 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp869 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp878 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp646 $tmp878 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 1581 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp879 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp879 1522 1522 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp880 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp880 1525 1525 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp881 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp881 1535 1535 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp883 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp882 $tmp883 	%argrw{"wr"}
	compref		$tmp885 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp884 $tmp885 	%argrw{"wr"}
	add		$tmp886 $tmp882 $tmp884 	%argrw{"wrr"}
	compref		$tmp888 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp887 $tmp888 	%argrw{"wr"}
	add		___592_result $tmp886 $tmp887 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp889 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp889 1545 1545 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp891 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp890 $tmp891 	%argrw{"wr"}
	compref		$tmp894 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp893 $tmp894 	%argrw{"wr"}
	compref		$tmp896 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp895 $tmp896 	%argrw{"wr"}
	max		$tmp892 $tmp893 $tmp895 	%argrw{"wrr"}
	max		___592_result $tmp890 $tmp892 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp897 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp897 1558 1558 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp900 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp899 $tmp900 	%argrw{"wr"}
	sqrt		$tmp898 $tmp899 	%argrw{"wr"}
	compref		$tmp903 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp902 $tmp903 	%argrw{"wr"}
	sqrt		$tmp901 $tmp902 	%argrw{"wr"}
	add		$tmp904 $tmp898 $tmp901 	%argrw{"wrr"}
	compref		$tmp907 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp906 $tmp907 	%argrw{"wr"}
	sqrt		$tmp905 $tmp906 	%argrw{"wr"}
	add		___592_result $tmp904 $tmp905 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp908 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp908 1565 1565 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp911 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp912 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp910 $tmp911 $tmp912 	%argrw{"wrr"}
	sqrt		$tmp909 $tmp910 	%argrw{"wr"}
	sqrt		___592_result $tmp909 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp913 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp913 1580 1580 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp916 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp915 $tmp916 	%argrw{"wr"}
	pow		$tmp914 $tmp915 $const5 	%argrw{"wrr"}
	compref		$tmp919 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp918 $tmp919 	%argrw{"wr"}
	pow		$tmp917 $tmp918 $const5 	%argrw{"wrr"}
	add		$tmp920 $tmp914 $tmp917 	%argrw{"wrr"}
	compref		$tmp923 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp922 $tmp923 	%argrw{"wr"}
	pow		$tmp921 $tmp922 $const5 	%argrw{"wrr"}
	add		$tmp924 $tmp920 $tmp921 	%argrw{"wrr"}
	div		$tmp925 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp924 $tmp925 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp927 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp928 ___594_yy 	%argrw{"wr"}
	assign		$tmp929 ___594_zz 	%argrw{"wr"}
	point		$tmp926 $tmp927 $tmp928 $tmp929 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp926 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp930 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp931 ___600_d $tmp930 	%argrw{"wrr"}
	if		$tmp931 1603 1630 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp932 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp932 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp933 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp933 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp934 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp934 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp935 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp935 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp936 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp936 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp937 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp937 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp938 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp939 ___600_d $tmp938 	%argrw{"wrr"}
	if		$tmp939 1616 1630 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp940 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp940 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp941 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp941 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp942 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp942 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp943 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp943 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp944 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp945 ___600_d $tmp944 	%argrw{"wrr"}
	if		$tmp945 1625 1630 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp946 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp946 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp947 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp947 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp948 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp949 ___600_d $tmp948 	%argrw{"wrr"}
	if		$tmp949 1630 1630 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp950 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp951 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp952 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp853 ___605_da $const4 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp953 $const18 $tmp853 	%line{147} %argrw{"wrr"}
	sub		___619_result $tmp953 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 	if (basis == "Voronoi F4")
	eq		$tmp954 $const10 $const39 	%line{166} %argrw{"wrr"}
	if		$tmp954 1812 1812 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:167
# 		result = voronoi_F4S(p);
	functioncall	$const40 1812 	%line{167} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const41 1810 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:135
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const20 1810 	%line{135} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 1809 	%line{117} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp957 $tmp646 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp956 $tmp957 	%argrw{"wr"}
	assign		___594_xi $tmp956 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp959 $tmp646 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp958 $tmp959 	%argrw{"wr"}
	assign		___594_yi $tmp958 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp961 $tmp646 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp960 $tmp961 	%argrw{"wr"}
	assign		___594_zi $tmp960 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___605_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___605_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___605_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___605_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp963 1660 1662 1807 1809 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp962 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp963 ___594_xx $tmp962 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp965 1664 1666 1805 1807 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp964 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp965 ___594_yy $tmp964 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp967 1668 1670 1803 1805 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp966 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp967 ___594_zz $tmp966 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp968 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp969 ___594_yy 	%argrw{"wr"}
	assign		$tmp970 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp968 $tmp969 $tmp970 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 1687 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp973 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp974 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp975 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp972 $tmp973 $tmp974 $tmp975 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp972 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp977 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp978 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp979 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp976 $tmp977 $tmp978 $tmp979 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp976 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp971 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp971 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp980 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp646 $tmp980 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 1754 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp981 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp981 1695 1695 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp982 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp982 1698 1698 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp983 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp983 1708 1708 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp985 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp984 $tmp985 	%argrw{"wr"}
	compref		$tmp987 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp986 $tmp987 	%argrw{"wr"}
	add		$tmp988 $tmp984 $tmp986 	%argrw{"wrr"}
	compref		$tmp990 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp989 $tmp990 	%argrw{"wr"}
	add		___592_result $tmp988 $tmp989 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp991 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp991 1718 1718 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp993 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp992 $tmp993 	%argrw{"wr"}
	compref		$tmp996 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp995 $tmp996 	%argrw{"wr"}
	compref		$tmp998 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp997 $tmp998 	%argrw{"wr"}
	max		$tmp994 $tmp995 $tmp997 	%argrw{"wrr"}
	max		___592_result $tmp992 $tmp994 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp999 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp999 1731 1731 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1002 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp1001 $tmp1002 	%argrw{"wr"}
	sqrt		$tmp1000 $tmp1001 	%argrw{"wr"}
	compref		$tmp1005 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1004 $tmp1005 	%argrw{"wr"}
	sqrt		$tmp1003 $tmp1004 	%argrw{"wr"}
	add		$tmp1006 $tmp1000 $tmp1003 	%argrw{"wrr"}
	compref		$tmp1009 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1008 $tmp1009 	%argrw{"wr"}
	sqrt		$tmp1007 $tmp1008 	%argrw{"wr"}
	add		___592_result $tmp1006 $tmp1007 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1010 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp1010 1738 1738 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1013 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1014 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1012 $tmp1013 $tmp1014 	%argrw{"wrr"}
	sqrt		$tmp1011 $tmp1012 	%argrw{"wr"}
	sqrt		___592_result $tmp1011 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1015 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp1015 1753 1753 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1018 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp1017 $tmp1018 	%argrw{"wr"}
	pow		$tmp1016 $tmp1017 $const5 	%argrw{"wrr"}
	compref		$tmp1021 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1020 $tmp1021 	%argrw{"wr"}
	pow		$tmp1019 $tmp1020 $const5 	%argrw{"wrr"}
	add		$tmp1022 $tmp1016 $tmp1019 	%argrw{"wrr"}
	compref		$tmp1025 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1024 $tmp1025 	%argrw{"wr"}
	pow		$tmp1023 $tmp1024 $const5 	%argrw{"wrr"}
	add		$tmp1026 $tmp1022 $tmp1023 	%argrw{"wrr"}
	div		$tmp1027 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp1026 $tmp1027 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1029 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1030 ___594_yy 	%argrw{"wr"}
	assign		$tmp1031 ___594_zz 	%argrw{"wr"}
	point		$tmp1028 $tmp1029 $tmp1030 $tmp1031 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1028 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1032 ___605_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp1033 ___600_d $tmp1032 	%argrw{"wrr"}
	if		$tmp1033 1776 1803 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1034 ___605_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp1034 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1035 ___605_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp1035 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1036 ___605_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___605_da $const3 $tmp1036 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___605_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1037 ___605_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp1037 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1038 ___605_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp1038 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1039 ___605_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___605_pa $const3 $tmp1039 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___605_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1040 ___605_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp1041 ___600_d $tmp1040 	%argrw{"wrr"}
	if		$tmp1041 1789 1803 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1042 ___605_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp1042 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1043 ___605_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___605_da $const4 $tmp1043 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___605_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1044 ___605_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp1044 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1045 ___605_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___605_pa $const4 $tmp1045 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___605_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1046 ___605_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp1047 ___600_d $tmp1046 	%argrw{"wrr"}
	if		$tmp1047 1798 1803 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1048 ___605_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___605_da $const24 $tmp1048 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___605_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1049 ___605_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___605_pa $const24 $tmp1049 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___605_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1050 ___605_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp1051 ___600_d $tmp1050 	%argrw{"wrr"}
	if		$tmp1051 1803 1803 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___605_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___605_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1052 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1053 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1054 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:119
# 	return da[n];
	aref		$tmp955 ___605_da $const24 	%line{119} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp1055 $const18 $tmp955 	%line{148} %argrw{"wrr"}
	sub		___619_result $tmp1055 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:168
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp1056 $const10 $const42 	%line{168} %argrw{"wrr"}
	if		$tmp1056 1987 1987 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:169
# 		result = voronoi_F1F2S(p);
	functioncall	$const43 1987 	%line{169} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const44 1985 	%line{149} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const45 1985 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 1982 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1059 $tmp646 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp1058 $tmp1059 	%argrw{"wr"}
	assign		___594_xi $tmp1058 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1061 $tmp646 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp1060 $tmp1061 	%argrw{"wr"}
	assign		___594_yi $tmp1060 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1063 $tmp646 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp1062 $tmp1063 	%argrw{"wr"}
	assign		___594_zi $tmp1062 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1065 1833 1835 1980 1982 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp1064 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp1065 ___594_xx $tmp1064 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1067 1837 1839 1978 1980 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp1066 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp1067 ___594_yy $tmp1066 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1069 1841 1843 1976 1978 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp1068 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp1069 ___594_zz $tmp1068 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1070 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1071 ___594_yy 	%argrw{"wr"}
	assign		$tmp1072 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1070 $tmp1071 $tmp1072 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 1860 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1075 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp1076 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp1077 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp1074 $tmp1075 $tmp1076 $tmp1077 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1074 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1079 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp1080 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp1081 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp1078 $tmp1079 $tmp1080 $tmp1081 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1078 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1073 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1073 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1082 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp646 $tmp1082 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 1927 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1083 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp1083 1868 1868 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1084 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp1084 1871 1871 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1085 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp1085 1881 1881 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1087 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp1086 $tmp1087 	%argrw{"wr"}
	compref		$tmp1089 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1088 $tmp1089 	%argrw{"wr"}
	add		$tmp1090 $tmp1086 $tmp1088 	%argrw{"wrr"}
	compref		$tmp1092 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1091 $tmp1092 	%argrw{"wr"}
	add		___592_result $tmp1090 $tmp1091 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1093 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp1093 1891 1891 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1095 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp1094 $tmp1095 	%argrw{"wr"}
	compref		$tmp1098 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1097 $tmp1098 	%argrw{"wr"}
	compref		$tmp1100 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1099 $tmp1100 	%argrw{"wr"}
	max		$tmp1096 $tmp1097 $tmp1099 	%argrw{"wrr"}
	max		___592_result $tmp1094 $tmp1096 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1101 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp1101 1904 1904 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1104 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp1103 $tmp1104 	%argrw{"wr"}
	sqrt		$tmp1102 $tmp1103 	%argrw{"wr"}
	compref		$tmp1107 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1106 $tmp1107 	%argrw{"wr"}
	sqrt		$tmp1105 $tmp1106 	%argrw{"wr"}
	add		$tmp1108 $tmp1102 $tmp1105 	%argrw{"wrr"}
	compref		$tmp1111 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1110 $tmp1111 	%argrw{"wr"}
	sqrt		$tmp1109 $tmp1110 	%argrw{"wr"}
	add		___592_result $tmp1108 $tmp1109 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1112 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp1112 1911 1911 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1115 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1116 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1114 $tmp1115 $tmp1116 	%argrw{"wrr"}
	sqrt		$tmp1113 $tmp1114 	%argrw{"wr"}
	sqrt		___592_result $tmp1113 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1117 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp1117 1926 1926 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1120 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp1119 $tmp1120 	%argrw{"wr"}
	pow		$tmp1118 $tmp1119 $const5 	%argrw{"wrr"}
	compref		$tmp1123 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1122 $tmp1123 	%argrw{"wr"}
	pow		$tmp1121 $tmp1122 $const5 	%argrw{"wrr"}
	add		$tmp1124 $tmp1118 $tmp1121 	%argrw{"wrr"}
	compref		$tmp1127 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1126 $tmp1127 	%argrw{"wr"}
	pow		$tmp1125 $tmp1126 $const5 	%argrw{"wrr"}
	add		$tmp1128 $tmp1124 $tmp1125 	%argrw{"wrr"}
	div		$tmp1129 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp1128 $tmp1129 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1131 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1132 ___594_yy 	%argrw{"wr"}
	assign		$tmp1133 ___594_zz 	%argrw{"wr"}
	point		$tmp1130 $tmp1131 $tmp1132 $tmp1133 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1130 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1134 ___606_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp1135 ___600_d $tmp1134 	%argrw{"wrr"}
	if		$tmp1135 1949 1976 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1136 ___606_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp1136 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1137 ___606_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp1137 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1138 ___606_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const3 $tmp1138 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1139 ___606_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp1139 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1140 ___606_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp1140 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1141 ___606_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const3 $tmp1141 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1142 ___606_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp1143 ___600_d $tmp1142 	%argrw{"wrr"}
	if		$tmp1143 1962 1976 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1144 ___606_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp1144 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1145 ___606_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp1145 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1146 ___606_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp1146 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1147 ___606_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp1147 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1148 ___606_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp1149 ___600_d $tmp1148 	%argrw{"wrr"}
	if		$tmp1149 1971 1976 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1150 ___606_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp1150 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1151 ___606_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp1151 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1152 ___606_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp1153 ___600_d $tmp1152 	%argrw{"wrr"}
	if		$tmp1153 1976 1976 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1154 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1155 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1156 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp1157 ___606_da $const3 	%line{129} %argrw{"wrr"}
	aref		$tmp1158 ___606_da $const2 	%argrw{"wrr"}
	sub		$tmp1057 $tmp1157 $tmp1158 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:149
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp1159 $const18 $tmp1057 	%line{149} %argrw{"wrr"}
	sub		___619_result $tmp1159 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:170
# 	if (basis == "Voronoi Crackle")
	eq		$tmp1160 $const10 $const46 	%line{170} %argrw{"wrr"}
	if		$tmp1160 2169 2169 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:171
# 		result = voronoi_CrS(p);
	functioncall	$const47 2169 	%line{171} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const48 2167 	%line{150} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const44 2161 	%line{141} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:136
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const45 2161 	%line{136} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const22 2158 	%line{127} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	xi = (int)floor(p[0]);
	compref		$tmp1164 $tmp646 $const2 	%line{57} %argrw{"wrr"}
	floor		$tmp1163 $tmp1164 	%argrw{"wr"}
	assign		___594_xi $tmp1163 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:58
# 	yi = (int)floor(p[1]);
	compref		$tmp1166 $tmp646 $const3 	%line{58} %argrw{"wrr"}
	floor		$tmp1165 $tmp1166 	%argrw{"wr"}
	assign		___594_yi $tmp1165 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	zi = (int)floor(p[2]);
	compref		$tmp1168 $tmp646 $const4 	%line{59} %argrw{"wrr"}
	floor		$tmp1167 $tmp1168 	%argrw{"wr"}
	assign		___594_zi $tmp1167 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[0] = 1e10;
	aassign		___606_da $const2 $const23 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[1] = 1e10;
	aassign		___606_da $const3 $const23 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:63
# 	da[2] = 1e10;
	aassign		___606_da $const4 $const23 	%line{63} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	da[3] = 1e10;
	aassign		___606_da $const24 $const23 	%line{64} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1170 2009 2011 2156 2158 	%line{66} %argrw{"r"}
	sub		___594_xx ___594_xi $const3 	%argrw{"wrr"}
	add		$tmp1169 ___594_xi $const3 	%argrw{"wrr"}
	le		$tmp1170 ___594_xx $tmp1169 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1172 2013 2015 2154 2156 	%line{67} %argrw{"r"}
	sub		___594_yy ___594_yi $const3 	%argrw{"wrr"}
	add		$tmp1171 ___594_yi $const3 	%argrw{"wrr"}
	le		$tmp1172 ___594_yy $tmp1171 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1174 2017 2019 2152 2154 	%line{68} %argrw{"r"}
	sub		___594_zz ___594_zi $const3 	%argrw{"wrr"}
	add		$tmp1173 ___594_zi $const3 	%argrw{"wrr"}
	le		$tmp1174 ___594_zz $tmp1173 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point ip = point(xx, yy, zz);
	assign		$tmp1175 ___594_xx 	%line{69} %argrw{"wr"}
	assign		$tmp1176 ___594_yy 	%argrw{"wr"}
	assign		$tmp1177 ___594_zz 	%argrw{"wr"}
	point		___600_ip $tmp1175 $tmp1176 $tmp1177 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const25 2036 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float r = cellnoise(p);
	cellnoise	___593_r ___600_ip 	%line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:46
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1180 ___600_ip $const3 	%line{46} %argrw{"wrr"}
	compref		$tmp1181 ___600_ip $const2 	%argrw{"wrr"}
	compref		$tmp1182 ___600_ip $const4 	%argrw{"wrr"}
	point		$tmp1179 $tmp1180 $tmp1181 $tmp1182 	%argrw{"wrrr"}
	cellnoise	___593_g $tmp1179 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1184 ___600_ip $const3 	%line{47} %argrw{"wrr"}
	compref		$tmp1185 ___600_ip $const4 	%argrw{"wrr"}
	compref		$tmp1186 ___600_ip $const2 	%argrw{"wrr"}
	point		$tmp1183 $tmp1184 $tmp1185 $tmp1186 	%argrw{"wrrr"}
	cellnoise	___593_b $tmp1183 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:49
# 	return color(r, g, b);
	color		$tmp1178 ___593_r ___593_g ___593_b 	%line{49} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				point vp = (point)cellnoise_color(ip);
	assign		___600_vp $tmp1178 	%line{70} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:71
# 				point pd = p - (vp + ip);
	add		$tmp1187 ___600_vp ___600_ip 	%line{71} %argrw{"wrr"}
	sub		___600_pd $tmp646 $tmp1187 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const26 2103 	%line{72} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	float result = 0.0;
	assign		___592_result $const5 	%line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1188 $const21 $const21 	%line{23} %argrw{"wrr"}
	if		$tmp1188 2044 2044 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		result = dot(d, d);
	dot		___592_result ___600_pd ___600_pd 	%line{24} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1189 $const21 $const27 	%line{25} %argrw{"wrr"}
	if		$tmp1189 2047 2047 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		result = length(d);
	length		___592_result ___600_pd 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Manhattan")
	eq		$tmp1190 $const21 $const28 	%line{27} %argrw{"wrr"}
	if		$tmp1190 2057 2057 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		result = fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1192 ___600_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp1191 $tmp1192 	%argrw{"wr"}
	compref		$tmp1194 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1193 $tmp1194 	%argrw{"wr"}
	add		$tmp1195 $tmp1191 $tmp1193 	%argrw{"wrr"}
	compref		$tmp1197 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1196 $tmp1197 	%argrw{"wr"}
	add		___592_result $tmp1195 $tmp1196 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Chebychev")
	eq		$tmp1198 $const21 $const29 	%line{29} %argrw{"wrr"}
	if		$tmp1198 2067 2067 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		result = max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1200 ___600_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp1199 $tmp1200 	%argrw{"wr"}
	compref		$tmp1203 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1202 $tmp1203 	%argrw{"wr"}
	compref		$tmp1205 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1204 $tmp1205 	%argrw{"wr"}
	max		$tmp1201 $tmp1202 $tmp1204 	%argrw{"wrr"}
	max		___592_result $tmp1199 $tmp1201 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1206 $const21 $const30 	%line{31} %argrw{"wrr"}
	if		$tmp1206 2080 2080 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		result = sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1209 ___600_pd $const2 	%line{32} %argrw{"wrr"}
	fabs		$tmp1208 $tmp1209 	%argrw{"wr"}
	sqrt		$tmp1207 $tmp1208 	%argrw{"wr"}
	compref		$tmp1212 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1211 $tmp1212 	%argrw{"wr"}
	sqrt		$tmp1210 $tmp1211 	%argrw{"wr"}
	add		$tmp1213 $tmp1207 $tmp1210 	%argrw{"wrr"}
	compref		$tmp1216 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1215 $tmp1216 	%argrw{"wr"}
	sqrt		$tmp1214 $tmp1215 	%argrw{"wr"}
	add		___592_result $tmp1213 $tmp1214 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1217 $const21 $const31 	%line{33} %argrw{"wrr"}
	if		$tmp1217 2087 2087 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		result = sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1220 ___600_pd ___600_pd 	%line{34} %argrw{"wrr"}
	mul		$tmp1221 ___600_pd ___600_pd 	%argrw{"wrr"}
	dot		$tmp1219 $tmp1220 $tmp1221 	%argrw{"wrr"}
	sqrt		$tmp1218 $tmp1219 	%argrw{"wr"}
	sqrt		___592_result $tmp1218 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:35
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1222 $const21 $const32 	%line{35} %argrw{"wrr"}
	if		$tmp1222 2102 2102 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:36
# 		result = pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1225 ___600_pd $const2 	%line{36} %argrw{"wrr"}
	fabs		$tmp1224 $tmp1225 	%argrw{"wr"}
	pow		$tmp1223 $tmp1224 $const5 	%argrw{"wrr"}
	compref		$tmp1228 ___600_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1227 $tmp1228 	%argrw{"wr"}
	pow		$tmp1226 $tmp1227 $const5 	%argrw{"wrr"}
	add		$tmp1229 $tmp1223 $tmp1226 	%argrw{"wrr"}
	compref		$tmp1232 ___600_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1231 $tmp1232 	%argrw{"wr"}
	pow		$tmp1230 $tmp1231 $const5 	%argrw{"wrr"}
	add		$tmp1233 $tmp1229 $tmp1230 	%argrw{"wrr"}
	div		$tmp1234 $const12 $const5 	%argrw{"wrr"}
	pow		___592_result $tmp1233 $tmp1234 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:38
# 	return result;
	assign		___600_d ___592_result 	%line{38} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				vp += point(xx, yy, zz);
	assign		$tmp1236 ___594_xx 	%line{74} %argrw{"wr"}
	assign		$tmp1237 ___594_yy 	%argrw{"wr"}
	assign		$tmp1238 ___594_zz 	%argrw{"wr"}
	point		$tmp1235 $tmp1236 $tmp1237 $tmp1238 	%argrw{"wrrr"}
	add		___600_vp ___600_vp $tmp1235 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 				if (d < da[0]) {
	aref		$tmp1239 ___606_da $const2 	%line{76} %argrw{"wrr"}
	lt		$tmp1240 ___600_d $tmp1239 	%argrw{"wrr"}
	if		$tmp1240 2125 2152 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[3] = da[2];
	aref		$tmp1241 ___606_da $const4 	%line{77} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp1241 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[2] = da[1];
	aref		$tmp1242 ___606_da $const3 	%line{78} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp1242 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:79
# 					da[1] = da[0];
	aref		$tmp1243 ___606_da $const2 	%line{79} %argrw{"wrr"}
	aassign		___606_da $const3 $tmp1243 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					da[0] = d;
	aassign		___606_da $const2 ___600_d 	%line{80} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[3] = pa[2];
	aref		$tmp1244 ___606_pa $const4 	%line{82} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp1244 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[2] = pa[1];
	aref		$tmp1245 ___606_pa $const3 	%line{83} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp1245 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:84
# 					pa[1] = pa[0];
	aref		$tmp1246 ___606_pa $const2 	%line{84} %argrw{"wrr"}
	aassign		___606_pa $const3 $tmp1246 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 					pa[0] = vp;
	aassign		___606_pa $const2 ___600_vp 	%line{85} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 				else if (d < da[1]) {
	aref		$tmp1247 ___606_da $const3 	%line{87} %argrw{"wrr"}
	lt		$tmp1248 ___600_d $tmp1247 	%argrw{"wrr"}
	if		$tmp1248 2138 2152 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[3] = da[2];
	aref		$tmp1249 ___606_da $const4 	%line{88} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp1249 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:89
# 					da[2] = da[1];
	aref		$tmp1250 ___606_da $const3 	%line{89} %argrw{"wrr"}
	aassign		___606_da $const4 $tmp1250 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					da[1] = d;
	aassign		___606_da $const3 ___600_d 	%line{90} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[3] = pa[2];
	aref		$tmp1251 ___606_pa $const4 	%line{92} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp1251 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:93
# 					pa[2] = pa[1];
	aref		$tmp1252 ___606_pa $const3 	%line{93} %argrw{"wrr"}
	aassign		___606_pa $const4 $tmp1252 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 					pa[1] = vp;
	aassign		___606_pa $const3 ___600_vp 	%line{94} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 				else if (d < da[2]) {
	aref		$tmp1253 ___606_da $const4 	%line{96} %argrw{"wrr"}
	lt		$tmp1254 ___600_d $tmp1253 	%argrw{"wrr"}
	if		$tmp1254 2147 2152 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:97
# 					da[3] = da[2];
	aref		$tmp1255 ___606_da $const4 	%line{97} %argrw{"wrr"}
	aassign		___606_da $const24 $tmp1255 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					da[2] = d;
	aassign		___606_da $const4 ___600_d 	%line{98} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:100
# 					pa[3] = pa[2];
	aref		$tmp1256 ___606_pa $const4 	%line{100} %argrw{"wrr"}
	aassign		___606_pa $const24 $tmp1256 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 					pa[2] = vp;
	aassign		___606_pa $const4 ___600_vp 	%line{101} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 				else if (d < da[3]) {
	aref		$tmp1257 ___606_da $const24 	%line{103} %argrw{"wrr"}
	lt		$tmp1258 ___600_d $tmp1257 	%argrw{"wrr"}
	if		$tmp1258 2152 2152 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:104
# 					da[3] = d;
	aassign		___606_da $const24 ___600_d 	%line{104} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:105
# 					pa[3] = vp;
	aassign		___606_pa $const24 ___600_vp 	%line{105} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1259 ___594_zz 	%line{68} %argrw{"wr"}
	add		___594_zz ___594_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1260 ___594_yy 	%line{67} %argrw{"wr"}
	add		___594_yy ___594_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1261 ___594_xx 	%line{66} %argrw{"wr"}
	add		___594_xx ___594_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:129
# 	return da[n2] - da[n1];
	aref		$tmp1262 ___606_da $const3 	%line{129} %argrw{"wrr"}
	aref		$tmp1263 ___606_da $const2 	%argrw{"wrr"}
	sub		$tmp1162 $tmp1262 $tmp1263 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:141
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___612_t $const7 $tmp1162 	%line{141} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:142
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp1264 ___612_t $const12 	%line{142} %argrw{"wrr"}
	if		$tmp1264 2165 2166 	%argrw{"r"}
	assign		$tmp1161 $const12 	%argrw{"wr"}
	assign		$tmp1161 ___612_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:150
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp1265 $const18 $tmp1161 	%line{150} %argrw{"wrr"}
	sub		___619_result $tmp1265 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:172
# 	if (basis == "Cell Noise")
	eq		$tmp1266 $const10 $const49 	%line{172} %argrw{"wrr"}
	if		$tmp1266 2172 2172 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 		result = cellnoise(p);
	cellnoise	___619_result $tmp646 	%line{173} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	return result;
	assign		___628_t ___619_result 	%line{175} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:241
# 		if (hard)
	if		$const2 2177 2177 	%line{241} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:242
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp1267 $const18 ___628_t 	%line{242} %argrw{"wrr"}
	sub		$tmp1268 $tmp1267 $const12 	%argrw{"wrr"}
	fabs		___628_t $tmp1268 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:244
# 		float sum2 = sum + t*amp;
	mul		$tmp1269 ___628_t ___625_amp 	%line{244} %argrw{"wrr"}
	add		___628_sum2 ___625_sum $tmp1269 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:246
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp1270 $const3 ___625_n 	%line{246} %argrw{"wrr"}
	assign		$tmp1271 $tmp1270 	%argrw{"wr"}
	add		$tmp1272 ___625_n $const3 	%argrw{"wrr"}
	shl		$tmp1273 $const3 $tmp1272 	%argrw{"wrr"}
	sub		$tmp1274 $tmp1273 $const3 	%argrw{"wrr"}
	assign		$tmp1275 $tmp1274 	%argrw{"wr"}
	div		$tmp1276 $tmp1271 $tmp1275 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp1276 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:247
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp1277 ___625_n $const3 	%line{247} %argrw{"wrr"}
	shl		$tmp1278 $const3 $tmp1277 	%argrw{"wrr"}
	assign		$tmp1279 $tmp1278 	%argrw{"wr"}
	add		$tmp1280 ___625_n $const4 	%argrw{"wrr"}
	shl		$tmp1281 $const3 $tmp1280 	%argrw{"wrr"}
	sub		$tmp1282 $tmp1281 $const3 	%argrw{"wrr"}
	assign		$tmp1283 $tmp1282 	%argrw{"wr"}
	div		$tmp1284 $tmp1279 $tmp1283 	%argrw{"wrr"}
	mul		___628_sum2 ___628_sum2 $tmp1284 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:249
# 		return (1.0 - rmd)*sum + rmd*sum2;
	sub		$tmp1285 $const12 ___625_rmd 	%line{249} %argrw{"wrr"}
	mul		$tmp1286 $tmp1285 ___625_sum 	%argrw{"wrr"}
	mul		$tmp1287 ___625_rmd ___628_sum2 	%argrw{"wrr"}
	add		$tmp15 $tmp1286 $tmp1287 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:252
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp1288 $const3 ___625_n 	%line{252} %argrw{"wrr"}
	assign		$tmp1289 $tmp1288 	%argrw{"wr"}
	add		$tmp1290 ___625_n $const3 	%argrw{"wrr"}
	shl		$tmp1291 $const3 $tmp1290 	%argrw{"wrr"}
	sub		$tmp1292 $tmp1291 $const3 	%argrw{"wrr"}
	assign		$tmp1293 $tmp1292 	%argrw{"wr"}
	div		$tmp1294 $tmp1289 $tmp1293 	%argrw{"wrr"}
	mul		___625_sum ___625_sum $tmp1294 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:253
# 		return sum;
	assign		$tmp15 ___625_sum 	%line{253} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_wave_texture.osl:41
# 		n = n + (distortion * noise_turbulence(p * dscale, "Perlin", detail, 0));
	mul		$tmp1295 Distortion $tmp15 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{41} %argrw{"wrr"}
	add		___631_n ___631_n $tmp1295 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:43
# 	result = noise_wave("Sine", n);
	functioncall	$const52 2247 	%line{43} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:190
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	assign		___621_result $const5 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{190} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:192
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	eq		$tmp1296 $const51 $const51 	%line{192} %argrw{"wrr"}
	if		$tmp1296 2220 2246 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:193
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	sin		$tmp1297 ___631_n 	%line{193} %argrw{"wr"}
	mul		$tmp1298 $const50 $tmp1297 	%argrw{"wrr"}
	add		___621_result $const50 $tmp1298 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:195
# /* Noise Bases */
	eq		$tmp1299 $const51 $const53 	%line{195} %argrw{"wrr"}
	if		$tmp1299 2232 2246 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:196
# 
	mul		___623_b $const18 $const54 	%line{196} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:197
# float noise_basis(point p, string basis)
	div		$tmp1300 ___631_n ___623_b 	%line{197} %argrw{"wrr"}
	assign		___623_n $tmp1300 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:198
# {
	assign		$tmp1302 ___623_n 	%line{198} %argrw{"wr"}
	mul		$tmp1301 $tmp1302 ___623_b 	%argrw{"wrr"}
	sub		___631_n ___631_n $tmp1301 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:199
# 	float result = 0.0;
	lt		$tmp1303 ___631_n $const2 	%line{199} %argrw{"wrr"}
	if		$tmp1303 2231 2231 	%argrw{"r"}
	add		___631_n ___631_n ___623_b 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:201
# 	if (basis == "Perlin")
	div		___621_result ___631_n ___623_b 	%line{201} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:203
# 	if (basis == "Voronoi F1")
	eq		$tmp1304 $const51 $const55 	%line{203} %argrw{"wrr"}
	if		$tmp1304 2246 2246 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:204
# 		result = voronoi_F1S(p);
	mul		___624_b $const18 $const54 	%line{204} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:205
# 	if (basis == "Voronoi F2")
	assign		___624_rmax $const12 	%line{205} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:207
# 	if (basis == "Voronoi F3")
	div		$tmp1307 $const12 ___624_b 	%line{207} %argrw{"wrr"}
	mul		$tmp1308 ___631_n $tmp1307 	%argrw{"wrr"}
	add		$tmp1309 $tmp1308 $const50 	%argrw{"wrr"}
	floor		$tmp1306 $tmp1309 	%argrw{"wr"}
	div		$tmp1310 $const12 ___624_b 	%argrw{"wrr"}
	mul		$tmp1311 ___631_n $tmp1310 	%argrw{"wrr"}
	sub		$tmp1312 $tmp1306 $tmp1311 	%argrw{"wrr"}
	fabs		$tmp1305 $tmp1312 	%argrw{"wr"}
	mul		$tmp1313 $const18 $tmp1305 	%argrw{"wrr"}
	sub		___621_result ___624_rmax $tmp1313 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:210
# 		result = voronoi_F4S(p);
	assign		___631_result ___621_result 	%line{210} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:45
# 	return result;
	assign		Fac ___631_result 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{45} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:66
# 	Color = color(Fac, Fac, Fac);
	color		Color Fac Fac Fac 	%line{66} %argrw{"wrrr"}
	end
